{"version":3,"sources":["constants.js","components/icons/WarningIcon.js","components/stockIndicators.js","translate.js","api/formatAllFields.js","components/StockTable.js","stockUtils.js","dataRetriever.js","avanza.js","Portfolio/portfolioData.js","Portfolio/dataRetriever.js","Portfolio/portfolioUtils.js","components/CategoryPage.js","BestYield/BestYield.js","BlueChip/BlueChip.js","Portfolio/Portfolio.js","Weapons/Weapons.js","SingleStock/backend.js","SingleStock/ReportInputSection.js","SingleStock/SingleStock.js","Industry/Industry.js","Forest/Forest.js","Invest/Invest.js","RealEstate/RealEstate.js","Bank/Bank.js","App/App.js","serviceWorker.js","index.js"],"names":["exchangeRates","DKK","USD","BASE_URL","BILLION","MILLION","THOUSAND","OPERATING_MARGIN","PRICE_EARNINGS_RATIO","PRICE_SALES_RATIO","PRICE_BOOK_VALUE","DIRECT_YIELD","VOLATILITY","NUMBER_OF_EMPLOYEES","REVENUE","REVENUE_PER_EMPLOYEE","REVENUE_PER_SHARE","TOTAL_ASSETS","EARNINGS_PER_SHARE","NET_EARNINGS","NUMBER_OF_SHARES","TOTAL_EQUITY","TOTAL_DEBT","SOLIDITY","MARKET_CAP","YEAR","ID","LAST_PRICE","CURRENCY","EBIT","CHANGE_VALUES","OLLE","RETURN_ON_EQUITY","RETURN_ON_CAPITAL_EMPLOYED","NET_ASSET_VALUE","ANNUAL_REPORTS_TABLE","INTERIM_REPORTS_TABLE","MULTIPLE_STOCKS_TABLE","SVG","style","fill","width","className","viewBox","height","xmlns","xmlnsXlink","d","yieldIsGood","stockData","directYield","getYieldTarget","yieldIsVeryGood","peIsGood","priceEarningsRatio","peIsVeryGood","peIsVeryBad","tenYearsBondInterest","volatilityIsGood","volatility","volatilityIsVeryGood","averageOMXS30volatility","volatilityIsBad","volatilityIsVeryBad","translate","key","tooltip","require","formatField","value","keyShouldBeFormatted","formatNumber","number","isNaN","returnValue","negative","toPrecision","x","parts","toString","split","replace","join","numberWithSpaces","toFixed","classNames","StockTable","props","stocks","ownedStocks","sortKey","columnsToShow","type","sort","a","b","tableType","getMainColumn","map","column","data-tip","owned","stockId","found","forEach","stock","id","stockIsOwned","showSingleStock","handleClickReport","Stock","formatDate","getFullYear","getMonth","slice","getDate","this","stockdata","href","onClick","year","period","handleClick","name","currency","shouldShowOldReportWarning","reportDate","Date","WarningIcon","getTime","changeValues","changeValue","renderMainColumn","getClassNames","renderStockData","React","Component","good","veryGood","veryBad","bad","defaultProps","rp","getStocks","category","Promise","resolve","reject","then","parsedData","JSON","parse","cachedStocks","getStock","lastPrice","console","error","convertToSEK","keyRatios","transformJson","basePortfolioStrategy","minShare","maxShare","minNumberOfStocks","maxNumberOfStocks","minRatioOfEachShareInPortfolio","maxRatioOfEachShareInPortfolio","portfolios","strategy","getPortfolios","promises","portfolio","push","returnData","getStockWithAmount","all","getStockValue","getStocksInPortfolio","getPortfolioValue","portfolioData","reduce","sum","portfolioRatioIsGood","totalPortfolioValue","portfolioRatio","numberOfStocksIsGood","length","amount","getAllOwnedStocks","concat","CategoryPage","state","setState","catch","err","message","active","title","renderButtons","onSort","BestYield","BlueChip","PortfolioRow","PortfolioDetails","widrth","StockRow","portfolioValue","minRatio","maxRatio","stockRatioIsGood","stockRatio","sector","Portfolio","sectors","getSectors","sortedSectors","Object","keys","getTotalPortfolioValue","Weapons","ReportInputSection","reportData","multiplier","revenue","earningsBeforeInterestAndTax","netEarnings","totalAssets","totalEquity","totalDebt","numberOfShares","numberOfEmployees","handleInputChange","bind","handleSubmit","event","target","checked","preventDefault","data","report","multiply","method","uri","body","json","reportSaved","stockDetails","onSubmit","onChange","SingleStock","stocksDetails","showReportInput","inheritedColumns","filter","col","extraColumns","Set","annualReports","getColumnsToShow","interimReports","renderInputSection","renderAnnualReports","renderInterimReports","renderNewReportButton","Industry","Forest","Investment","RealEstate","Bank","App","activePage","activeStock","Invest","page","renderButton","renderActivePage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7f70cf40.chunk.js","sourcesContent":["export const exchangeRates = {\n  DKK: 1.41,\n  USD: 9.42,\n};\n\nexport const BASE_URL = \"https://bissenisse.duckdns.org:443\";\n// export const BASE_URL = \"http://localhost:8080\";\n\nexport const BILLION = 1000000000;\nexport const MILLION = 1000000;\nexport const THOUSAND = 1000;\n\nexport const OPERATING_MARGIN = \"operatingMargin\";\nexport const PRICE_EARNINGS_RATIO = \"priceEarningsRatio\";\nexport const PRICE_SALES_RATIO = \"priceSalesRatio\";\nexport const PRICE_BOOK_VALUE = \"priceBookValue\";\nexport const DIRECT_YIELD = \"directYield\";\nexport const VOLATILITY = \"volatility\";\nexport const NUMBER_OF_EMPLOYEES = \"numberOfEmployees\";\nexport const REVENUE = \"revenue\"; // = sales\nexport const REVENUE_PER_EMPLOYEE = \"revenuePerEmployee\";\nexport const REVENUE_PER_SHARE = \"revenuePerShare\";\nexport const TOTAL_ASSETS = \"totalAssets\";\nexport const EARNINGS_PER_SHARE = \"earningsPerShare\";\nexport const NET_EARNINGS = \"netEarnings\";\nexport const NUMBER_OF_SHARES = \"numberOfShares\";\nexport const TOTAL_EQUITY = \"totalEquity\"; // = eget kapital\nexport const TOTAL_DEBT = \"totalDebt\";\nexport const SOLIDITY = \"solidity\";\nexport const MARKET_CAP = \"marketCap\";\nexport const YEAR = \"year\";\nexport const ID = \"id\";\nexport const LAST_PRICE = \"lastPrice\";\nexport const CURRENCY = \"currency\";\nexport const EBIT = \"earningsBeforeInterestAndTax\";\nexport const CHANGE_VALUES = \"changeValues\";\nexport const OLLE = \"OLLE\";\nexport const RETURN_ON_EQUITY = \"returnOnEquity\";\nexport const RETURN_ON_CAPITAL_EMPLOYED = \"returnOnCapitalEmployed\";\nexport const NET_ASSET_VALUE = \"netAssetValue\";\n\nexport const ANNUAL_REPORTS_TABLE = \"annualReportsTable\";\nexport const INTERIM_REPORTS_TABLE = \"interimReportsTable\";\nexport const MULTIPLE_STOCKS_TABLE = \"multipleStocksTable\";\n","import React from \"react\";\n// https://blog.lftechnology.com/using-svg-icons-components-in-react-44fbe8e5f91\n\nconst SVG = ({\n  style = {},\n  fill = \"#000\",\n  width = \"100%\",\n  className = \"\",\n  viewBox = \"0 0 576 512\",\n}) => (\n  <svg\n    width={width}\n    style={style}\n    height={width}\n    viewBox={viewBox}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    className={`svg-icon ${className || \"\"}`}\n    xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n  >\n    <path\n      fill={fill}\n      d=\"M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z\"\n    />\n  </svg>\n);\n\nexport default SVG;\n","export function yieldIsGood(stockData) {\r\n  const { directYield } = stockData;\r\n\r\n  return directYield > getYieldTarget();\r\n}\r\n\r\nexport function yieldIsVeryGood(stockData) {\r\n  const { directYield } = stockData;\r\n  return directYield > getYieldTarget() * 1.25;\r\n}\r\n\r\nexport function peIsGood(stockData) {\r\n  const { priceEarningsRatio, directYield } = stockData;\r\n\r\n  if (priceEarningsRatio <= 0) {\r\n    return false;\r\n  }\r\n\r\n  return 1 / (directYield / 100) >= priceEarningsRatio;\r\n}\r\n\r\nexport function peIsVeryGood(stockData) {\r\n  const { priceEarningsRatio, directYield } = stockData;\r\n  return (\r\n    peIsGood(stockData) && 1 / (directYield / 100) >= priceEarningsRatio * 2\r\n  );\r\n}\r\n\r\nexport function peIsVeryBad(stockData) {\r\n  const { priceEarningsRatio } = stockData;\r\n  return priceEarningsRatio <= 0;\r\n}\r\n\r\nfunction getYieldTarget() {\r\n  // TODO: get tenYearsBondInterest from some API?\r\n  const tenYearsBondInterest = -0.2;\r\n  const riskPremium = 5;\r\n  return tenYearsBondInterest + riskPremium;\r\n}\r\n\r\nconst averageOMXS30volatility = 21.6;\r\n\r\nexport function volatilityIsGood(stockData) {\r\n  const { volatility } = stockData;\r\n  return volatility <= averageOMXS30volatility * 0.75;\r\n}\r\n\r\nexport function volatilityIsVeryGood(stockData) {\r\n  const { volatility } = stockData;\r\n  return volatility <= averageOMXS30volatility * 0.5;\r\n}\r\n\r\nexport function volatilityIsBad(stockData) {\r\n  const { volatility } = stockData;\r\n  return volatility > averageOMXS30volatility * 1.25;\r\n}\r\n\r\nexport function volatilityIsVeryBad(stockData) {\r\n  const { volatility } = stockData;\r\n  return volatility > averageOMXS30volatility * 1.9;\r\n}\r\n","import {\n  OPERATING_MARGIN,\n  REVENUE_PER_SHARE,\n  REVENUE_PER_EMPLOYEE,\n  REVENUE,\n  NUMBER_OF_EMPLOYEES,\n  VOLATILITY,\n  DIRECT_YIELD,\n  PRICE_SALES_RATIO,\n  PRICE_EARNINGS_RATIO,\n  TOTAL_ASSETS,\n  EARNINGS_PER_SHARE,\n  PRICE_BOOK_VALUE,\n  SOLIDITY,\n  MARKET_CAP,\n  YEAR,\n  ID,\n  EBIT,\n  NET_EARNINGS,\n  RETURN_ON_EQUITY,\n  RETURN_ON_CAPITAL_EMPLOYED,\n  TOTAL_EQUITY,\n  TOTAL_DEBT,\n  NET_ASSET_VALUE,\n} from \"./constants\";\n\nexport function translate(key) {\n  switch (key) {\n    case PRICE_EARNINGS_RATIO:\n      return \"P/E\";\n    case PRICE_SALES_RATIO:\n      return \"P/S\";\n    case DIRECT_YIELD:\n      return \"Direktavkastning (%)\";\n    case VOLATILITY:\n      return \"Volatilitet\";\n    case NUMBER_OF_EMPLOYEES:\n      return \"Anställda\";\n    case REVENUE:\n      return \"Omsättning\";\n    case REVENUE_PER_EMPLOYEE:\n      return \"Omsättning / anställd\";\n    case REVENUE_PER_SHARE:\n      return \"Omsättning / aktie\";\n    case OPERATING_MARGIN:\n      return \"Rörelsemarginal (%)\";\n    case TOTAL_ASSETS:\n      return \"Tillgångar\";\n    case TOTAL_EQUITY:\n      return \"Eget kapital\";\n    case TOTAL_DEBT:\n      return \"Skuld\";\n    case EARNINGS_PER_SHARE:\n      return \"EPS\";\n    case PRICE_BOOK_VALUE:\n      return \"P/B\";\n    case SOLIDITY:\n      return \"Soliditet (%)\";\n    case MARKET_CAP:\n      return \"Börsvärde\";\n    case YEAR:\n      return \"År\";\n    case ID:\n      return \"ID\";\n    case EBIT:\n      return \"EBIT\";\n    case NET_EARNINGS:\n      return \"Vinst\";\n    case RETURN_ON_EQUITY:\n      return \"ROE (%)\";\n    case RETURN_ON_CAPITAL_EMPLOYED:\n      return \"ROCE (%)\";\n    case NET_ASSET_VALUE:\n      return \"Substansvärde\";\n    default:\n      return \"\";\n  }\n}\n\nexport function tooltip(key) {\n  switch (key) {\n    case PRICE_EARNINGS_RATIO:\n      return \"Aktiekurs/vinst per aktie\";\n    case PRICE_SALES_RATIO:\n      return \"Aktiekurs/omsättning per aktie\";\n    case DIRECT_YIELD:\n      return \"Direktavkastning (%)\";\n    case VOLATILITY:\n      return \"Volatilitet (%)\";\n    case NUMBER_OF_EMPLOYEES:\n      return \"Antal anställda\";\n    case REVENUE:\n      return \"Omsättning\";\n    case REVENUE_PER_EMPLOYEE:\n      return \"Omsättning / anställd\";\n    case REVENUE_PER_SHARE:\n      return \"Omsättning / aktie\";\n    case OPERATING_MARGIN:\n      return \"Rörelsemarginal (%)\";\n    case TOTAL_ASSETS:\n      return \"Tillgångar\";\n    case TOTAL_EQUITY:\n      return \"Eget kapital\";\n    case TOTAL_DEBT:\n      return \"Skuld\";\n    case EARNINGS_PER_SHARE:\n      return \"Vinst per aktie\";\n    case PRICE_BOOK_VALUE:\n      return \"Aktiekurs/eget kapital per aktie\";\n    case SOLIDITY:\n      return \"Soliditet (%)\";\n    case MARKET_CAP:\n      return \"Börsvärde\";\n    case YEAR:\n      return \"År\";\n    case ID:\n      return \"ID\";\n    case EBIT:\n      return \"Vinst före skatt\";\n    case NET_EARNINGS:\n      return \"Nettoresultat\";\n    case RETURN_ON_EQUITY:\n      return \"Räntabilitet på eget kapital (%)\";\n    case RETURN_ON_CAPITAL_EMPLOYED:\n      return \"Räntabilitet på sysselsatt kapital (%)\";\n    case NET_ASSET_VALUE:\n      return \"Substansvärde (på börsnoterade innehav)\";\n    default:\n      return \"\";\n  }\n}\n","const { YEAR, BILLION, MILLION, THOUSAND } = require(\"../constants\");\n\nexport function formatField(key, value) {\n  if (keyShouldBeFormatted(key)) {\n    return formatNumber(value);\n  }\n  return value;\n}\n\nexport function formatAllFields(inputData) {\n  let stockDetails = { ...inputData };\n\n  Object.keys(stockDetails).forEach(key => {\n    if (keyShouldBeFormatted(key)) {\n      stockDetails[key] = formatNumber(stockDetails[key]);\n    }\n  });\n\n  return stockDetails;\n}\n\nfunction keyShouldBeFormatted(key) {\n  switch (key) {\n    case YEAR:\n      return false;\n    case \"_id\":\n      return false;\n    default:\n      return true;\n  }\n}\n\nfunction formatNumber(number) {\n  if (isNaN(number) || typeof number !== \"number\") {\n    return number;\n  }\n\n  let returnValue = \"\";\n  const negative = number < 0;\n  if (negative) {\n    number = number * -1;\n  }\n\n  if (number >= BILLION) {\n    returnValue = number.toPrecision(3) / BILLION + \" miljarder\";\n  } else if (number >= MILLION) {\n    returnValue = number.toPrecision(3) / MILLION + \" miljoner\";\n  } else if (number >= THOUSAND) {\n    returnValue = numberWithSpaces(number.toFixed(0));\n  } else {\n    returnValue = number.toPrecision(3).replace(\".00e+3\", \" 000\");\n  }\n\n  if (negative) {\n    returnValue = \"-\" + returnValue;\n  }\n\n  return returnValue;\n}\n\nfunction numberWithSpaces(x) {\n  var parts = x.toString().split(\".\");\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\n  return parts.join(\".\");\n}\n","import React from \"react\";\nimport ReactTooltip from \"react-tooltip\";\nimport WarningIcon from \"./icons/WarningIcon\";\nimport {\n  yieldIsGood,\n  yieldIsVeryGood,\n  peIsGood,\n  peIsVeryGood,\n  volatilityIsGood,\n  volatilityIsBad,\n  volatilityIsVeryGood,\n  volatilityIsVeryBad,\n  peIsVeryBad,\n} from \"./stockIndicators\";\nimport { stockIsOwned } from \"../stockUtils\";\nimport { translate, tooltip } from \"../translate\";\nimport {\n  PRICE_EARNINGS_RATIO,\n  DIRECT_YIELD,\n  VOLATILITY,\n  ID,\n  ANNUAL_REPORTS_TABLE,\n  YEAR,\n  MULTIPLE_STOCKS_TABLE,\n  INTERIM_REPORTS_TABLE,\n} from \"../constants\";\nimport { formatField } from \"../api/formatAllFields\";\n\nconst classNames = require(\"classnames\");\n\nfunction StockTable(props) {\n  const { stocks, ownedStocks, sortKey, columnsToShow, type } = props;\n\n  if (sortKey) {\n    stocks.sort((a, b) => {\n      return b[sortKey] - a[sortKey];\n    });\n  }\n\n  return (\n    <>\n      <table>\n        <thead>\n          <tr>\n            <th width=\"40%\">{getMainColumn(type)}</th>\n            {columnsToShow.map((column) => {\n              return (\n                <th width=\"15%\" key={column} data-tip={tooltip(column)}>\n                  {translate(column)}\n                </th>\n              );\n            })}\n          </tr>\n        </thead>\n        <tbody>\n          {stocks.map((stockData) => {\n            const owned = stockIsOwned(stockData.id, ownedStocks);\n            return (\n              <Stock\n                stockData={stockData}\n                key={stockData.id}\n                owned={owned}\n                columnsToShow={columnsToShow}\n                showSingleStock={props.showSingleStock}\n                handleClickReport={props.handleClickReport}\n                type={type}\n              />\n            );\n          })}\n        </tbody>\n      </table>\n      <ReactTooltip />\n    </>\n  );\n}\n\nfunction getMainColumn(tableType) {\n  switch (tableType) {\n    case ANNUAL_REPORTS_TABLE:\n      return translate(YEAR);\n    case INTERIM_REPORTS_TABLE:\n      return \"Period\";\n    default:\n      return \"Aktie\";\n  }\n}\n\nclass Stock extends React.Component {\n  handleClick() {\n    this.props.showSingleStock(\n      this.props.stockData.id,\n      this.props.columnsToShow\n    );\n  }\n\n  handleClickReport(stockdata) {\n    this.props.handleClickReport(stockdata);\n  }\n\n  renderMainColumn() {\n    const { type, stockData, owned } = this.props;\n    switch (type) {\n      case ANNUAL_REPORTS_TABLE:\n        return (\n          <td>\n            <a href=\"#\" onClick={() => this.handleClickReport(stockData)}>\n              {stockData.year}\n            </a>\n          </td>\n        );\n      case INTERIM_REPORTS_TABLE:\n        return (\n          <td>\n            <a href=\"#\" onClick={() => this.handleClickReport(stockData)}>\n              {stockData.year} {stockData.period}\n            </a>\n          </td>\n        );\n      default:\n        return (\n          <td\n            className={classNames({\n              owned: owned,\n            })}\n          >\n            <ReactTooltip />\n            <a href=\"#\" onClick={() => this.handleClick()}>\n              {stockData.name}\n            </a>\n            {stockData.currency === \"SEK\"\n              ? \"\"\n              : \" (\" + stockData.currency + \")\"}\n            {this.shouldShowOldReportWarning(stockData.reportDate) ? (\n              <a\n                data-tip={\n                  \"Avser rapport från \" +\n                  this.formatDate(new Date(stockData.reportDate))\n                }\n              >\n                <WarningIcon width={20} fill=\"#fa2\" />\n              </a>\n            ) : (\n              \"\"\n            )}\n          </td>\n        );\n    }\n  }\n\n  formatDate = (d) =>\n    d.getFullYear() +\n    \"-\" +\n    (\"0\" + (d.getMonth() + 1)).slice(-2) +\n    \"-\" +\n    (\"0\" + d.getDate()).slice(-2) +\n    \" .\";\n\n  shouldShowOldReportWarning(reportDate) {\n    if (!reportDate) {\n      return false;\n    }\n    const currentTime = new Date().getTime();\n    const reportTime = new Date(reportDate).getTime();\n    const threeMonthsInMilliseconds = 7889400000;\n    return currentTime - reportTime > threeMonthsInMilliseconds;\n  }\n\n  renderStockData(column) {\n    const { stockData, type } = this.props;\n    switch (type) {\n      case ANNUAL_REPORTS_TABLE:\n      case INTERIM_REPORTS_TABLE:\n        const value = formatField(column, stockData[column]);\n\n        if (!stockData.changeValues) {\n          return value;\n        }\n        const changeValue = stockData.changeValues[column];\n        if (!changeValue || isNaN(changeValue)) {\n          return value;\n        }\n\n        const sign = stockData.changeValues[column] > 0 ? \"+\" : \"\";\n        return value + \" (\" + sign + stockData.changeValues[column] + \"%)\";\n      default:\n        return formatField(column, stockData[column]);\n    }\n  }\n\n  render() {\n    const { stockData, columnsToShow } = this.props;\n\n    return (\n      <tr key={stockData.id}>\n        {this.renderMainColumn()}\n        {columnsToShow.map((column) => {\n          return (\n            <td\n              width=\"15%\"\n              key={column}\n              className={getClassNames(column, stockData)}\n            >\n              {this.renderStockData(column)}\n            </td>\n          );\n        })}\n      </tr>\n    );\n  }\n}\n\nfunction getClassNames(key, stockData) {\n  switch (key) {\n    case \"priceEarningsRatio\":\n      return classNames({\n        good: peIsGood(stockData),\n        veryGood: peIsVeryGood(stockData),\n        veryBad: peIsVeryBad(stockData),\n      });\n    case \"directYield\":\n      return classNames({\n        good: yieldIsGood(stockData),\n        veryGood: yieldIsVeryGood(stockData),\n      });\n    case \"volatility\":\n      return classNames({\n        good: volatilityIsGood(stockData),\n        veryGood: volatilityIsVeryGood(stockData),\n        bad: volatilityIsBad(stockData),\n        veryBad: volatilityIsVeryBad(stockData),\n      });\n    default:\n      return classNames({});\n  }\n}\n\nStockTable.defaultProps = {\n  type: MULTIPLE_STOCKS_TABLE,\n  columnsToShow: [ID, PRICE_EARNINGS_RATIO, DIRECT_YIELD, VOLATILITY],\n};\n\nexport default StockTable;\n","export function stockIsOwned(stockId, ownedStocks) {\n  let found = false;\n  ownedStocks.forEach(stock => {\n    if (stock.id === stockId) {\n      found = true;\n      return;\n    }\n  });\n  return found;\n}\n","import { BASE_URL } from \"./constants\";\n\nconst rp = require(\"request-promise-native\");\n\nexport function getStocks(category) {\n  return new Promise((resolve, reject) => {\n    rp(`${BASE_URL}/category/${category}`).then(stockData => {\n      let parsedData = JSON.parse(stockData);\n      resolve(parsedData.stocks);\n    });\n  });\n}\n","import { exchangeRates } from \"./constants\";\n\nvar rp = require(\"request-promise-native\");\n\nlet cachedStocks = {};\n\nexport function getStock(id) {\n  if (cachedStocks[id] != null) {\n    return Promise.resolve(cachedStocks[id]);\n  }\n\n  return new Promise((resolve, reject) => {\n    rp(\"https://avanza.se/_mobile/market/stock/\" + id).then(stockData => {\n      let parsedData = JSON.parse(stockData);\n\n      parsedData = transformJson(parsedData);\n      parsedData = convertToSEK(parsedData);\n\n      cachedStocks[parsedData.id] = parsedData;\n      resolve(parsedData);\n    });\n  });\n}\n\nexport function getStockWithAmount(stock) {\n  return new Promise((resolve, reject) => {\n    getStock(stock.id).then(stockData => {\n      resolve({ ...stock, ...stockData });\n    });\n  });\n}\n\n// Convert stock data json into a format that's easier to use\nfunction transformJson(stockData) {\n  // Add more fields from stockData here if necessary\n  return {\n    name: stockData.name,\n    id: stockData.id,\n    directYield: stockData.keyRatios.directYield,\n    priceEarningsRatio: stockData.keyRatios.priceEarningsRatio,\n    volatility: stockData.keyRatios.volatility,\n    currency: stockData.currency,\n    lastPrice: stockData.lastPrice\n  };\n}\n\n// TODO: Get currency exchange rates from some API\nfunction convertToSEK(stockData) {\n  switch (stockData.currency) {\n    case \"SEK\":\n      return stockData;\n    case \"USD\":\n      return {\n        ...stockData,\n        currency: \"SEK\",\n        lastPrice: stockData.lastPrice * exchangeRates.USD\n      };\n    case \"DKK\":\n      return {\n        ...stockData,\n        currency: \"SEK\",\n        lastPrice: stockData.lastPrice * exchangeRates.DKK\n      };\n    default:\n      console.error(\"Missing currency: \" + stockData.currency);\n      return stockData;\n  }\n}\n","const basePortfolioStrategy = {\n  minShare: 20,\n  maxShare: 30,\n  minNumberOfStocks: 8,\n  maxNumberOfStocks: 12,\n  minRatioOfEachShareInPortfolio: 5,\n  maxRatioOfEachShareInPortfolio: 30\n};\n\nconst portfolios = [\n  {\n    id: \"1\",\n    name: \"Basportföljen\",\n    stocks: [\n      // {\n      //   id: \"5465\",\n      //   name: \"Axfood\",\n      //   amount: 10,\n      //   sector: \"Konsumentvaror\"\n      // }\n    ],\n    strategy: {\n      ...basePortfolioStrategy,\n      minShare: 40,\n      maxShare: 60\n    }\n  },\n  {\n    id: \"2\",\n    name: \"Raketportföljen\",\n    stocks: [\n      // {\n      //   id: \"3323\",\n      //   name: \"Apple Inc\",\n      //   amount: 1,\n      //   sector: \"Teknik\"\n      // }\n    ],\n    strategy: basePortfolioStrategy\n  }\n];\n\nexport default portfolios;\n","import { getStockWithAmount } from \"../avanza\";\n// import portfolios from \"../data/portfolioData\";\nimport portfolios from \"./portfolioData\";\nimport { getStockValue } from \"./portfolioUtils\";\n\nexport function getPortfolios() {\n  return new Promise((resolve, reject) => {\n    let promises = [];\n    portfolios.forEach(portfolio => {\n      promises.push(getStocksInPortfolio(portfolio));\n    });\n    Promise.all(promises).then(returnData => {\n      resolve(returnData);\n    });\n  });\n}\n\nfunction getStocksInPortfolio(portfolio) {\n  let returnData = portfolio;\n  return new Promise((resolve, reject) => {\n    let promises = [];\n    portfolio.stocks.forEach(stock => {\n      promises.push(getStockWithAmount(stock));\n    });\n    Promise.all(promises).then(stocks => {\n      returnData.stocks = stocks.sort((a, b) => {\n        return getStockValue(b) - getStockValue(a);\n      });\n      resolve(returnData);\n    });\n  });\n}\n","import { getPortfolios } from \"./dataRetriever\";\n\nexport function getPortfolioValue(portfolioData) {\n  return portfolioData.stocks.reduce((sum, stock) => {\n    return sum + getStockValue(stock);\n  }, 0);\n}\n\nexport function portfolioRatioIsGood(portfolioData, totalPortfolioValue) {\n  const portfolioRatio =\n    (getPortfolioValue(portfolioData) / totalPortfolioValue) * 100;\n  return (\n    portfolioRatio >= portfolioData.strategy.minShare &&\n    portfolioRatio <= portfolioData.strategy.maxShare\n  );\n}\n\nexport function numberOfStocksIsGood(portfolioData) {\n  return (\n    portfolioData.stocks.length >= portfolioData.strategy.minNumberOfStocks &&\n    portfolioData.stocks.length <= portfolioData.strategy.maxNumberOfStocks\n  );\n}\n\nexport function getStockValue(stock) {\n  return stock.amount * stock.lastPrice;\n}\n\nexport function getAllOwnedStocks() {\n  return new Promise((resolve, reject) => {\n    let stocks = [];\n    getPortfolios().then(portfolios => {\n      portfolios.forEach(portfolio => {\n        stocks = stocks.concat(portfolio.stocks);\n      });\n      resolve(stocks);\n    });\n  });\n}\n","import React from \"react\";\nimport ReactTooltip from \"react-tooltip\";\n\nimport StockTable from \"../components/StockTable\";\nimport { getStocks } from \"../dataRetriever\";\n\nimport { getAllOwnedStocks } from \"../Portfolio/portfolioUtils\";\nconst classNames = require(\"classnames\");\n\nclass CategoryPage extends React.Component {\n  state = {\n    stocks: [],\n    ownedStocks: [],\n    error: null,\n    sortKey: \"priceEarningsRatio\",\n  };\n\n  componentDidMount() {\n    getStocks(this.props.category)\n      .then((stocks) => {\n        this.setState({\n          stocks: stocks,\n        });\n      })\n      .catch((err) => {\n        console.error(err);\n        this.setState({\n          error: err.message,\n        });\n      });\n\n    getAllOwnedStocks().then((ownedStocks) => {\n      this.setState({\n        ownedStocks: ownedStocks,\n      });\n    });\n  }\n\n  renderButtons() {\n    return (\n      <>\n        Visa senaste:\n        <button\n          className={classNames({\n            active: true,\n          })}\n        >\n          Helår\n        </button>\n        <button\n          className={classNames({\n            active: false,\n          })}\n          data-tip=\"Kommer snart!\"\n        >\n          Kvartal\n        </button>\n        <ReactTooltip />\n      </>\n    );\n  }\n\n  render() {\n    if (this.state.error != null) {\n      return <p>{this.state.error}</p>;\n    }\n\n    return (\n      <div>\n        <h1>{this.props.title}</h1>\n        {this.renderButtons()}\n        <StockTable\n          stocks={this.state.stocks}\n          ownedStocks={this.state.ownedStocks}\n          sortKey={this.state.sortKey}\n          onSort={(sortKey) => {\n            this.setState({ sortKey: sortKey });\n          }}\n          showSingleStock={this.props.showSingleStock}\n          columnsToShow={this.props.columnsToShow}\n        />\n      </div>\n    );\n  }\n}\n\nexport default CategoryPage;\n","import React from \"react\";\r\nimport CategoryPage from \"../components/CategoryPage\";\r\n\r\nclass BestYield extends React.Component {\r\n  render() {\r\n    return (\r\n      <CategoryPage\r\n        category=\"best-yield\"\r\n        title=\"Intressanta utdelningsaktier\"\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default BestYield;\r\n","import React from \"react\";\r\nimport CategoryPage from \"../components/CategoryPage\";\r\n\r\nclass BlueChip extends React.Component {\r\n  render() {\r\n    return <CategoryPage category=\"blue-chip\" title=\"Intressanta basaktier\" />;\r\n  }\r\n}\r\n\r\nexport default BlueChip;\r\n","import React from \"react\";\r\nimport { getPortfolios } from \"./dataRetriever\";\r\nimport {\r\n  getPortfolioValue,\r\n  portfolioRatioIsGood,\r\n  numberOfStocksIsGood,\r\n  getStockValue\r\n} from \"./portfolioUtils\";\r\nimport { PRICE_EARNINGS_RATIO } from \"../constants\";\r\n\r\nvar classNames = require(\"classnames\");\r\n\r\nclass Portfolio extends React.Component {\r\n  state = {\r\n    portfolios: [],\r\n    error: null\r\n  };\r\n\r\n  // componentDidMount() {\r\n  //   getPortfolios()\r\n  //     .then(portfolios => {\r\n  //       this.setState({\r\n  //         portfolios: portfolios\r\n  //       });\r\n  //     })\r\n  //     .catch(err => {\r\n  //       console.error(err);\r\n  //       this.setState({\r\n  //         error: err.message\r\n  //       });\r\n  //     });\r\n  // }\r\n\r\n  getTotalPortfolioValue() {\r\n    return this.state.portfolios.reduce((sum, portfolio) => {\r\n      return sum + getPortfolioValue(portfolio);\r\n    }, 0);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error != null) {\r\n      return <p>{this.state.error}</p>;\r\n    }\r\n\r\n    const sectors = getSectors(this.state.portfolios);\r\n    let sortedSectors = [];\r\n    Object.keys(sectors).forEach(sector => {\r\n      sortedSectors.push({\r\n        name: sector,\r\n        value: (sectors[sector] / this.getTotalPortfolioValue()) * 100\r\n      });\r\n    });\r\n    sortedSectors = sortedSectors.sort(function(a, b) {\r\n      return a.value < b.value ? 1 : b.value < a.value ? -1 : 0;\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <h1>Alla portföljer</h1>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th width=\"40%\">Portfölj</th>\r\n              <th width=\"30%\">Andel</th>\r\n              <th width=\"30%\">Antal innehav</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.state.portfolios.map(portfolioData => (\r\n              <PortfolioRow\r\n                portfolioData={portfolioData}\r\n                totalPortfolioValue={this.getTotalPortfolioValue()}\r\n                key={portfolioData.id}\r\n              />\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n\r\n        <h2>Branschfördelning</h2>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th width=\"40%\">Bransch</th>\r\n              <th width=\"30%\">Andel</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {sortedSectors.map(sector => (\r\n              <tr>\r\n                <td>{sector.name}</td>\r\n                <td>{sector.value.toFixed(2)}%</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n\r\n        {this.state.portfolios.map(portfolioData => (\r\n          <PortfolioDetails\r\n            portfolioData={portfolioData}\r\n            key={portfolioData.id}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction getSectors(portfolios) {\r\n  let sectors = {};\r\n  portfolios.forEach(portfolioData => {\r\n    portfolioData.stocks.forEach(stock => {\r\n      if (!sectors[stock.sector]) {\r\n        sectors[stock.sector] = 0;\r\n      }\r\n      sectors[stock.sector] += stock.amount * stock.lastPrice;\r\n    });\r\n  });\r\n  return sectors;\r\n}\r\n\r\nfunction PortfolioRow(props) {\r\n  const { portfolioData, totalPortfolioValue } = props;\r\n  const portfolioRatio =\r\n    (getPortfolioValue(portfolioData) / totalPortfolioValue) * 100;\r\n  return (\r\n    <tr key={portfolioData.id}>\r\n      <td>{portfolioData.name}</td>\r\n      <td\r\n        className={classNames({\r\n          good: portfolioRatioIsGood(portfolioData, totalPortfolioValue),\r\n          bad: !portfolioRatioIsGood(portfolioData, totalPortfolioValue)\r\n        })}\r\n      >\r\n        {portfolioRatio.toFixed(2)}%\r\n      </td>\r\n      <td\r\n        className={classNames({\r\n          good: numberOfStocksIsGood(portfolioData),\r\n          bad: !numberOfStocksIsGood(portfolioData)\r\n        })}\r\n      >\r\n        {portfolioData.stocks.length}\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nfunction PortfolioDetails(props) {\r\n  const { portfolioData } = props;\r\n  const {\r\n    minRatioOfEachShareInPortfolio,\r\n    maxRatioOfEachShareInPortfolio\r\n  } = portfolioData.strategy;\r\n\r\n  return (\r\n    <div>\r\n      <h2>{portfolioData.name}</h2>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th width=\"10%\">ID</th>\r\n            <th width=\"30%\">Aktie</th>\r\n            <th width=\"20%\">Andel av portfölj</th>\r\n            <th widrth=\"30%\">Bransch</th>\r\n            <th widrth=\"10%\">P/E</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {portfolioData.stocks.map(stock => (\r\n            <StockRow\r\n              stock={stock}\r\n              portfolioValue={getPortfolioValue(portfolioData)}\r\n              minRatio={minRatioOfEachShareInPortfolio}\r\n              maxRatio={maxRatioOfEachShareInPortfolio}\r\n              key={stock.id}\r\n            />\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction stockRatioIsGood(stockRatio, minRatio, maxRatio) {\r\n  return stockRatio >= minRatio && stockRatio <= maxRatio;\r\n}\r\n\r\nfunction StockRow(props) {\r\n  const { stock, portfolioValue, minRatio, maxRatio } = props;\r\n\r\n  const stockRatio = (getStockValue(stock) / portfolioValue) * 100;\r\n  return (\r\n    <tr key={stock.id}>\r\n      <td>{stock.id}</td>\r\n      <td>{stock.name}</td>\r\n      <td\r\n        className={classNames({\r\n          good: stockRatioIsGood(stockRatio, minRatio, maxRatio),\r\n          bad: !stockRatioIsGood(stockRatio, minRatio, maxRatio)\r\n        })}\r\n      >\r\n        {stockRatio.toFixed(2)}%\r\n      </td>\r\n      <td>{stock.sector}</td>\r\n      <td>{stock[PRICE_EARNINGS_RATIO]}</td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nexport default Portfolio;\r\n","import React from \"react\";\r\nimport StockTable from \"../components/StockTable\";\r\nimport { getStocks } from \"../dataRetriever\";\r\n\r\nimport { getAllOwnedStocks } from \"../Portfolio/portfolioUtils\";\r\nimport {\r\n  OPERATING_MARGIN,\r\n  PRICE_EARNINGS_RATIO,\r\n  PRICE_SALES_RATIO,\r\n  DIRECT_YIELD,\r\n  NUMBER_OF_EMPLOYEES,\r\n  REVENUE,\r\n  REVENUE_PER_EMPLOYEE,\r\n  TOTAL_ASSETS,\r\n  EARNINGS_PER_SHARE,\r\n  PRICE_BOOK_VALUE,\r\n  SOLIDITY,\r\n  MARKET_CAP,\r\n  NET_EARNINGS,\r\n  EBIT\r\n} from \"../constants\";\r\n\r\nclass Weapons extends React.Component {\r\n  state = {\r\n    stocks: [],\r\n    ownedStocks: [],\r\n    error: null,\r\n    sortKey: PRICE_EARNINGS_RATIO,\r\n    columnsToShow: [\r\n      PRICE_EARNINGS_RATIO,\r\n      PRICE_SALES_RATIO,\r\n      DIRECT_YIELD,\r\n      NUMBER_OF_EMPLOYEES,\r\n      REVENUE,\r\n      REVENUE_PER_EMPLOYEE,\r\n      OPERATING_MARGIN,\r\n      TOTAL_ASSETS,\r\n      PRICE_BOOK_VALUE,\r\n      SOLIDITY,\r\n      MARKET_CAP\r\n    ]\r\n  };\r\n\r\n  componentDidMount() {\r\n    getStocks(\"weapons\")\r\n      .then(stocks => {\r\n        this.setState({\r\n          stocks: stocks\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n        this.setState({\r\n          error: err.message\r\n        });\r\n      });\r\n\r\n    getAllOwnedStocks().then(ownedStocks => {\r\n      this.setState({\r\n        ownedStocks: ownedStocks\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error != null) {\r\n      return <p>{this.state.error}</p>;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h1>Vapen</h1>\r\n        <StockTable\r\n          stocks={this.state.stocks}\r\n          ownedStocks={this.state.ownedStocks}\r\n          sortKey={this.state.sortKey}\r\n          onSort={sortKey => {\r\n            this.setState({ sortKey: sortKey });\r\n          }}\r\n          columnsToShow={this.state.columnsToShow}\r\n          showSingleStock={this.props.showSingleStock}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Weapons;\r\n","import { BASE_URL } from \"../constants\";\n\nconst rp = require(\"request-promise-native\");\n\nexport function saveReport(id, data) {\n  return new Promise((resolve, reject) => {\n    rp({\n      method: \"PUT\",\n      uri: `${BASE_URL}/stock/${id}/reports`,\n      body: data,\n      json: true\n    }).then(returnData => {\n      resolve(returnData);\n    });\n  });\n}\n\nexport function getStockData(id) {\n  return new Promise((resolve, reject) => {\n    rp({\n      uri: `${BASE_URL}/stock/${id}`\n    }).then(returnData => {\n      let parsedData = JSON.parse(returnData);\n      resolve(parsedData);\n    });\n  });\n}\n","import React from \"react\";\n\nimport { MILLION, BILLION, THOUSAND } from \"../constants\";\nimport { saveReport } from \"./backend\";\n\nclass ReportInputSection extends React.Component {\n  constructor(props) {\n    super(props);\n\n    if (props.reportData) {\n      this.state = props.reportData;\n    } else {\n      this.state = {\n        currency: \"SEK\",\n        multiplier: \"NONE\",\n        period: \"YEAR\",\n        year: 2020,\n        revenue: 0,\n        earningsBeforeInterestAndTax: 0,\n        netEarnings: 0,\n        totalAssets: 0,\n        totalEquity: 0,\n        totalDebt: 0,\n        numberOfShares: 0,\n        numberOfEmployees: 0,\n        reportDate: \"\",\n      };\n    }\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  multiply(value) {\n    if (!this.state.multiplier || this.state.multiplier === \"\") {\n      return value * 1;\n    }\n    switch (this.state.multiplier) {\n      case \"MILLION\":\n        return value * MILLION;\n      case \"BILLION\":\n        return value * BILLION;\n      case \"THOUSAND\":\n        return value * THOUSAND;\n      case \"NONE\":\n        return value * 1;\n      default:\n        return value * 1;\n    }\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    // Multiply by 1 to ensure its a number, not a string\n    let report = {\n      currency: this.state.currency,\n      year: this.state.year * 1,\n      revenue: this.multiply(this.state.revenue),\n      earningsBeforeInterestAndTax: this.multiply(\n        this.state.earningsBeforeInterestAndTax\n      ),\n      netEarnings: this.multiply(this.state.netEarnings),\n      numberOfShares: this.state.numberOfShares * 1,\n      numberOfEmployees: this.state.numberOfEmployees * 1,\n      reportDate: new Date(this.state.reportDate),\n    };\n\n    if (this.state.period !== \"YEAR\") {\n      report.period = this.state.period;\n    }\n\n    if (this.state.totalAssets !== 0) {\n      report.totalAssets = this.multiply(this.state.totalAssets);\n    }\n    if (this.state.totalEquity !== 0) {\n      report.totalEquity = this.multiply(this.state.totalEquity);\n    }\n    if (this.state.totalDebt !== 0) {\n      report.totalDebt = this.multiply(this.state.totalDebt);\n    }\n\n    saveReport(this.props.id, report).then(() => {\n      this.props.reportSaved();\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>{this.props.stockDetails.name} – Lägg till rapport</h2>\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            År:\n            <input\n              name=\"year\"\n              type=\"number\"\n              value={this.state.year}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <br />\n          <label>\n            Kvartal:\n            <select\n              name=\"period\"\n              value={this.state.period}\n              onChange={this.handleInputChange}\n            >\n              <option value=\"YEAR\">Helår</option>\n              <option value=\"Q1\">Q1</option>\n              <option value=\"Q2\">Q2</option>\n              <option value=\"Q3\">Q3</option>\n              <option value=\"Q4\">Q4</option>\n            </select>\n          </label>\n          <br />\n          <label>\n            Rapportdatum:\n            <input\n              name=\"reportDate\"\n              type=\"string\"\n              value={this.state.reportDate}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <br />\n          <h3>Räkenskaper</h3>\n          <label>\n            Valuta:\n            <select\n              name=\"multiplier\"\n              value={this.state.multiplier}\n              onChange={this.handleInputChange}\n            >\n              <option value=\"NONE\"></option>\n              <option value=\"THOUSAND\">Tusen</option>\n              <option value=\"MILLION\">Miljoner</option>\n              <option value=\"BILLION\">Miljarder</option>\n            </select>\n            <select\n              name=\"currency\"\n              value={this.state.currency}\n              onChange={this.handleInputChange}\n            >\n              <option value=\"SEK\">SEK</option>\n              <option value=\"EUR\">EUR</option>\n              <option value=\"USD\">USD</option>\n              <option value=\"DKK\">DKK</option>\n            </select>\n          </label>\n          <br />\n          <label>\n            Omsättning (revenue):\n            <input\n              name=\"revenue\"\n              type=\"number\"\n              value={this.state.revenue}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <br />\n\n          <label>\n            Rörelseresultat (EBIT):\n            <input\n              name=\"earningsBeforeInterestAndTax\"\n              type=\"number\"\n              value={this.state.earningsBeforeInterestAndTax}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <br />\n\n          <label>\n            Vinst (Net earnings):\n            <input\n              name=\"netEarnings\"\n              type=\"number\"\n              value={this.state.netEarnings}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <br />\n\n          <label>\n            Tillgångar (Total assets):\n            <input\n              name=\"totalAssets\"\n              type=\"number\"\n              value={this.state.totalAssets}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <br />\n\n          <label>\n            Eget kapital (Total equity):\n            <input\n              name=\"totalEquity\"\n              type=\"number\"\n              value={this.state.totalEquity}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <br />\n\n          <label>\n            Skuld (Total debt):\n            <input\n              name=\"totalDebt\"\n              type=\"number\"\n              value={this.state.totalDebt}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <br />\n\n          <h3>Annan info</h3>\n          <label>\n            Antal anställda:\n            <input\n              name=\"numberOfEmployees\"\n              type=\"number\"\n              value={this.state.numberOfEmployees}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <label>\n            Antal aktier:\n            <input\n              name=\"numberOfShares\"\n              type=\"number\"\n              value={this.state.numberOfShares}\n              onChange={this.handleInputChange}\n            />\n          </label>\n\n          <br />\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default ReportInputSection;\n","import React from \"react\";\nimport StockTable from \"../components/StockTable\";\n\nimport {\n  PRICE_EARNINGS_RATIO,\n  ANNUAL_REPORTS_TABLE,\n  INTERIM_REPORTS_TABLE,\n  VOLATILITY,\n  DIRECT_YIELD,\n  MARKET_CAP,\n  PRICE_BOOK_VALUE,\n  PRICE_SALES_RATIO,\n  REVENUE,\n  EBIT,\n  NET_EARNINGS,\n  TOTAL_ASSETS,\n  TOTAL_EQUITY,\n  TOTAL_DEBT,\n  NET_ASSET_VALUE\n} from \"../constants\";\nimport { getStockData } from \"./backend\";\nimport ReportInputSection from \"./ReportInputSection\";\n\nclass SingleStock extends React.Component {\n  state = {\n    stocksDetails: null,\n    error: null,\n    showReportInput: false,\n    reportData: null\n  };\n\n  componentDidMount() {\n    getStockData(this.props.id).then(data => {\n      this.setState({\n        stockDetails: data\n      });\n    });\n  }\n\n  getColumnsToShow() {\n    const inheritedColumns = this.props.columnsToShow.filter(col => {\n      return (\n        col !== PRICE_EARNINGS_RATIO &&\n        col !== VOLATILITY &&\n        col !== DIRECT_YIELD &&\n        col !== MARKET_CAP &&\n        col !== PRICE_BOOK_VALUE &&\n        col !== PRICE_SALES_RATIO &&\n        col !== NET_ASSET_VALUE\n      );\n    });\n    const extraColumns = [\n      REVENUE,\n      EBIT,\n      NET_EARNINGS,\n      TOTAL_ASSETS,\n      TOTAL_EQUITY,\n      TOTAL_DEBT\n    ];\n    return [...new Set([...inheritedColumns, ...extraColumns])];\n  }\n\n  renderAnnualReports() {\n    const { stockDetails } = this.state;\n\n    if (!stockDetails.annualReports) {\n      return <div></div>;\n    }\n    return (\n      <div>\n        <h2>Årsrapporter</h2>\n        <StockTable\n          type={ANNUAL_REPORTS_TABLE}\n          stocks={stockDetails.annualReports}\n          ownedStocks={[]}\n          columnsToShow={this.getColumnsToShow()}\n          handleClickReport={this.handleClickReport.bind(this)}\n        />\n      </div>\n    );\n  }\n\n  renderInterimReports() {\n    const { stockDetails } = this.state;\n\n    if (!stockDetails.interimReports) {\n      return <div></div>;\n    }\n    return (\n      <div>\n        <h2>Kvartalsrapporter</h2>\n        <StockTable\n          type={INTERIM_REPORTS_TABLE}\n          stocks={stockDetails.interimReports}\n          ownedStocks={[]}\n          columnsToShow={this.getColumnsToShow()}\n          handleClickReport={this.handleClickReport.bind(this)}\n        />\n      </div>\n    );\n  }\n\n  handleClickReport(reportData) {\n    this.setState({ showReportInput: true, reportData: reportData });\n  }\n\n  reportSaved() {\n    this.setState({ showReportInput: false, reportData: null });\n  }\n\n  renderInputSection() {\n    if (!this.props.id) {\n      return <div />;\n    }\n    return (\n      <div>\n        <ReportInputSection\n          id={this.props.id}\n          stockDetails={this.state.stockDetails}\n          reportData={this.state.reportData}\n          reportSaved={this.reportSaved.bind(this)}\n        />\n      </div>\n    );\n  }\n\n  renderNewReportButton() {\n    return (\n      <button\n        onClick={() => {\n          this.setState({ showReportInput: true, reportData: null });\n        }}\n      >\n        New Report\n      </button>\n    );\n  }\n\n  render() {\n    if (this.state.error != null) {\n      return <p>{this.state.error}</p>;\n    }\n\n    const { stockDetails, showReportInput } = this.state;\n\n    if (!stockDetails) {\n      return <div />;\n    }\n\n    if (showReportInput) {\n      return this.renderInputSection();\n    }\n\n    return (\n      <div>\n        <h1>{stockDetails.name}</h1>\n\n        {this.renderAnnualReports()}\n        {this.renderInterimReports()}\n        <hr />\n        {this.renderNewReportButton()}\n      </div>\n    );\n  }\n}\n\nexport default SingleStock;\n","import React from \"react\";\r\nimport CategoryPage from \"../components/CategoryPage\";\r\n\r\nclass Industry extends React.Component {\r\n  render() {\r\n    return <CategoryPage category=\"industry\" title=\"Verkstad\" />;\r\n  }\r\n}\r\n\r\nexport default Industry;\r\n","import React from \"react\";\r\nimport {\r\n  PRICE_EARNINGS_RATIO,\r\n  DIRECT_YIELD,\r\n  VOLATILITY,\r\n  PRICE_BOOK_VALUE,\r\n  EARNINGS_PER_SHARE,\r\n  REVENUE_PER_EMPLOYEE,\r\n  REVENUE_PER_SHARE,\r\n  OPERATING_MARGIN,\r\n  SOLIDITY,\r\n  PRICE_SALES_RATIO,\r\n  MARKET_CAP,\r\n  RETURN_ON_EQUITY,\r\n  RETURN_ON_CAPITAL_EMPLOYED,\r\n} from \"../constants\";\r\nimport CategoryPage from \"../components/CategoryPage\";\r\n\r\nclass Forest extends React.Component {\r\n  state = {\r\n    stocks: [],\r\n    ownedStocks: [],\r\n    error: null,\r\n    sortKey: PRICE_EARNINGS_RATIO,\r\n    columnsToShow: [\r\n      PRICE_EARNINGS_RATIO,\r\n      DIRECT_YIELD,\r\n      VOLATILITY,\r\n      PRICE_BOOK_VALUE,\r\n      EARNINGS_PER_SHARE,\r\n      REVENUE_PER_EMPLOYEE,\r\n      REVENUE_PER_SHARE,\r\n      OPERATING_MARGIN,\r\n      SOLIDITY,\r\n      PRICE_SALES_RATIO,\r\n      MARKET_CAP,\r\n      RETURN_ON_EQUITY,\r\n      RETURN_ON_CAPITAL_EMPLOYED,\r\n    ],\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <CategoryPage\r\n        category=\"forest\"\r\n        title=\"Skog\"\r\n        columnsToShow={this.state.columnsToShow}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Forest;\r\n","import React from \"react\";\r\nimport {\r\n  PRICE_EARNINGS_RATIO,\r\n  DIRECT_YIELD,\r\n  TOTAL_ASSETS,\r\n  EARNINGS_PER_SHARE,\r\n  PRICE_BOOK_VALUE,\r\n  SOLIDITY,\r\n  MARKET_CAP,\r\n  NET_EARNINGS,\r\n  EBIT,\r\n  RETURN_ON_EQUITY,\r\n  RETURN_ON_CAPITAL_EMPLOYED,\r\n  NET_ASSET_VALUE,\r\n} from \"../constants\";\r\nimport CategoryPage from \"../components/CategoryPage\";\r\n\r\nclass Investment extends React.Component {\r\n  state = {\r\n    stocks: [],\r\n    ownedStocks: [],\r\n    error: null,\r\n    sortKey: \"priceEarningsRatio\",\r\n    columnsToShow: [\r\n      PRICE_EARNINGS_RATIO,\r\n      DIRECT_YIELD,\r\n      NET_EARNINGS,\r\n      EBIT,\r\n      EARNINGS_PER_SHARE,\r\n      TOTAL_ASSETS,\r\n      PRICE_BOOK_VALUE,\r\n      SOLIDITY,\r\n      RETURN_ON_EQUITY,\r\n      RETURN_ON_CAPITAL_EMPLOYED,\r\n      MARKET_CAP,\r\n      NET_ASSET_VALUE,\r\n    ],\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <CategoryPage\r\n        category=\"invest\"\r\n        title=\"Investmentbolag\"\r\n        columnsToShow={this.state.columnsToShow}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Investment;\r\n","import React from \"react\";\r\n\r\nimport CategoryPage from \"../components/CategoryPage\";\r\n\r\nclass RealEstate extends React.Component {\r\n  render() {\r\n    return <CategoryPage category=\"realEstate\" title=\"Fastighetsbolag\" />;\r\n  }\r\n}\r\n\r\nexport default RealEstate;\r\n","import React from \"react\";\nimport {\n  PRICE_EARNINGS_RATIO,\n  DIRECT_YIELD,\n  VOLATILITY,\n  PRICE_BOOK_VALUE,\n  EARNINGS_PER_SHARE,\n  REVENUE_PER_EMPLOYEE,\n  REVENUE_PER_SHARE,\n  OPERATING_MARGIN,\n  SOLIDITY,\n  PRICE_SALES_RATIO,\n  MARKET_CAP,\n  RETURN_ON_EQUITY,\n} from \"../constants\";\nimport CategoryPage from \"../components/CategoryPage\";\n\nclass Bank extends React.Component {\n  state = {\n    stocks: [],\n    ownedStocks: [],\n    error: null,\n    sortKey: PRICE_EARNINGS_RATIO,\n    columnsToShow: [\n      PRICE_EARNINGS_RATIO,\n      DIRECT_YIELD,\n      VOLATILITY,\n      PRICE_BOOK_VALUE,\n      EARNINGS_PER_SHARE,\n      REVENUE_PER_EMPLOYEE,\n      REVENUE_PER_SHARE,\n      OPERATING_MARGIN,\n      SOLIDITY,\n      PRICE_SALES_RATIO,\n      MARKET_CAP,\n      RETURN_ON_EQUITY,\n    ],\n  };\n\n  render() {\n    return (\n      <CategoryPage\n        category=\"bank\"\n        title=\"Bank\"\n        columnsToShow={this.state.columnsToShow}\n      />\n    );\n  }\n}\n\nexport default Bank;\n","import React from \"react\";\nimport \"./App.css\";\nimport BestYield from \"../BestYield/BestYield\";\nimport BlueChip from \"../BlueChip/BlueChip\";\nimport Portfolio from \"../Portfolio/Portfolio\";\nimport Weapons from \"../Weapons/Weapons\";\nimport SingleStock from \"../SingleStock/SingleStock\";\nimport Industry from \"../Industry/Industry\";\nimport Forest from \"../Forest/Forest\";\nimport Invest from \"../Invest/Invest\";\nimport RealEstate from \"../RealEstate/RealEstate\";\nimport Bank from \"../Bank/Bank\";\n\nconst portfolioPage = \"PORTFOLIO_PAGE\";\nconst bestYieldPage = \"BEST_YIELD_PAGE\";\nconst blueChipPage = \"BLUE_CHIP_PAGE\";\nconst weaponsPage = \"WEAPONS_PAGE\";\nconst industryPage = \"INDUSTRY_PAGE\";\nconst forestPage = \"FOREST_PAGE\";\nconst investPage = \"INVEST_PAGE\";\nconst realEstatePage = \"REAL_ESTATE_PAGE\";\nconst bankPage = \"BANK_PAGE\";\n\nconst classNames = require(\"classnames\");\n\nclass App extends React.Component {\n  state = {\n    activePage: bestYieldPage,\n    activeStock: null,\n    columnsToShow: [],\n  };\n\n  renderActivePage() {\n    if (this.state.activeStock) {\n      return (\n        <SingleStock\n          id={this.state.activeStock}\n          columnsToShow={this.state.columnsToShow}\n        />\n      );\n    }\n\n    switch (this.state.activePage) {\n      case portfolioPage:\n        return <Portfolio showSingleStock={this.showSingleStock.bind(this)} />;\n      case bestYieldPage:\n        return <BestYield showSingleStock={this.showSingleStock.bind(this)} />;\n      case blueChipPage:\n        return <BlueChip showSingleStock={this.showSingleStock.bind(this)} />;\n      case weaponsPage:\n        return <Weapons showSingleStock={this.showSingleStock.bind(this)} />;\n      case industryPage:\n        return <Industry showSingleStock={this.showSingleStock.bind(this)} />;\n      case forestPage:\n        return <Forest showSingleStock={this.showSingleStock.bind(this)} />;\n      case investPage:\n        return <Invest showSingleStock={this.showSingleStock.bind(this)} />;\n      case realEstatePage:\n        return <RealEstate showSingleStock={this.showSingleStock.bind(this)} />;\n      case bankPage:\n        return <Bank showSingleStock={this.showSingleStock.bind(this)} />;\n      default:\n        return <div></div>;\n    }\n  }\n\n  renderButton(title, page) {\n    return (\n      <button\n        onClick={() => {\n          this.setState({ activePage: page, activeStock: null });\n        }}\n        className={classNames({\n          active: this.state.activePage === page,\n        })}\n      >\n        {title}\n      </button>\n    );\n  }\n\n  showSingleStock(id, columnsToShow) {\n    this.setState({ activeStock: id, columnsToShow: columnsToShow });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>BisseNisse</h1>\n        {/* {this.renderButton(\"Portfolio\", portfolioPage)} */}\n        {this.renderButton(\"Utdelningsaktier\", bestYieldPage)}\n        {this.renderButton(\"Basaktier\", blueChipPage)}\n        {this.renderButton(\"Verkstad\", industryPage)}\n        {this.renderButton(\"Skog\", forestPage)}\n        {this.renderButton(\"Investment\", investPage)}\n        {this.renderButton(\"Fastigheter\", realEstatePage)}\n        {/* {this.renderButton(\"Vapen\", weaponsPage)} */}\n        {this.renderButton(\"Bank\", bankPage)}\n        {this.renderActivePage()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}