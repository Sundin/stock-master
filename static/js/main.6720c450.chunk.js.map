{"version":3,"sources":["constants.js","avanza.js","Portfolio/portfolioData.js","Portfolio/portfolioUtils.js","Portfolio/dataRetriever.js","Portfolio/Portfolio.js","components/icons/WarningIcon.js","components/stockIndicators.js","translate.js","api/formatAllFields.js","components/StockTable.js","stockUtils.js","SingleStock/backend.js","SingleStock/ReportInputSection.js","SingleStock/SingleStock.js","dataRetriever.js","components/CategoryPage.js","Forest/Forest.js","Invest/Invest.js","Bank/Bank.js","App/App.js","serviceWorker.js","index.js"],"names":["exchangeRates","DKK","USD","BASE_URL","BILLION","MILLION","THOUSAND","OPERATING_MARGIN","PRICE_EARNINGS_RATIO","PRICE_SALES_RATIO","PRICE_BOOK_VALUE","DIRECT_YIELD","VOLATILITY","NUMBER_OF_EMPLOYEES","REVENUE","REVENUE_PER_EMPLOYEE","REVENUE_PER_SHARE","TOTAL_ASSETS","EARNINGS_PER_SHARE","NET_EARNINGS","NUMBER_OF_SHARES","TOTAL_EQUITY","TOTAL_DEBT","SOLIDITY","MARKET_CAP","YEAR","ID","LAST_PRICE","CURRENCY","EBIT","CHANGE_VALUES","OLLE","RETURN_ON_EQUITY","RETURN_ON_CAPITAL_EMPLOYED","NET_ASSET_VALUE","ANNUAL_REPORTS_TABLE","INTERIM_REPORTS_TABLE","MULTIPLE_STOCKS_TABLE","rp","require","cachedStocks","getStock","id","Promise","resolve","reject","then","stockData","parsedData","JSON","parse","currency","lastPrice","console","error","convertToSEK","name","directYield","keyRatios","priceEarningsRatio","volatility","transformJson","basePortfolioStrategy","minShare","maxShare","minNumberOfStocks","maxNumberOfStocks","minRatioOfEachShareInPortfolio","maxRatioOfEachShareInPortfolio","portfolios","stocks","strategy","getPortfolioValue","portfolioData","reduce","sum","stock","getStockValue","portfolioRatioIsGood","totalPortfolioValue","portfolioRatio","numberOfStocksIsGood","length","amount","getAllOwnedStocks","promises","forEach","portfolio","push","returnData","getStockWithAmount","all","sort","a","b","getStocksInPortfolio","concat","classNames","PortfolioRow","props","key","className","good","bad","toFixed","PortfolioDetails","width","widrth","map","StockRow","portfolioValue","minRatio","maxRatio","stockRatioIsGood","stockRatio","sector","Portfolio","state","this","sectors","getSectors","sortedSectors","Object","keys","value","getTotalPortfolioValue","React","Component","SVG","style","fill","viewBox","height","xmlns","xmlnsXlink","d","yieldIsGood","getYieldTarget","yieldIsVeryGood","peIsGood","peIsVeryGood","peIsVeryBad","tenYearsBondInterest","volatilityIsGood","volatilityIsVeryGood","averageOMXS30volatility","volatilityIsBad","volatilityIsVeryBad","translate","tooltip","formatField","keyShouldBeFormatted","formatNumber","number","isNaN","returnValue","negative","toPrecision","x","parts","toString","split","replace","join","numberWithSpaces","StockTable","ownedStocks","sortKey","columnsToShow","type","reportType","tableType","getMainColumn","column","data-tip","owned","stockId","found","stockIsOwned","latestInterimReport","latestAnnualReport","showSingleStock","handleClickReport","Stock","formatDate","getFullYear","getMonth","slice","getDate","stockdata","href","onClick","year","period","handleClick","shouldShowOldReportWarning","reportDate","Date","WarningIcon","getTime","changeValues","changeValue","renderMainColumn","getClassNames","renderStockData","veryGood","veryBad","defaultProps","ReportInputSection","reportData","multiplier","revenue","earningsBeforeInterestAndTax","netEarnings","totalAssets","totalEquity","totalDebt","numberOfShares","numberOfEmployees","handleInputChange","bind","handleSubmit","event","target","checked","setState","preventDefault","data","report","multiply","method","uri","body","json","reportSaved","stockDetails","onSubmit","onChange","SingleStock","stocksDetails","showReportInput","inheritedColumns","filter","col","extraColumns","Set","annualReports","getColumnsToShow","interimReports","renderInputSection","renderAnnualReports","renderInterimReports","renderNewReportButton","CategoryPage","category","catch","err","message","setReportType","active","title","renderButtons","onSort","Forest","Investment","Bank","App","activePage","activeStock","passOnProps","Invest","page","renderButton","renderActivePage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6720c450.chunk.js","sourcesContent":["export const exchangeRates = {\n  DKK: 1.41,\n  USD: 9.42,\n};\n\nexport const BASE_URL = \"https://bissenisse.duckdns.org:443\";\n// export const BASE_URL = \"http://localhost:8080\";\n\nexport const BILLION = 1000000000;\nexport const MILLION = 1000000;\nexport const THOUSAND = 1000;\n\nexport const OPERATING_MARGIN = \"operatingMargin\";\nexport const PRICE_EARNINGS_RATIO = \"priceEarningsRatio\";\nexport const PRICE_SALES_RATIO = \"priceSalesRatio\";\nexport const PRICE_BOOK_VALUE = \"priceBookValue\";\nexport const DIRECT_YIELD = \"directYield\";\nexport const VOLATILITY = \"volatility\";\nexport const NUMBER_OF_EMPLOYEES = \"numberOfEmployees\";\nexport const REVENUE = \"revenue\"; // = sales\nexport const REVENUE_PER_EMPLOYEE = \"revenuePerEmployee\";\nexport const REVENUE_PER_SHARE = \"revenuePerShare\";\nexport const TOTAL_ASSETS = \"totalAssets\";\nexport const EARNINGS_PER_SHARE = \"earningsPerShare\";\nexport const NET_EARNINGS = \"netEarnings\";\nexport const NUMBER_OF_SHARES = \"numberOfShares\";\nexport const TOTAL_EQUITY = \"totalEquity\"; // = eget kapital\nexport const TOTAL_DEBT = \"totalDebt\";\nexport const SOLIDITY = \"solidity\";\nexport const MARKET_CAP = \"marketCap\";\nexport const YEAR = \"year\";\nexport const ID = \"id\";\nexport const LAST_PRICE = \"lastPrice\";\nexport const CURRENCY = \"currency\";\nexport const EBIT = \"earningsBeforeInterestAndTax\";\nexport const CHANGE_VALUES = \"changeValues\";\nexport const OLLE = \"OLLE\";\nexport const RETURN_ON_EQUITY = \"returnOnEquity\";\nexport const RETURN_ON_CAPITAL_EMPLOYED = \"returnOnCapitalEmployed\";\nexport const NET_ASSET_VALUE = \"netAssetValue\";\n\nexport const ANNUAL_REPORTS_TABLE = \"annualReportsTable\";\nexport const INTERIM_REPORTS_TABLE = \"interimReportsTable\";\nexport const MULTIPLE_STOCKS_TABLE = \"multipleStocksTable\";\n","import { exchangeRates } from \"./constants\";\n\nvar rp = require(\"request-promise-native\");\n\nlet cachedStocks = {};\n\nexport function getStock(id) {\n  if (cachedStocks[id] != null) {\n    return Promise.resolve(cachedStocks[id]);\n  }\n\n  return new Promise((resolve, reject) => {\n    rp(\"https://avanza.se/_mobile/market/stock/\" + id).then(stockData => {\n      let parsedData = JSON.parse(stockData);\n\n      parsedData = transformJson(parsedData);\n      parsedData = convertToSEK(parsedData);\n\n      cachedStocks[parsedData.id] = parsedData;\n      resolve(parsedData);\n    });\n  });\n}\n\nexport function getStockWithAmount(stock) {\n  return new Promise((resolve, reject) => {\n    getStock(stock.id).then(stockData => {\n      resolve({ ...stock, ...stockData });\n    });\n  });\n}\n\n// Convert stock data json into a format that's easier to use\nfunction transformJson(stockData) {\n  // Add more fields from stockData here if necessary\n  return {\n    name: stockData.name,\n    id: stockData.id,\n    directYield: stockData.keyRatios.directYield,\n    priceEarningsRatio: stockData.keyRatios.priceEarningsRatio,\n    volatility: stockData.keyRatios.volatility,\n    currency: stockData.currency,\n    lastPrice: stockData.lastPrice\n  };\n}\n\n// TODO: Get currency exchange rates from some API\nfunction convertToSEK(stockData) {\n  switch (stockData.currency) {\n    case \"SEK\":\n      return stockData;\n    case \"USD\":\n      return {\n        ...stockData,\n        currency: \"SEK\",\n        lastPrice: stockData.lastPrice * exchangeRates.USD\n      };\n    case \"DKK\":\n      return {\n        ...stockData,\n        currency: \"SEK\",\n        lastPrice: stockData.lastPrice * exchangeRates.DKK\n      };\n    default:\n      console.error(\"Missing currency: \" + stockData.currency);\n      return stockData;\n  }\n}\n","const basePortfolioStrategy = {\n  minShare: 20,\n  maxShare: 30,\n  minNumberOfStocks: 8,\n  maxNumberOfStocks: 12,\n  minRatioOfEachShareInPortfolio: 5,\n  maxRatioOfEachShareInPortfolio: 30\n};\n\nconst portfolios = [\n  {\n    id: \"1\",\n    name: \"Basportföljen\",\n    stocks: [\n      // {\n      //   id: \"5465\",\n      //   name: \"Axfood\",\n      //   amount: 10,\n      //   sector: \"Konsumentvaror\"\n      // }\n    ],\n    strategy: {\n      ...basePortfolioStrategy,\n      minShare: 40,\n      maxShare: 60\n    }\n  },\n  {\n    id: \"2\",\n    name: \"Raketportföljen\",\n    stocks: [\n      // {\n      //   id: \"3323\",\n      //   name: \"Apple Inc\",\n      //   amount: 1,\n      //   sector: \"Teknik\"\n      // }\n    ],\n    strategy: basePortfolioStrategy\n  }\n];\n\nexport default portfolios;\n","import { getPortfolios } from \"./dataRetriever\";\n\nexport function getPortfolioValue(portfolioData) {\n  return portfolioData.stocks.reduce((sum, stock) => {\n    return sum + getStockValue(stock);\n  }, 0);\n}\n\nexport function portfolioRatioIsGood(portfolioData, totalPortfolioValue) {\n  const portfolioRatio =\n    (getPortfolioValue(portfolioData) / totalPortfolioValue) * 100;\n  return (\n    portfolioRatio >= portfolioData.strategy.minShare &&\n    portfolioRatio <= portfolioData.strategy.maxShare\n  );\n}\n\nexport function numberOfStocksIsGood(portfolioData) {\n  return (\n    portfolioData.stocks.length >= portfolioData.strategy.minNumberOfStocks &&\n    portfolioData.stocks.length <= portfolioData.strategy.maxNumberOfStocks\n  );\n}\n\nexport function getStockValue(stock) {\n  return stock.amount * stock.lastPrice;\n}\n\nexport function getAllOwnedStocks() {\n  return new Promise((resolve, reject) => {\n    let stocks = [];\n    getPortfolios().then(portfolios => {\n      portfolios.forEach(portfolio => {\n        stocks = stocks.concat(portfolio.stocks);\n      });\n      resolve(stocks);\n    });\n  });\n}\n","import { getStockWithAmount } from \"../avanza\";\n// import portfolios from \"../data/portfolioData\";\nimport portfolios from \"./portfolioData\";\nimport { getStockValue } from \"./portfolioUtils\";\n\nexport function getPortfolios() {\n  return new Promise((resolve, reject) => {\n    let promises = [];\n    portfolios.forEach(portfolio => {\n      promises.push(getStocksInPortfolio(portfolio));\n    });\n    Promise.all(promises).then(returnData => {\n      resolve(returnData);\n    });\n  });\n}\n\nfunction getStocksInPortfolio(portfolio) {\n  let returnData = portfolio;\n  return new Promise((resolve, reject) => {\n    let promises = [];\n    portfolio.stocks.forEach(stock => {\n      promises.push(getStockWithAmount(stock));\n    });\n    Promise.all(promises).then(stocks => {\n      returnData.stocks = stocks.sort((a, b) => {\n        return getStockValue(b) - getStockValue(a);\n      });\n      resolve(returnData);\n    });\n  });\n}\n","import React from \"react\";\r\nimport { getPortfolios } from \"./dataRetriever\";\r\nimport {\r\n  getPortfolioValue,\r\n  portfolioRatioIsGood,\r\n  numberOfStocksIsGood,\r\n  getStockValue\r\n} from \"./portfolioUtils\";\r\nimport { PRICE_EARNINGS_RATIO } from \"../constants\";\r\n\r\nvar classNames = require(\"classnames\");\r\n\r\nclass Portfolio extends React.Component {\r\n  state = {\r\n    portfolios: [],\r\n    error: null\r\n  };\r\n\r\n  // componentDidMount() {\r\n  //   getPortfolios()\r\n  //     .then(portfolios => {\r\n  //       this.setState({\r\n  //         portfolios: portfolios\r\n  //       });\r\n  //     })\r\n  //     .catch(err => {\r\n  //       console.error(err);\r\n  //       this.setState({\r\n  //         error: err.message\r\n  //       });\r\n  //     });\r\n  // }\r\n\r\n  getTotalPortfolioValue() {\r\n    return this.state.portfolios.reduce((sum, portfolio) => {\r\n      return sum + getPortfolioValue(portfolio);\r\n    }, 0);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error != null) {\r\n      return <p>{this.state.error}</p>;\r\n    }\r\n\r\n    const sectors = getSectors(this.state.portfolios);\r\n    let sortedSectors = [];\r\n    Object.keys(sectors).forEach(sector => {\r\n      sortedSectors.push({\r\n        name: sector,\r\n        value: (sectors[sector] / this.getTotalPortfolioValue()) * 100\r\n      });\r\n    });\r\n    sortedSectors = sortedSectors.sort(function(a, b) {\r\n      return a.value < b.value ? 1 : b.value < a.value ? -1 : 0;\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <h1>Alla portföljer</h1>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th width=\"40%\">Portfölj</th>\r\n              <th width=\"30%\">Andel</th>\r\n              <th width=\"30%\">Antal innehav</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.state.portfolios.map(portfolioData => (\r\n              <PortfolioRow\r\n                portfolioData={portfolioData}\r\n                totalPortfolioValue={this.getTotalPortfolioValue()}\r\n                key={portfolioData.id}\r\n              />\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n\r\n        <h2>Branschfördelning</h2>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th width=\"40%\">Bransch</th>\r\n              <th width=\"30%\">Andel</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {sortedSectors.map(sector => (\r\n              <tr>\r\n                <td>{sector.name}</td>\r\n                <td>{sector.value.toFixed(2)}%</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n\r\n        {this.state.portfolios.map(portfolioData => (\r\n          <PortfolioDetails\r\n            portfolioData={portfolioData}\r\n            key={portfolioData.id}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction getSectors(portfolios) {\r\n  let sectors = {};\r\n  portfolios.forEach(portfolioData => {\r\n    portfolioData.stocks.forEach(stock => {\r\n      if (!sectors[stock.sector]) {\r\n        sectors[stock.sector] = 0;\r\n      }\r\n      sectors[stock.sector] += stock.amount * stock.lastPrice;\r\n    });\r\n  });\r\n  return sectors;\r\n}\r\n\r\nfunction PortfolioRow(props) {\r\n  const { portfolioData, totalPortfolioValue } = props;\r\n  const portfolioRatio =\r\n    (getPortfolioValue(portfolioData) / totalPortfolioValue) * 100;\r\n  return (\r\n    <tr key={portfolioData.id}>\r\n      <td>{portfolioData.name}</td>\r\n      <td\r\n        className={classNames({\r\n          good: portfolioRatioIsGood(portfolioData, totalPortfolioValue),\r\n          bad: !portfolioRatioIsGood(portfolioData, totalPortfolioValue)\r\n        })}\r\n      >\r\n        {portfolioRatio.toFixed(2)}%\r\n      </td>\r\n      <td\r\n        className={classNames({\r\n          good: numberOfStocksIsGood(portfolioData),\r\n          bad: !numberOfStocksIsGood(portfolioData)\r\n        })}\r\n      >\r\n        {portfolioData.stocks.length}\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nfunction PortfolioDetails(props) {\r\n  const { portfolioData } = props;\r\n  const {\r\n    minRatioOfEachShareInPortfolio,\r\n    maxRatioOfEachShareInPortfolio\r\n  } = portfolioData.strategy;\r\n\r\n  return (\r\n    <div>\r\n      <h2>{portfolioData.name}</h2>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th width=\"10%\">ID</th>\r\n            <th width=\"30%\">Aktie</th>\r\n            <th width=\"20%\">Andel av portfölj</th>\r\n            <th widrth=\"30%\">Bransch</th>\r\n            <th widrth=\"10%\">P/E</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {portfolioData.stocks.map(stock => (\r\n            <StockRow\r\n              stock={stock}\r\n              portfolioValue={getPortfolioValue(portfolioData)}\r\n              minRatio={minRatioOfEachShareInPortfolio}\r\n              maxRatio={maxRatioOfEachShareInPortfolio}\r\n              key={stock.id}\r\n            />\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction stockRatioIsGood(stockRatio, minRatio, maxRatio) {\r\n  return stockRatio >= minRatio && stockRatio <= maxRatio;\r\n}\r\n\r\nfunction StockRow(props) {\r\n  const { stock, portfolioValue, minRatio, maxRatio } = props;\r\n\r\n  const stockRatio = (getStockValue(stock) / portfolioValue) * 100;\r\n  return (\r\n    <tr key={stock.id}>\r\n      <td>{stock.id}</td>\r\n      <td>{stock.name}</td>\r\n      <td\r\n        className={classNames({\r\n          good: stockRatioIsGood(stockRatio, minRatio, maxRatio),\r\n          bad: !stockRatioIsGood(stockRatio, minRatio, maxRatio)\r\n        })}\r\n      >\r\n        {stockRatio.toFixed(2)}%\r\n      </td>\r\n      <td>{stock.sector}</td>\r\n      <td>{stock[PRICE_EARNINGS_RATIO]}</td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nexport default Portfolio;\r\n","import React from \"react\";\n// https://blog.lftechnology.com/using-svg-icons-components-in-react-44fbe8e5f91\n\nconst SVG = ({\n  style = {},\n  fill = \"#000\",\n  width = \"100%\",\n  className = \"\",\n  viewBox = \"0 0 576 512\",\n}) => (\n  <svg\n    width={width}\n    style={style}\n    height={width}\n    viewBox={viewBox}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    className={`svg-icon ${className || \"\"}`}\n    xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n  >\n    <path\n      fill={fill}\n      d=\"M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z\"\n    />\n  </svg>\n);\n\nexport default SVG;\n","export function yieldIsGood(stockData) {\r\n  const { directYield } = stockData;\r\n\r\n  return directYield > getYieldTarget();\r\n}\r\n\r\nexport function yieldIsVeryGood(stockData) {\r\n  const { directYield } = stockData;\r\n  return directYield > getYieldTarget() * 1.25;\r\n}\r\n\r\nexport function peIsGood(stockData) {\r\n  const { priceEarningsRatio, directYield } = stockData;\r\n\r\n  if (priceEarningsRatio <= 0) {\r\n    return false;\r\n  }\r\n\r\n  return 1 / (directYield / 100) >= priceEarningsRatio;\r\n}\r\n\r\nexport function peIsVeryGood(stockData) {\r\n  const { priceEarningsRatio, directYield } = stockData;\r\n  return (\r\n    peIsGood(stockData) && 1 / (directYield / 100) >= priceEarningsRatio * 2\r\n  );\r\n}\r\n\r\nexport function peIsVeryBad(stockData) {\r\n  const { priceEarningsRatio } = stockData;\r\n  return priceEarningsRatio <= 0;\r\n}\r\n\r\nfunction getYieldTarget() {\r\n  // TODO: get tenYearsBondInterest from some API?\r\n  const tenYearsBondInterest = -0.2;\r\n  const riskPremium = 5;\r\n  return tenYearsBondInterest + riskPremium;\r\n}\r\n\r\nconst averageOMXS30volatility = 21.6;\r\n\r\nexport function volatilityIsGood(stockData) {\r\n  const { volatility } = stockData;\r\n  return volatility <= averageOMXS30volatility * 0.75;\r\n}\r\n\r\nexport function volatilityIsVeryGood(stockData) {\r\n  const { volatility } = stockData;\r\n  return volatility <= averageOMXS30volatility * 0.5;\r\n}\r\n\r\nexport function volatilityIsBad(stockData) {\r\n  const { volatility } = stockData;\r\n  return volatility > averageOMXS30volatility * 1.25;\r\n}\r\n\r\nexport function volatilityIsVeryBad(stockData) {\r\n  const { volatility } = stockData;\r\n  return volatility > averageOMXS30volatility * 1.9;\r\n}\r\n","import {\n  OPERATING_MARGIN,\n  REVENUE_PER_SHARE,\n  REVENUE_PER_EMPLOYEE,\n  REVENUE,\n  NUMBER_OF_EMPLOYEES,\n  VOLATILITY,\n  DIRECT_YIELD,\n  PRICE_SALES_RATIO,\n  PRICE_EARNINGS_RATIO,\n  TOTAL_ASSETS,\n  EARNINGS_PER_SHARE,\n  PRICE_BOOK_VALUE,\n  SOLIDITY,\n  MARKET_CAP,\n  YEAR,\n  ID,\n  EBIT,\n  NET_EARNINGS,\n  RETURN_ON_EQUITY,\n  RETURN_ON_CAPITAL_EMPLOYED,\n  TOTAL_EQUITY,\n  TOTAL_DEBT,\n  NET_ASSET_VALUE,\n} from \"./constants\";\n\nexport function translate(key) {\n  switch (key) {\n    case PRICE_EARNINGS_RATIO:\n      return \"P/E\";\n    case PRICE_SALES_RATIO:\n      return \"P/S\";\n    case DIRECT_YIELD:\n      return \"Direktavkastning (%)\";\n    case VOLATILITY:\n      return \"Volatilitet\";\n    case NUMBER_OF_EMPLOYEES:\n      return \"Anställda\";\n    case REVENUE:\n      return \"Omsättning\";\n    case REVENUE_PER_EMPLOYEE:\n      return \"Omsättning / anställd\";\n    case REVENUE_PER_SHARE:\n      return \"Omsättning / aktie\";\n    case OPERATING_MARGIN:\n      return \"Rörelsemarginal (%)\";\n    case TOTAL_ASSETS:\n      return \"Tillgångar\";\n    case TOTAL_EQUITY:\n      return \"Eget kapital\";\n    case TOTAL_DEBT:\n      return \"Skuld\";\n    case EARNINGS_PER_SHARE:\n      return \"EPS\";\n    case PRICE_BOOK_VALUE:\n      return \"P/B\";\n    case SOLIDITY:\n      return \"Soliditet (%)\";\n    case MARKET_CAP:\n      return \"Börsvärde\";\n    case YEAR:\n      return \"År\";\n    case ID:\n      return \"ID\";\n    case EBIT:\n      return \"EBIT\";\n    case NET_EARNINGS:\n      return \"Vinst\";\n    case RETURN_ON_EQUITY:\n      return \"ROE (%)\";\n    case RETURN_ON_CAPITAL_EMPLOYED:\n      return \"ROCE (%)\";\n    case NET_ASSET_VALUE:\n      return \"Substansvärde\";\n    default:\n      return \"\";\n  }\n}\n\nexport function tooltip(key) {\n  switch (key) {\n    case PRICE_EARNINGS_RATIO:\n      return \"Aktiekurs/vinst per aktie\";\n    case PRICE_SALES_RATIO:\n      return \"Aktiekurs/omsättning per aktie\";\n    case DIRECT_YIELD:\n      return \"Direktavkastning (%)\";\n    case VOLATILITY:\n      return \"Volatilitet (%)\";\n    case NUMBER_OF_EMPLOYEES:\n      return \"Antal anställda\";\n    case REVENUE:\n      return \"Omsättning\";\n    case REVENUE_PER_EMPLOYEE:\n      return \"Omsättning / anställd\";\n    case REVENUE_PER_SHARE:\n      return \"Omsättning / aktie\";\n    case OPERATING_MARGIN:\n      return \"Rörelsemarginal (%)\";\n    case TOTAL_ASSETS:\n      return \"Tillgångar\";\n    case TOTAL_EQUITY:\n      return \"Eget kapital\";\n    case TOTAL_DEBT:\n      return \"Skuld\";\n    case EARNINGS_PER_SHARE:\n      return \"Vinst per aktie\";\n    case PRICE_BOOK_VALUE:\n      return \"Aktiekurs/eget kapital per aktie\";\n    case SOLIDITY:\n      return \"Soliditet (%)\";\n    case MARKET_CAP:\n      return \"Börsvärde\";\n    case YEAR:\n      return \"År\";\n    case ID:\n      return \"ID\";\n    case EBIT:\n      return \"Vinst före skatt\";\n    case NET_EARNINGS:\n      return \"Nettoresultat\";\n    case RETURN_ON_EQUITY:\n      return \"Räntabilitet på eget kapital (%)\";\n    case RETURN_ON_CAPITAL_EMPLOYED:\n      return \"Räntabilitet på sysselsatt kapital (%)\";\n    case NET_ASSET_VALUE:\n      return \"Substansvärde (på börsnoterade innehav)\";\n    default:\n      return \"\";\n  }\n}\n","const { YEAR, BILLION, MILLION, THOUSAND } = require(\"../constants\");\n\nexport function formatField(key, value) {\n  if (keyShouldBeFormatted(key)) {\n    return formatNumber(value);\n  }\n  return value;\n}\n\nexport function formatAllFields(inputData) {\n  let stockDetails = { ...inputData };\n\n  Object.keys(stockDetails).forEach(key => {\n    if (keyShouldBeFormatted(key)) {\n      stockDetails[key] = formatNumber(stockDetails[key]);\n    }\n  });\n\n  return stockDetails;\n}\n\nfunction keyShouldBeFormatted(key) {\n  switch (key) {\n    case YEAR:\n      return false;\n    case \"_id\":\n      return false;\n    default:\n      return true;\n  }\n}\n\nfunction formatNumber(number) {\n  if (isNaN(number) || typeof number !== \"number\") {\n    return number;\n  }\n\n  let returnValue = \"\";\n  const negative = number < 0;\n  if (negative) {\n    number = number * -1;\n  }\n\n  if (number >= BILLION) {\n    returnValue = number.toPrecision(3) / BILLION + \" miljarder\";\n  } else if (number >= MILLION) {\n    returnValue = number.toPrecision(3) / MILLION + \" miljoner\";\n  } else if (number >= THOUSAND) {\n    returnValue = numberWithSpaces(number.toFixed(0));\n  } else {\n    returnValue = number.toPrecision(3).replace(\".00e+3\", \" 000\");\n  }\n\n  if (negative) {\n    returnValue = \"-\" + returnValue;\n  }\n\n  return returnValue;\n}\n\nfunction numberWithSpaces(x) {\n  var parts = x.toString().split(\".\");\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\n  return parts.join(\".\");\n}\n","import React from \"react\";\nimport ReactTooltip from \"react-tooltip\";\nimport WarningIcon from \"./icons/WarningIcon\";\nimport {\n  yieldIsGood,\n  yieldIsVeryGood,\n  peIsGood,\n  peIsVeryGood,\n  volatilityIsGood,\n  volatilityIsBad,\n  volatilityIsVeryGood,\n  volatilityIsVeryBad,\n  peIsVeryBad,\n} from \"./stockIndicators\";\nimport { stockIsOwned } from \"../stockUtils\";\nimport { translate, tooltip } from \"../translate\";\nimport {\n  PRICE_EARNINGS_RATIO,\n  DIRECT_YIELD,\n  VOLATILITY,\n  ID,\n  ANNUAL_REPORTS_TABLE,\n  YEAR,\n  MULTIPLE_STOCKS_TABLE,\n  INTERIM_REPORTS_TABLE,\n} from \"../constants\";\nimport { formatField } from \"../api/formatAllFields\";\n\nconst classNames = require(\"classnames\");\n\nfunction StockTable(props) {\n  const {\n    stocks,\n    ownedStocks,\n    sortKey,\n    columnsToShow,\n    type,\n    reportType,\n  } = props;\n\n  if (sortKey) {\n    stocks.sort((a, b) => {\n      return b[sortKey] - a[sortKey];\n    });\n  }\n\n  return (\n    <>\n      <table>\n        <thead>\n          <tr>\n            <th width=\"40%\">{getMainColumn(type)}</th>\n            {columnsToShow.map((column) => {\n              return (\n                <th width=\"15%\" key={column} data-tip={tooltip(column)}>\n                  {translate(column)}\n                </th>\n              );\n            })}\n          </tr>\n        </thead>\n        <tbody>\n          {stocks.map((stockData) => {\n            const owned = stockIsOwned(stockData.id, ownedStocks);\n            return (\n              <Stock\n                stockData={\n                  reportType === \"quarter\"\n                    ? { ...stockData, ...stockData.latestInterimReport }\n                    : { ...stockData, ...stockData.latestAnnualReport }\n                }\n                key={stockData.id}\n                owned={owned}\n                columnsToShow={columnsToShow}\n                showSingleStock={props.showSingleStock}\n                handleClickReport={props.handleClickReport}\n                type={type}\n              />\n            );\n          })}\n        </tbody>\n      </table>\n      <ReactTooltip />\n    </>\n  );\n}\n\nfunction getMainColumn(tableType) {\n  switch (tableType) {\n    case ANNUAL_REPORTS_TABLE:\n      return translate(YEAR);\n    case INTERIM_REPORTS_TABLE:\n      return \"Period\";\n    default:\n      return \"Aktie\";\n  }\n}\n\nclass Stock extends React.Component {\n  handleClick() {\n    this.props.showSingleStock(\n      this.props.stockData.id,\n      this.props.columnsToShow\n    );\n  }\n\n  handleClickReport(stockdata) {\n    this.props.handleClickReport(stockdata);\n  }\n\n  renderMainColumn() {\n    const { type, stockData, owned } = this.props;\n    switch (type) {\n      case ANNUAL_REPORTS_TABLE:\n        return (\n          <td>\n            <a href=\"#\" onClick={() => this.handleClickReport(stockData)}>\n              {stockData.year}\n            </a>\n          </td>\n        );\n      case INTERIM_REPORTS_TABLE:\n        return (\n          <td>\n            <a href=\"#\" onClick={() => this.handleClickReport(stockData)}>\n              {stockData.year} {stockData.period}\n            </a>\n          </td>\n        );\n      default:\n        return (\n          <td\n            className={classNames({\n              owned: owned,\n            })}\n          >\n            <ReactTooltip />\n            <a href=\"#\" onClick={() => this.handleClick()}>\n              {stockData.name}\n            </a>\n            {stockData.currency === \"SEK\"\n              ? \"\"\n              : \" (\" + stockData.currency + \")\"}\n            {this.shouldShowOldReportWarning(stockData.reportDate) ? (\n              <a\n                data-tip={\n                  \"Avser rapport från \" +\n                  this.formatDate(new Date(stockData.reportDate))\n                }\n              >\n                <WarningIcon width={20} fill=\"#fa2\" />\n              </a>\n            ) : (\n              \"\"\n            )}\n          </td>\n        );\n    }\n  }\n\n  formatDate = (d) =>\n    d.getFullYear() +\n    \"-\" +\n    (\"0\" + (d.getMonth() + 1)).slice(-2) +\n    \"-\" +\n    (\"0\" + d.getDate()).slice(-2) +\n    \" .\";\n\n  shouldShowOldReportWarning(reportDate) {\n    if (!reportDate) {\n      return false;\n    }\n    const currentTime = new Date().getTime();\n    const reportTime = new Date(reportDate).getTime();\n    const threeMonthsInMilliseconds = 7889400000;\n    return currentTime - reportTime > threeMonthsInMilliseconds;\n  }\n\n  renderStockData(column) {\n    const { stockData, type } = this.props;\n    switch (type) {\n      case ANNUAL_REPORTS_TABLE:\n      case INTERIM_REPORTS_TABLE:\n        const value = formatField(column, stockData[column]);\n\n        if (!stockData.changeValues) {\n          return value;\n        }\n        const changeValue = stockData.changeValues[column];\n        if (!changeValue || isNaN(changeValue)) {\n          return value;\n        }\n\n        const sign = stockData.changeValues[column] > 0 ? \"+\" : \"\";\n        return value + \" (\" + sign + stockData.changeValues[column] + \"%)\";\n      default:\n        return formatField(column, stockData[column]);\n    }\n  }\n\n  render() {\n    const { stockData, columnsToShow } = this.props;\n\n    return (\n      <tr key={stockData.id}>\n        {this.renderMainColumn()}\n        {columnsToShow.map((column) => {\n          return (\n            <td\n              width=\"15%\"\n              key={column}\n              className={getClassNames(column, stockData)}\n            >\n              {this.renderStockData(column)}\n            </td>\n          );\n        })}\n      </tr>\n    );\n  }\n}\n\nfunction getClassNames(key, stockData) {\n  switch (key) {\n    case \"priceEarningsRatio\":\n      return classNames({\n        good: peIsGood(stockData),\n        veryGood: peIsVeryGood(stockData),\n        veryBad: peIsVeryBad(stockData),\n      });\n    case \"directYield\":\n      return classNames({\n        good: yieldIsGood(stockData),\n        veryGood: yieldIsVeryGood(stockData),\n      });\n    case \"volatility\":\n      return classNames({\n        good: volatilityIsGood(stockData),\n        veryGood: volatilityIsVeryGood(stockData),\n        bad: volatilityIsBad(stockData),\n        veryBad: volatilityIsVeryBad(stockData),\n      });\n    default:\n      return classNames({});\n  }\n}\n\nStockTable.defaultProps = {\n  type: MULTIPLE_STOCKS_TABLE,\n  columnsToShow: [ID, PRICE_EARNINGS_RATIO, DIRECT_YIELD, VOLATILITY],\n};\n\nexport default StockTable;\n","export function stockIsOwned(stockId, ownedStocks) {\n  let found = false;\n  ownedStocks.forEach(stock => {\n    if (stock.id === stockId) {\n      found = true;\n      return;\n    }\n  });\n  return found;\n}\n","import { BASE_URL } from \"../constants\";\n\nconst rp = require(\"request-promise-native\");\n\nexport function saveReport(id, data) {\n  return new Promise((resolve, reject) => {\n    rp({\n      method: \"PUT\",\n      uri: `${BASE_URL}/stock/${id}/reports`,\n      body: data,\n      json: true\n    }).then(returnData => {\n      resolve(returnData);\n    });\n  });\n}\n\nexport function getStockData(id) {\n  return new Promise((resolve, reject) => {\n    rp({\n      uri: `${BASE_URL}/stock/${id}`\n    }).then(returnData => {\n      let parsedData = JSON.parse(returnData);\n      resolve(parsedData);\n    });\n  });\n}\n","import React from \"react\";\n\nimport { MILLION, BILLION, THOUSAND } from \"../constants\";\nimport { saveReport } from \"./backend\";\n\nclass ReportInputSection extends React.Component {\n  constructor(props) {\n    super(props);\n\n    if (props.reportData) {\n      this.state = props.reportData;\n    } else {\n      this.state = {\n        currency: \"SEK\",\n        multiplier: \"NONE\",\n        period: \"YEAR\",\n        year: 2020,\n        revenue: 0,\n        earningsBeforeInterestAndTax: 0,\n        netEarnings: 0,\n        totalAssets: 0,\n        totalEquity: 0,\n        totalDebt: 0,\n        numberOfShares: 0,\n        numberOfEmployees: 0,\n        reportDate: \"\",\n      };\n    }\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  multiply(value) {\n    if (!this.state.multiplier || this.state.multiplier === \"\") {\n      return value * 1;\n    }\n    switch (this.state.multiplier) {\n      case \"MILLION\":\n        return value * MILLION;\n      case \"BILLION\":\n        return value * BILLION;\n      case \"THOUSAND\":\n        return value * THOUSAND;\n      case \"NONE\":\n        return value * 1;\n      default:\n        return value * 1;\n    }\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    // Multiply by 1 to ensure its a number, not a string\n    let report = {\n      currency: this.state.currency,\n      year: this.state.year * 1,\n      revenue: this.multiply(this.state.revenue),\n      earningsBeforeInterestAndTax: this.multiply(\n        this.state.earningsBeforeInterestAndTax\n      ),\n      netEarnings: this.multiply(this.state.netEarnings),\n      numberOfShares: this.state.numberOfShares * 1,\n      numberOfEmployees: this.state.numberOfEmployees * 1,\n      reportDate: new Date(this.state.reportDate),\n    };\n\n    if (this.state.period !== \"YEAR\") {\n      report.period = this.state.period;\n    }\n\n    if (this.state.totalAssets !== 0) {\n      report.totalAssets = this.multiply(this.state.totalAssets);\n    }\n    if (this.state.totalEquity !== 0) {\n      report.totalEquity = this.multiply(this.state.totalEquity);\n    }\n    if (this.state.totalDebt !== 0) {\n      report.totalDebt = this.multiply(this.state.totalDebt);\n    }\n\n    saveReport(this.props.id, report).then(() => {\n      this.props.reportSaved();\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>{this.props.stockDetails.name} – Lägg till rapport</h2>\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            År:\n            <input\n              name=\"year\"\n              type=\"number\"\n              value={this.state.year}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <br />\n          <label>\n            Kvartal:\n            <select\n              name=\"period\"\n              value={this.state.period}\n              onChange={this.handleInputChange}\n            >\n              <option value=\"YEAR\">Helår</option>\n              <option value=\"Q1\">Q1</option>\n              <option value=\"Q2\">Q2</option>\n              <option value=\"Q3\">Q3</option>\n              <option value=\"Q4\">Q4</option>\n            </select>\n          </label>\n          <br />\n          <label>\n            Rapportdatum:\n            <input\n              name=\"reportDate\"\n              type=\"string\"\n              value={this.state.reportDate}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <br />\n          <h3>Räkenskaper</h3>\n          <label>\n            Valuta:\n            <select\n              name=\"multiplier\"\n              value={this.state.multiplier}\n              onChange={this.handleInputChange}\n            >\n              <option value=\"NONE\"></option>\n              <option value=\"THOUSAND\">Tusen</option>\n              <option value=\"MILLION\">Miljoner</option>\n              <option value=\"BILLION\">Miljarder</option>\n            </select>\n            <select\n              name=\"currency\"\n              value={this.state.currency}\n              onChange={this.handleInputChange}\n            >\n              <option value=\"SEK\">SEK</option>\n              <option value=\"EUR\">EUR</option>\n              <option value=\"USD\">USD</option>\n              <option value=\"DKK\">DKK</option>\n            </select>\n          </label>\n          <br />\n          <label>\n            Omsättning (revenue):\n            <input\n              name=\"revenue\"\n              type=\"number\"\n              value={this.state.revenue}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <br />\n\n          <label>\n            Rörelseresultat (EBIT):\n            <input\n              name=\"earningsBeforeInterestAndTax\"\n              type=\"number\"\n              value={this.state.earningsBeforeInterestAndTax}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <br />\n\n          <label>\n            Vinst (Net earnings):\n            <input\n              name=\"netEarnings\"\n              type=\"number\"\n              value={this.state.netEarnings}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <br />\n\n          <label>\n            Tillgångar (Total assets):\n            <input\n              name=\"totalAssets\"\n              type=\"number\"\n              value={this.state.totalAssets}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <br />\n\n          <label>\n            Eget kapital (Total equity):\n            <input\n              name=\"totalEquity\"\n              type=\"number\"\n              value={this.state.totalEquity}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <br />\n\n          <label>\n            Skuld (Total debt):\n            <input\n              name=\"totalDebt\"\n              type=\"number\"\n              value={this.state.totalDebt}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <br />\n\n          <h3>Annan info</h3>\n          <label>\n            Antal anställda:\n            <input\n              name=\"numberOfEmployees\"\n              type=\"number\"\n              value={this.state.numberOfEmployees}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <label>\n            Antal aktier:\n            <input\n              name=\"numberOfShares\"\n              type=\"number\"\n              value={this.state.numberOfShares}\n              onChange={this.handleInputChange}\n            />\n          </label>\n\n          <br />\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default ReportInputSection;\n","import React from \"react\";\nimport StockTable from \"../components/StockTable\";\n\nimport {\n  PRICE_EARNINGS_RATIO,\n  ANNUAL_REPORTS_TABLE,\n  INTERIM_REPORTS_TABLE,\n  VOLATILITY,\n  DIRECT_YIELD,\n  MARKET_CAP,\n  PRICE_BOOK_VALUE,\n  PRICE_SALES_RATIO,\n  REVENUE,\n  EBIT,\n  NET_EARNINGS,\n  TOTAL_ASSETS,\n  TOTAL_EQUITY,\n  TOTAL_DEBT,\n  NET_ASSET_VALUE\n} from \"../constants\";\nimport { getStockData } from \"./backend\";\nimport ReportInputSection from \"./ReportInputSection\";\n\nclass SingleStock extends React.Component {\n  state = {\n    stocksDetails: null,\n    error: null,\n    showReportInput: false,\n    reportData: null\n  };\n\n  componentDidMount() {\n    getStockData(this.props.id).then(data => {\n      this.setState({\n        stockDetails: data\n      });\n    });\n  }\n\n  getColumnsToShow() {\n    const inheritedColumns = this.props.columnsToShow.filter(col => {\n      return (\n        col !== PRICE_EARNINGS_RATIO &&\n        col !== VOLATILITY &&\n        col !== DIRECT_YIELD &&\n        col !== MARKET_CAP &&\n        col !== PRICE_BOOK_VALUE &&\n        col !== PRICE_SALES_RATIO &&\n        col !== NET_ASSET_VALUE\n      );\n    });\n    const extraColumns = [\n      REVENUE,\n      EBIT,\n      NET_EARNINGS,\n      TOTAL_ASSETS,\n      TOTAL_EQUITY,\n      TOTAL_DEBT\n    ];\n    return [...new Set([...inheritedColumns, ...extraColumns])];\n  }\n\n  renderAnnualReports() {\n    const { stockDetails } = this.state;\n\n    if (!stockDetails.annualReports) {\n      return <div></div>;\n    }\n    return (\n      <div>\n        <h2>Årsrapporter</h2>\n        <StockTable\n          type={ANNUAL_REPORTS_TABLE}\n          stocks={stockDetails.annualReports}\n          ownedStocks={[]}\n          columnsToShow={this.getColumnsToShow()}\n          handleClickReport={this.handleClickReport.bind(this)}\n        />\n      </div>\n    );\n  }\n\n  renderInterimReports() {\n    const { stockDetails } = this.state;\n\n    if (!stockDetails.interimReports) {\n      return <div></div>;\n    }\n    return (\n      <div>\n        <h2>Kvartalsrapporter</h2>\n        <StockTable\n          type={INTERIM_REPORTS_TABLE}\n          stocks={stockDetails.interimReports}\n          ownedStocks={[]}\n          columnsToShow={this.getColumnsToShow()}\n          handleClickReport={this.handleClickReport.bind(this)}\n        />\n      </div>\n    );\n  }\n\n  handleClickReport(reportData) {\n    this.setState({ showReportInput: true, reportData: reportData });\n  }\n\n  reportSaved() {\n    this.setState({ showReportInput: false, reportData: null });\n  }\n\n  renderInputSection() {\n    if (!this.props.id) {\n      return <div />;\n    }\n    return (\n      <div>\n        <ReportInputSection\n          id={this.props.id}\n          stockDetails={this.state.stockDetails}\n          reportData={this.state.reportData}\n          reportSaved={this.reportSaved.bind(this)}\n        />\n      </div>\n    );\n  }\n\n  renderNewReportButton() {\n    return (\n      <button\n        onClick={() => {\n          this.setState({ showReportInput: true, reportData: null });\n        }}\n      >\n        New Report\n      </button>\n    );\n  }\n\n  render() {\n    if (this.state.error != null) {\n      return <p>{this.state.error}</p>;\n    }\n\n    const { stockDetails, showReportInput } = this.state;\n\n    if (!stockDetails) {\n      return <div />;\n    }\n\n    if (showReportInput) {\n      return this.renderInputSection();\n    }\n\n    return (\n      <div>\n        <h1>{stockDetails.name}</h1>\n\n        {this.renderAnnualReports()}\n        {this.renderInterimReports()}\n        <hr />\n        {this.renderNewReportButton()}\n      </div>\n    );\n  }\n}\n\nexport default SingleStock;\n","import { BASE_URL } from \"./constants\";\n\nconst rp = require(\"request-promise-native\");\n\nexport function getStocks(category) {\n  return new Promise((resolve, reject) => {\n    rp(`${BASE_URL}/category/${category}`).then(stockData => {\n      let parsedData = JSON.parse(stockData);\n      resolve(parsedData.stocks);\n    });\n  });\n}\n","import React from \"react\";\nimport ReactTooltip from \"react-tooltip\";\n\nimport StockTable from \"../components/StockTable\";\nimport { getStocks } from \"../dataRetriever\";\n\nimport { getAllOwnedStocks } from \"../Portfolio/portfolioUtils\";\nconst classNames = require(\"classnames\");\n\nclass CategoryPage extends React.Component {\n  state = {\n    stocks: [],\n    ownedStocks: [],\n    error: null,\n    sortKey: \"priceEarningsRatio\",\n  };\n\n  componentDidMount() {\n    getStocks(this.props.category)\n      .then((stocks) => {\n        this.setState({\n          stocks: stocks,\n        });\n      })\n      .catch((err) => {\n        console.error(err);\n        this.setState({\n          error: err.message,\n        });\n      });\n\n    getAllOwnedStocks().then((ownedStocks) => {\n      this.setState({\n        ownedStocks: ownedStocks,\n      });\n    });\n  }\n\n  renderButtons() {\n    return (\n      <>\n        Visa senaste:\n        <button\n          onClick={() => {\n            this.props.setReportType(\"year\");\n          }}\n          className={classNames({\n            active: this.props.reportType === \"year\",\n          })}\n        >\n          Helår\n        </button>\n        <button\n          onClick={() => {\n            this.props.setReportType(\"quarter\");\n          }}\n          className={classNames({\n            active: this.props.reportType === \"quarter\",\n          })}\n          data-tip=\"Kommer snart!\"\n        >\n          Kvartal\n        </button>\n        <ReactTooltip />\n      </>\n    );\n  }\n\n  render() {\n    if (this.state.error != null) {\n      return <p>{this.state.error}</p>;\n    }\n\n    return (\n      <div>\n        <h1>{this.props.title}</h1>\n        {this.renderButtons()}\n        <StockTable\n          stocks={this.state.stocks}\n          ownedStocks={this.state.ownedStocks}\n          sortKey={this.state.sortKey}\n          onSort={(sortKey) => {\n            this.setState({ sortKey: sortKey });\n          }}\n          showSingleStock={this.props.showSingleStock}\n          columnsToShow={this.props.columnsToShow}\n          reportType={this.props.reportType}\n        />\n      </div>\n    );\n  }\n}\n\nexport default CategoryPage;\n","import React from \"react\";\r\nimport {\r\n  PRICE_EARNINGS_RATIO,\r\n  DIRECT_YIELD,\r\n  VOLATILITY,\r\n  PRICE_BOOK_VALUE,\r\n  EARNINGS_PER_SHARE,\r\n  REVENUE_PER_EMPLOYEE,\r\n  REVENUE_PER_SHARE,\r\n  OPERATING_MARGIN,\r\n  SOLIDITY,\r\n  PRICE_SALES_RATIO,\r\n  MARKET_CAP,\r\n  RETURN_ON_EQUITY,\r\n  RETURN_ON_CAPITAL_EMPLOYED,\r\n} from \"../constants\";\r\nimport CategoryPage from \"../components/CategoryPage\";\r\n\r\nclass Forest extends React.Component {\r\n  state = {\r\n    stocks: [],\r\n    ownedStocks: [],\r\n    error: null,\r\n    sortKey: PRICE_EARNINGS_RATIO,\r\n    columnsToShow: [\r\n      PRICE_EARNINGS_RATIO,\r\n      DIRECT_YIELD,\r\n      VOLATILITY,\r\n      PRICE_BOOK_VALUE,\r\n      EARNINGS_PER_SHARE,\r\n      REVENUE_PER_EMPLOYEE,\r\n      REVENUE_PER_SHARE,\r\n      OPERATING_MARGIN,\r\n      SOLIDITY,\r\n      PRICE_SALES_RATIO,\r\n      MARKET_CAP,\r\n      RETURN_ON_EQUITY,\r\n      RETURN_ON_CAPITAL_EMPLOYED,\r\n    ],\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <CategoryPage\r\n        category=\"forest\"\r\n        title=\"Skog\"\r\n        columnsToShow={this.state.columnsToShow}\r\n        reportType={this.props.reportType}\r\n        setReportType={this.props.setReportType}\r\n        showSingleStock={this.props.showSingleStock}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Forest;\r\n","import React from \"react\";\r\nimport {\r\n  PRICE_EARNINGS_RATIO,\r\n  DIRECT_YIELD,\r\n  TOTAL_ASSETS,\r\n  EARNINGS_PER_SHARE,\r\n  PRICE_BOOK_VALUE,\r\n  SOLIDITY,\r\n  MARKET_CAP,\r\n  NET_EARNINGS,\r\n  EBIT,\r\n  RETURN_ON_EQUITY,\r\n  RETURN_ON_CAPITAL_EMPLOYED,\r\n  NET_ASSET_VALUE,\r\n} from \"../constants\";\r\nimport CategoryPage from \"../components/CategoryPage\";\r\n\r\nclass Investment extends React.Component {\r\n  state = {\r\n    stocks: [],\r\n    ownedStocks: [],\r\n    error: null,\r\n    sortKey: \"priceEarningsRatio\",\r\n    columnsToShow: [\r\n      PRICE_EARNINGS_RATIO,\r\n      DIRECT_YIELD,\r\n      NET_EARNINGS,\r\n      EBIT,\r\n      EARNINGS_PER_SHARE,\r\n      TOTAL_ASSETS,\r\n      PRICE_BOOK_VALUE,\r\n      SOLIDITY,\r\n      RETURN_ON_EQUITY,\r\n      RETURN_ON_CAPITAL_EMPLOYED,\r\n      MARKET_CAP,\r\n      NET_ASSET_VALUE,\r\n    ],\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <CategoryPage\r\n        category=\"invest\"\r\n        title=\"Investmentbolag\"\r\n        columnsToShow={this.state.columnsToShow}\r\n        reportType={this.props.reportType}\r\n        setReportType={this.props.setReportType}\r\n        showSingleStock={this.props.showSingleStock}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Investment;\r\n","import React from \"react\";\nimport {\n  PRICE_EARNINGS_RATIO,\n  DIRECT_YIELD,\n  VOLATILITY,\n  PRICE_BOOK_VALUE,\n  EARNINGS_PER_SHARE,\n  REVENUE_PER_EMPLOYEE,\n  REVENUE_PER_SHARE,\n  OPERATING_MARGIN,\n  SOLIDITY,\n  PRICE_SALES_RATIO,\n  MARKET_CAP,\n  RETURN_ON_EQUITY,\n} from \"../constants\";\nimport CategoryPage from \"../components/CategoryPage\";\n\nclass Bank extends React.Component {\n  state = {\n    stocks: [],\n    ownedStocks: [],\n    error: null,\n    sortKey: PRICE_EARNINGS_RATIO,\n    columnsToShow: [\n      PRICE_EARNINGS_RATIO,\n      DIRECT_YIELD,\n      VOLATILITY,\n      PRICE_BOOK_VALUE,\n      EARNINGS_PER_SHARE,\n      REVENUE_PER_EMPLOYEE,\n      REVENUE_PER_SHARE,\n      OPERATING_MARGIN,\n      SOLIDITY,\n      PRICE_SALES_RATIO,\n      MARKET_CAP,\n      RETURN_ON_EQUITY,\n    ],\n  };\n\n  render() {\n    return (\n      <CategoryPage\n        category=\"bank\"\n        title=\"Bank\"\n        columnsToShow={this.state.columnsToShow}\n        reportType={this.props.reportType}\n        setReportType={this.props.setReportType}\n        showSingleStock={this.props.showSingleStock}\n      />\n    );\n  }\n}\n\nexport default Bank;\n","import React from \"react\";\nimport \"./App.css\";\nimport Portfolio from \"../Portfolio/Portfolio\";\nimport SingleStock from \"../SingleStock/SingleStock\";\nimport Forest from \"../Forest/Forest\";\nimport Invest from \"../Invest/Invest\";\nimport Bank from \"../Bank/Bank\";\nimport CategoryPage from \"../components/CategoryPage\";\n\nconst portfolioPage = \"PORTFOLIO_PAGE\";\nconst bestYieldPage = \"BEST_YIELD_PAGE\";\nconst blueChipPage = \"BLUE_CHIP_PAGE\";\nconst industryPage = \"INDUSTRY_PAGE\";\nconst forestPage = \"FOREST_PAGE\";\nconst investPage = \"INVEST_PAGE\";\nconst realEstatePage = \"REAL_ESTATE_PAGE\";\nconst bankPage = \"BANK_PAGE\";\n\nconst classNames = require(\"classnames\");\n\nclass App extends React.Component {\n  state = {\n    activePage: bestYieldPage,\n    activeStock: null,\n    columnsToShow: [],\n    reportType: \"year\",\n  };\n\n  renderActivePage() {\n    if (this.state.activeStock) {\n      return (\n        <SingleStock\n          id={this.state.activeStock}\n          columnsToShow={this.state.columnsToShow}\n        />\n      );\n    }\n\n    const passOnProps = {\n      reportType: this.state.reportType,\n      setReportType: this.setReportType.bind(this),\n      showSingleStock: this.showSingleStock.bind(this),\n    };\n\n    switch (this.state.activePage) {\n      case portfolioPage:\n        return <Portfolio showSingleStock={this.showSingleStock.bind(this)} />;\n      case bestYieldPage:\n        return (\n          <CategoryPage\n            category=\"best-yield\"\n            title=\"Intressanta utdelningsaktier\"\n            {...passOnProps}\n          />\n        );\n      case blueChipPage:\n        return (\n          <CategoryPage\n            category=\"blue-chip\"\n            title=\"Intressanta basaktier\"\n            {...passOnProps}\n          />\n        );\n      case industryPage:\n        return (\n          <CategoryPage category=\"industry\" title=\"Verkstad\" {...passOnProps} />\n        );\n      case forestPage:\n        return <Forest {...passOnProps} />;\n      case investPage:\n        return <Invest {...passOnProps} />;\n      case realEstatePage:\n        return (\n          <CategoryPage\n            category=\"realEstate\"\n            title=\"Fastighetsbolag\"\n            {...passOnProps}\n          />\n        );\n      case bankPage:\n        return <Bank {...passOnProps} />;\n      default:\n        return <div></div>;\n    }\n  }\n\n  renderButton(title, page) {\n    return (\n      <button\n        onClick={() => {\n          this.setState({ activePage: page, activeStock: null });\n        }}\n        className={classNames({\n          active: this.state.activePage === page,\n        })}\n      >\n        {title}\n      </button>\n    );\n  }\n\n  showSingleStock(id, columnsToShow) {\n    this.setState({ activeStock: id, columnsToShow: columnsToShow });\n  }\n\n  setReportType(reportType) {\n    this.setState({ reportType: reportType });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>BisseNisse</h1>\n        {/* {this.renderButton(\"Portfolio\", portfolioPage)} */}\n        {this.renderButton(\"Utdelningsaktier\", bestYieldPage)}\n        {this.renderButton(\"Basaktier\", blueChipPage)}\n        {this.renderButton(\"Verkstad\", industryPage)}\n        {this.renderButton(\"Skog\", forestPage)}\n        {this.renderButton(\"Investment\", investPage)}\n        {this.renderButton(\"Fastigheter\", realEstatePage)}\n        {this.renderButton(\"Bank\", bankPage)}\n        {this.renderActivePage()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}