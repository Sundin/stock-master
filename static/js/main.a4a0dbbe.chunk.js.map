{"version":3,"sources":["components/stockIndicators.js","constants.js","translate.js","components/StockTable.js","stockUtils.js","dataRetriever.js","avanza.js","Portfolio/portfolioData.js","Portfolio/dataRetriever.js","Portfolio/portfolioUtils.js","BestYield/BestYield.js","BlueChip/BlueChip.js","Portfolio/Portfolio.js","Weapons/Weapons.js","SingleStock/backend.js","SingleStock/SingleStock.js","Industry/Industry.js","Forest/Forest.js","Invest/Invest.js","RealEstate/RealEstate.js","App/App.js","serviceWorker.js","index.js"],"names":["yieldIsGood","stockData","directYield","getYieldTarget","yieldIsVeryGood","peIsGood","priceEarningsRatio","peIsVeryGood","peIsVeryBad","tenYearsBondInterest","averageOMXS30volatility","volatilityIsGood","volatility","volatilityIsVeryGood","volatilityIsBad","volatilityIsVeryBad","exchangeRates","DKK","USD","OPERATING_MARGIN","PRICE_EARNINGS_RATIO","PRICE_SALES_RATIO","PRICE_BOOK_VALUE","DIRECT_YIELD","VOLATILITY","NUMBER_OF_EMPLOYEES","REVENUE","REVENUE_PER_EMPLOYEE","REVENUE_PER_SHARE","TOTAL_ASSETS","EARNINGS_PER_SHARE","NET_EARNINGS","SOLIDITY","MARKET_CAP","YEAR","ID","EBIT","ANNUAL_REPORTS_TABLE","INTERIM_REPORTS_TABLE","translate","key","classNames","require","StockTable","props","stocks","ownedStocks","sortKey","columnsToShow","type","sort","a","b","width","tableType","getMainColumn","map","column","owned","stockId","found","forEach","stock","id","stockIsOwned","showSingleStock","Stock","this","year","period","className","href","onClick","e","handleClick","name","changeValues","sign","renderMainColumn","getClassNames","renderStockData","React","Component","good","veryGood","veryBad","bad","defaultProps","rp","getStocks","category","Promise","resolve","reject","then","parsedData","JSON","parse","cachedStocks","getStock","currency","lastPrice","console","error","convertToSEK","keyRatios","transformJson","basePortfolioStrategy","minShare","maxShare","minNumberOfStocks","maxNumberOfStocks","minRatioOfEachShareInPortfolio","maxRatioOfEachShareInPortfolio","portfolios","strategy","getPortfolios","promises","portfolio","push","returnData","getStockWithAmount","all","getStockValue","getStocksInPortfolio","getPortfolioValue","portfolioData","reduce","sum","portfolioRatioIsGood","totalPortfolioValue","portfolioRatio","numberOfStocksIsGood","length","amount","getAllOwnedStocks","concat","BestYield","state","setState","catch","err","message","BlueChip","onSort","PortfolioRow","toFixed","PortfolioDetails","widrth","StockRow","portfolioValue","minRatio","maxRatio","stockRatioIsGood","stockRatio","sector","Portfolio","sectors","getSectors","sortedSectors","Object","keys","value","getTotalPortfolioValue","Weapons","SingleStock","stocksDetails","uri","log","data","stockDetails","annualReports","interimReports","renderAnnualReports","renderInterimReports","renderInputSection","InputSection","multiplier","revenue","earningsBeforeInterestAndTax","netEarnings","totalAssets","totalEquity","totalDebt","numberOfShares","numberOfEmployees","handleInputChange","bind","handleSubmit","event","target","checked","preventDefault","report","multiply","reqBody","Array","isArray","filter","r","method","body","json","onSubmit","onChange","Industry","Forest","bestYieldPage","App","activePage","activeStock","config","Invest","RealEstate","title","page","active","renderButton","renderActivePage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a4a0dbbe.chunk.js","sourcesContent":["export function yieldIsGood(stockData) {\r\n  const { directYield } = stockData;\r\n\r\n  return directYield > getYieldTarget();\r\n}\r\n\r\nexport function yieldIsVeryGood(stockData) {\r\n  const { directYield } = stockData;\r\n  return directYield > getYieldTarget() * 1.25;\r\n}\r\n\r\nexport function peIsGood(stockData) {\r\n  const { priceEarningsRatio, directYield } = stockData;\r\n\r\n  if (priceEarningsRatio <= 0) {\r\n    return false;\r\n  }\r\n\r\n  return 1 / (directYield / 100) >= priceEarningsRatio;\r\n}\r\n\r\nexport function peIsVeryGood(stockData) {\r\n  const { priceEarningsRatio, directYield } = stockData;\r\n  return (\r\n    peIsGood(stockData) && 1 / (directYield / 100) >= priceEarningsRatio * 2\r\n  );\r\n}\r\n\r\nexport function peIsVeryBad(stockData) {\r\n  const { priceEarningsRatio } = stockData;\r\n  return priceEarningsRatio <= 0;\r\n}\r\n\r\nfunction getYieldTarget() {\r\n  // TODO: get tenYearsBondInterest from some API?\r\n  const tenYearsBondInterest = -0.2;\r\n  const riskPremium = 5;\r\n  return tenYearsBondInterest + riskPremium;\r\n}\r\n\r\nconst averageOMXS30volatility = 21.6;\r\n\r\nexport function volatilityIsGood(stockData) {\r\n  const { volatility } = stockData;\r\n  return volatility <= averageOMXS30volatility * 0.75;\r\n}\r\n\r\nexport function volatilityIsVeryGood(stockData) {\r\n  const { volatility } = stockData;\r\n  return volatility <= averageOMXS30volatility * 0.5;\r\n}\r\n\r\nexport function volatilityIsBad(stockData) {\r\n  const { volatility } = stockData;\r\n  return volatility > averageOMXS30volatility * 1.25;\r\n}\r\n\r\nexport function volatilityIsVeryBad(stockData) {\r\n  const { volatility } = stockData;\r\n  return volatility > averageOMXS30volatility * 1.9;\r\n}\r\n","export const exchangeRates = {\n  DKK: 1.41,\n  USD: 9.42\n};\n\nexport const BILLION = 1000000000;\nexport const MILLION = 1000000;\nexport const THOUSAND = 1000;\n\nexport const OPERATING_MARGIN = \"operatingMargin\";\nexport const PRICE_EARNINGS_RATIO = \"priceEarningsRatio\";\nexport const PRICE_SALES_RATIO = \"priceSalesRatio\";\nexport const PRICE_BOOK_VALUE = \"priceBookValue\";\nexport const DIRECT_YIELD = \"directYield\";\nexport const VOLATILITY = \"volatility\";\nexport const NUMBER_OF_EMPLOYEES = \"numberOfEmployees\";\nexport const REVENUE = \"revenue\"; // = sales\nexport const REVENUE_PER_EMPLOYEE = \"revenuePerEmployee\";\nexport const REVENUE_PER_SHARE = \"revenuePerShare\";\nexport const TOTAL_ASSETS = \"totalAssets\";\nexport const EARNINGS_PER_SHARE = \"earningsPerShare\";\nexport const NET_EARNINGS = \"netEarnings\";\nexport const NUMBER_OF_SHARES = \"numberOfShares\";\nexport const TOTAL_EQUITY = \"totalEquity\"; // = eget kapital\nexport const TOTAL_DEBT = \"totalDebt\";\nexport const SOLIDITY = \"solidity\";\nexport const MARKET_CAP = \"marketCap\";\nexport const YEAR = \"year\";\nexport const ID = \"id\";\nexport const LAST_PRICE = \"lastPrice\";\nexport const CURRENCY = \"currency\";\nexport const EBIT = \"earningsBeforeInterestAndTax\";\nexport const CHANGE_VALUES = \"changeValues\";\n\nexport const ANNUAL_REPORTS_TABLE = \"annualReportsTable\";\nexport const INTERIM_REPORTS_TABLE = \"interimReportsTable\";\nexport const MULTIPLE_STOCKS_TABLE = \"multipleStocksTable\";\n","import {\n  OPERATING_MARGIN,\n  REVENUE_PER_SHARE,\n  REVENUE_PER_EMPLOYEE,\n  REVENUE,\n  NUMBER_OF_EMPLOYEES,\n  VOLATILITY,\n  DIRECT_YIELD,\n  PRICE_SALES_RATIO,\n  PRICE_EARNINGS_RATIO,\n  TOTAL_ASSETS,\n  EARNINGS_PER_SHARE,\n  PRICE_BOOK_VALUE,\n  SOLIDITY,\n  MARKET_CAP,\n  YEAR,\n  ID,\n  EBIT,\n  NET_EARNINGS\n} from \"./constants\";\n\nexport function translate(key) {\n  switch (key) {\n    case PRICE_EARNINGS_RATIO:\n      return \"P/E\";\n    case PRICE_SALES_RATIO:\n      return \"P/S\";\n    case DIRECT_YIELD:\n      return \"Direktavkastning (%)\";\n    case VOLATILITY:\n      return \"Volatilitet\";\n    case NUMBER_OF_EMPLOYEES:\n      return \"Anställda\";\n    case REVENUE:\n      return \"Omsättning\";\n    case REVENUE_PER_EMPLOYEE:\n      return \"Omsättning / anställd\";\n    case REVENUE_PER_SHARE:\n      return \"Omsättning / aktie\";\n    case OPERATING_MARGIN:\n      return \"Rörelsemarginal (%)\";\n    case TOTAL_ASSETS:\n      return \"Tillgångar\";\n    case EARNINGS_PER_SHARE:\n      return \"EPS\";\n    case PRICE_BOOK_VALUE:\n      return \"P/B\";\n    case SOLIDITY:\n      return \"Soliditet (%)\";\n    case MARKET_CAP:\n      return \"Börsvärde\";\n    case YEAR:\n      return \"År\";\n    case ID:\n      return \"ID\";\n    case EBIT:\n      return \"EBIT\";\n    case NET_EARNINGS:\n      return \"Vinst\";\n    default:\n      return \"\";\n  }\n}\n","import React from \"react\";\nimport {\n  yieldIsGood,\n  yieldIsVeryGood,\n  peIsGood,\n  peIsVeryGood,\n  volatilityIsGood,\n  volatilityIsBad,\n  volatilityIsVeryGood,\n  volatilityIsVeryBad,\n  peIsVeryBad\n} from \"./stockIndicators\";\nimport { stockIsOwned } from \"../stockUtils\";\nimport { translate } from \"../translate\";\nimport {\n  PRICE_EARNINGS_RATIO,\n  DIRECT_YIELD,\n  VOLATILITY,\n  ID,\n  ANNUAL_REPORTS_TABLE,\n  YEAR,\n  MULTIPLE_STOCKS_TABLE,\n  INTERIM_REPORTS_TABLE\n} from \"../constants\";\n\nconst classNames = require(\"classnames\");\n\nfunction StockTable(props) {\n  const { stocks, ownedStocks, sortKey, columnsToShow, type } = props;\n\n  if (sortKey) {\n    stocks.sort((a, b) => {\n      return b[sortKey] - a[sortKey];\n    });\n  }\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th width=\"40%\">{getMainColumn(type)}</th>\n          {columnsToShow.map(column => {\n            return (\n              <th width=\"15%\" key={column}>\n                {translate(column)}\n              </th>\n            );\n          })}\n        </tr>\n      </thead>\n      <tbody>\n        {stocks.map(stockData => {\n          const owned = stockIsOwned(stockData.id, ownedStocks);\n          return (\n            <Stock\n              stockData={stockData}\n              key={stockData.id}\n              owned={owned}\n              columnsToShow={columnsToShow}\n              showSingleStock={props.showSingleStock}\n              type={type}\n            />\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nfunction getMainColumn(tableType) {\n  switch (tableType) {\n    case ANNUAL_REPORTS_TABLE:\n      return translate(YEAR);\n    case INTERIM_REPORTS_TABLE:\n      return \"Period\";\n    default:\n      return \"Aktie\";\n  }\n}\n\nclass Stock extends React.Component {\n  handleClick() {\n    this.props.showSingleStock(\n      this.props.stockData.id,\n      this.props.columnsToShow\n    );\n  }\n\n  renderMainColumn() {\n    const { type, stockData, owned } = this.props;\n    switch (type) {\n      case ANNUAL_REPORTS_TABLE:\n        return <td>{stockData.year}</td>;\n      case INTERIM_REPORTS_TABLE:\n        return (\n          <td>\n            {stockData.year} {stockData.period}\n          </td>\n        );\n      default:\n        return (\n          <td\n            className={classNames({\n              owned: owned\n            })}\n          >\n            <a href=\"#\" onClick={e => this.handleClick(e)}>\n              {stockData.name}\n            </a>\n          </td>\n        );\n    }\n  }\n\n  renderStockData(column) {\n    const { stockData, type } = this.props;\n    switch (type) {\n      case ANNUAL_REPORTS_TABLE:\n      case INTERIM_REPORTS_TABLE:\n        if (stockData.changeValues && stockData.changeValues[column]) {\n          const sign = stockData.changeValues[column] > 0 ? \"+\" : \"\";\n          return (\n            stockData[column] +\n            \" (\" +\n            sign +\n            stockData.changeValues[column] +\n            \"%)\"\n          );\n        }\n        return stockData[column];\n      default:\n        return stockData[column];\n    }\n  }\n\n  render() {\n    const { stockData, columnsToShow } = this.props;\n\n    return (\n      <tr key={stockData.id}>\n        {this.renderMainColumn()}\n        {columnsToShow.map(column => {\n          return (\n            <td\n              width=\"15%\"\n              key={column}\n              className={getClassNames(column, stockData)}\n            >\n              {this.renderStockData(column)}\n            </td>\n          );\n        })}\n      </tr>\n    );\n  }\n}\n\nfunction getClassNames(key, stockData) {\n  switch (key) {\n    case \"priceEarningsRatio\":\n      return classNames({\n        good: peIsGood(stockData),\n        veryGood: peIsVeryGood(stockData),\n        veryBad: peIsVeryBad(stockData)\n      });\n    case \"directYield\":\n      return classNames({\n        good: yieldIsGood(stockData),\n        veryGood: yieldIsVeryGood(stockData)\n      });\n    case \"volatility\":\n      return classNames({\n        good: volatilityIsGood(stockData),\n        veryGood: volatilityIsVeryGood(stockData),\n        bad: volatilityIsBad(stockData),\n        veryBad: volatilityIsVeryBad(stockData)\n      });\n    default:\n      return classNames({});\n  }\n}\n\nStockTable.defaultProps = {\n  type: MULTIPLE_STOCKS_TABLE,\n  columnsToShow: [ID, PRICE_EARNINGS_RATIO, DIRECT_YIELD, VOLATILITY]\n};\n\nexport default StockTable;\n","export function stockIsOwned(stockId, ownedStocks) {\n  let found = false;\n  ownedStocks.forEach(stock => {\n    if (stock.id === stockId) {\n      found = true;\n      return;\n    }\n  });\n  return found;\n}\n","const rp = require(\"request-promise-native\");\n\nexport function getStocks(category) {\n  return new Promise((resolve, reject) => {\n    rp(\"https://bissenisse.duckdns.org:443/category/\" + category).then(\n      stockData => {\n        const parsedData = JSON.parse(stockData);\n        resolve(parsedData.stocks);\n      }\n    );\n  });\n}\n","import { exchangeRates } from \"./constants\";\n\nvar rp = require(\"request-promise-native\");\n\nlet cachedStocks = {};\n\nexport function getStock(id) {\n  if (cachedStocks[id] != null) {\n    return Promise.resolve(cachedStocks[id]);\n  }\n\n  return new Promise((resolve, reject) => {\n    rp(\"https://avanza.se/_mobile/market/stock/\" + id).then(stockData => {\n      let parsedData = JSON.parse(stockData);\n\n      parsedData = transformJson(parsedData);\n      parsedData = convertToSEK(parsedData);\n\n      cachedStocks[parsedData.id] = parsedData;\n      resolve(parsedData);\n    });\n  });\n}\n\nexport function getStockWithAmount(stock) {\n  return new Promise((resolve, reject) => {\n    getStock(stock.id).then(stockData => {\n      resolve({ ...stock, ...stockData });\n    });\n  });\n}\n\n// Convert stock data json into a format that's easier to use\nfunction transformJson(stockData) {\n  // Add more fields from stockData here if necessary\n  return {\n    name: stockData.name,\n    id: stockData.id,\n    directYield: stockData.keyRatios.directYield,\n    priceEarningsRatio: stockData.keyRatios.priceEarningsRatio,\n    volatility: stockData.keyRatios.volatility,\n    currency: stockData.currency,\n    lastPrice: stockData.lastPrice\n  };\n}\n\n// TODO: Get currency exchange rates from some API\nfunction convertToSEK(stockData) {\n  switch (stockData.currency) {\n    case \"SEK\":\n      return stockData;\n    case \"USD\":\n      return {\n        ...stockData,\n        currency: \"SEK\",\n        lastPrice: stockData.lastPrice * exchangeRates.USD\n      };\n    case \"DKK\":\n      return {\n        ...stockData,\n        currency: \"SEK\",\n        lastPrice: stockData.lastPrice * exchangeRates.DKK\n      };\n    default:\n      console.error(\"Missing currency: \" + stockData.currency);\n      return stockData;\n  }\n}\n","const basePortfolioStrategy = {\n  minShare: 20,\n  maxShare: 30,\n  minNumberOfStocks: 8,\n  maxNumberOfStocks: 12,\n  minRatioOfEachShareInPortfolio: 5,\n  maxRatioOfEachShareInPortfolio: 30\n};\n\nconst portfolios = [\n  {\n    id: \"1\",\n    name: \"Basportföljen\",\n    stocks: [\n      // {\n      //   id: \"5465\",\n      //   name: \"Axfood\",\n      //   amount: 10,\n      //   sector: \"Konsumentvaror\"\n      // }\n    ],\n    strategy: {\n      ...basePortfolioStrategy,\n      minShare: 40,\n      maxShare: 60\n    }\n  },\n  {\n    id: \"2\",\n    name: \"Raketportföljen\",\n    stocks: [\n      // {\n      //   id: \"3323\",\n      //   name: \"Apple Inc\",\n      //   amount: 1,\n      //   sector: \"Teknik\"\n      // }\n    ],\n    strategy: basePortfolioStrategy\n  }\n];\n\nexport default portfolios;\n","import { getStockWithAmount } from \"../avanza\";\n// import portfolios from \"../data/portfolioData\";\nimport portfolios from \"./portfolioData\";\nimport { getStockValue } from \"./portfolioUtils\";\n\nexport function getPortfolios() {\n  return new Promise((resolve, reject) => {\n    let promises = [];\n    portfolios.forEach(portfolio => {\n      promises.push(getStocksInPortfolio(portfolio));\n    });\n    Promise.all(promises).then(returnData => {\n      resolve(returnData);\n    });\n  });\n}\n\nfunction getStocksInPortfolio(portfolio) {\n  let returnData = portfolio;\n  return new Promise((resolve, reject) => {\n    let promises = [];\n    portfolio.stocks.forEach(stock => {\n      promises.push(getStockWithAmount(stock));\n    });\n    Promise.all(promises).then(stocks => {\n      returnData.stocks = stocks.sort((a, b) => {\n        return getStockValue(b) - getStockValue(a);\n      });\n      resolve(returnData);\n    });\n  });\n}\n","import { getPortfolios } from \"./dataRetriever\";\n\nexport function getPortfolioValue(portfolioData) {\n  return portfolioData.stocks.reduce((sum, stock) => {\n    return sum + getStockValue(stock);\n  }, 0);\n}\n\nexport function portfolioRatioIsGood(portfolioData, totalPortfolioValue) {\n  const portfolioRatio =\n    (getPortfolioValue(portfolioData) / totalPortfolioValue) * 100;\n  return (\n    portfolioRatio >= portfolioData.strategy.minShare &&\n    portfolioRatio <= portfolioData.strategy.maxShare\n  );\n}\n\nexport function numberOfStocksIsGood(portfolioData) {\n  return (\n    portfolioData.stocks.length >= portfolioData.strategy.minNumberOfStocks &&\n    portfolioData.stocks.length <= portfolioData.strategy.maxNumberOfStocks\n  );\n}\n\nexport function getStockValue(stock) {\n  return stock.amount * stock.lastPrice;\n}\n\nexport function getAllOwnedStocks() {\n  return new Promise((resolve, reject) => {\n    let stocks = [];\n    getPortfolios().then(portfolios => {\n      portfolios.forEach(portfolio => {\n        stocks = stocks.concat(portfolio.stocks);\n      });\n      resolve(stocks);\n    });\n  });\n}\n","import React from \"react\";\r\nimport StockTable from \"../components/StockTable\";\r\nimport { getStocks } from \"../dataRetriever\";\r\n\r\nimport { getAllOwnedStocks } from \"../Portfolio/portfolioUtils\";\r\n\r\nclass BestYield extends React.Component {\r\n  state = {\r\n    stocks: [],\r\n    ownedStocks: [],\r\n    error: null,\r\n    sortKey: \"directYield\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    getStocks(\"best-yield\")\r\n      .then(stocks => {\r\n        this.setState({\r\n          stocks: stocks\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n        this.setState({\r\n          error: err.message\r\n        });\r\n      });\r\n\r\n    getAllOwnedStocks().then(ownedStocks => {\r\n      this.setState({\r\n        ownedStocks: ownedStocks\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error != null) {\r\n      return <p>{this.state.error}</p>;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h1>Intressanta utdelningsaktier</h1>\r\n        <StockTable\r\n          stocks={this.state.stocks}\r\n          ownedStocks={this.state.ownedStocks}\r\n          sortKey={this.state.sortKey}\r\n          showSingleStock={this.props.showSingleStock}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BestYield;\r\n","import React from \"react\";\r\nimport StockTable from \"../components/StockTable\";\r\nimport { getStocks } from \"../dataRetriever\";\r\n\r\nimport { getAllOwnedStocks } from \"../Portfolio/portfolioUtils\";\r\n\r\nclass BlueChip extends React.Component {\r\n  state = {\r\n    stocks: [],\r\n    ownedStocks: [],\r\n    error: null,\r\n    sortKey: \"priceEarningsRatio\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    getStocks(\"blue-chip\")\r\n      .then(stocks => {\r\n        this.setState({\r\n          stocks: stocks\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n        this.setState({\r\n          error: err.message\r\n        });\r\n      });\r\n\r\n    getAllOwnedStocks().then(ownedStocks => {\r\n      this.setState({\r\n        ownedStocks: ownedStocks\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error != null) {\r\n      return <p>{this.state.error}</p>;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h1>Intressanta basaktier</h1>\r\n        <StockTable\r\n          stocks={this.state.stocks}\r\n          ownedStocks={this.state.ownedStocks}\r\n          sortKey={this.state.sortKey}\r\n          onSort={sortKey => {\r\n            this.setState({ sortKey: sortKey });\r\n          }}\r\n          showSingleStock={this.props.showSingleStock}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BlueChip;\r\n","import React from \"react\";\r\nimport { getPortfolios } from \"./dataRetriever\";\r\nimport {\r\n  getPortfolioValue,\r\n  portfolioRatioIsGood,\r\n  numberOfStocksIsGood,\r\n  getStockValue\r\n} from \"./portfolioUtils\";\r\nimport { PRICE_EARNINGS_RATIO } from \"../constants\";\r\n\r\nvar classNames = require(\"classnames\");\r\n\r\nclass Portfolio extends React.Component {\r\n  state = {\r\n    portfolios: [],\r\n    error: null\r\n  };\r\n\r\n  // componentDidMount() {\r\n  //   getPortfolios()\r\n  //     .then(portfolios => {\r\n  //       this.setState({\r\n  //         portfolios: portfolios\r\n  //       });\r\n  //     })\r\n  //     .catch(err => {\r\n  //       console.error(err);\r\n  //       this.setState({\r\n  //         error: err.message\r\n  //       });\r\n  //     });\r\n  // }\r\n\r\n  getTotalPortfolioValue() {\r\n    return this.state.portfolios.reduce((sum, portfolio) => {\r\n      return sum + getPortfolioValue(portfolio);\r\n    }, 0);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error != null) {\r\n      return <p>{this.state.error}</p>;\r\n    }\r\n\r\n    const sectors = getSectors(this.state.portfolios);\r\n    let sortedSectors = [];\r\n    Object.keys(sectors).forEach(sector => {\r\n      sortedSectors.push({\r\n        name: sector,\r\n        value: (sectors[sector] / this.getTotalPortfolioValue()) * 100\r\n      });\r\n    });\r\n    sortedSectors = sortedSectors.sort(function(a, b) {\r\n      return a.value < b.value ? 1 : b.value < a.value ? -1 : 0;\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <h1>Alla portföljer</h1>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th width=\"40%\">Portfölj</th>\r\n              <th width=\"30%\">Andel</th>\r\n              <th width=\"30%\">Antal innehav</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.state.portfolios.map(portfolioData => (\r\n              <PortfolioRow\r\n                portfolioData={portfolioData}\r\n                totalPortfolioValue={this.getTotalPortfolioValue()}\r\n                key={portfolioData.id}\r\n              />\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n\r\n        <h2>Branschfördelning</h2>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th width=\"40%\">Bransch</th>\r\n              <th width=\"30%\">Andel</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {sortedSectors.map(sector => (\r\n              <tr>\r\n                <td>{sector.name}</td>\r\n                <td>{sector.value.toFixed(2)}%</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n\r\n        {this.state.portfolios.map(portfolioData => (\r\n          <PortfolioDetails\r\n            portfolioData={portfolioData}\r\n            key={portfolioData.id}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction getSectors(portfolios) {\r\n  let sectors = {};\r\n  portfolios.forEach(portfolioData => {\r\n    portfolioData.stocks.forEach(stock => {\r\n      if (!sectors[stock.sector]) {\r\n        sectors[stock.sector] = 0;\r\n      }\r\n      sectors[stock.sector] += stock.amount * stock.lastPrice;\r\n    });\r\n  });\r\n  return sectors;\r\n}\r\n\r\nfunction PortfolioRow(props) {\r\n  const { portfolioData, totalPortfolioValue } = props;\r\n  const portfolioRatio =\r\n    (getPortfolioValue(portfolioData) / totalPortfolioValue) * 100;\r\n  return (\r\n    <tr key={portfolioData.id}>\r\n      <td>{portfolioData.name}</td>\r\n      <td\r\n        className={classNames({\r\n          good: portfolioRatioIsGood(portfolioData, totalPortfolioValue),\r\n          bad: !portfolioRatioIsGood(portfolioData, totalPortfolioValue)\r\n        })}\r\n      >\r\n        {portfolioRatio.toFixed(2)}%\r\n      </td>\r\n      <td\r\n        className={classNames({\r\n          good: numberOfStocksIsGood(portfolioData),\r\n          bad: !numberOfStocksIsGood(portfolioData)\r\n        })}\r\n      >\r\n        {portfolioData.stocks.length}\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nfunction PortfolioDetails(props) {\r\n  const { portfolioData } = props;\r\n  const {\r\n    minRatioOfEachShareInPortfolio,\r\n    maxRatioOfEachShareInPortfolio\r\n  } = portfolioData.strategy;\r\n\r\n  return (\r\n    <div>\r\n      <h2>{portfolioData.name}</h2>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th width=\"10%\">ID</th>\r\n            <th width=\"30%\">Aktie</th>\r\n            <th width=\"20%\">Andel av portfölj</th>\r\n            <th widrth=\"30%\">Bransch</th>\r\n            <th widrth=\"10%\">P/E</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {portfolioData.stocks.map(stock => (\r\n            <StockRow\r\n              stock={stock}\r\n              portfolioValue={getPortfolioValue(portfolioData)}\r\n              minRatio={minRatioOfEachShareInPortfolio}\r\n              maxRatio={maxRatioOfEachShareInPortfolio}\r\n              key={stock.id}\r\n            />\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction stockRatioIsGood(stockRatio, minRatio, maxRatio) {\r\n  return stockRatio >= minRatio && stockRatio <= maxRatio;\r\n}\r\n\r\nfunction StockRow(props) {\r\n  const { stock, portfolioValue, minRatio, maxRatio } = props;\r\n\r\n  const stockRatio = (getStockValue(stock) / portfolioValue) * 100;\r\n  return (\r\n    <tr key={stock.id}>\r\n      <td>{stock.id}</td>\r\n      <td>{stock.name}</td>\r\n      <td\r\n        className={classNames({\r\n          good: stockRatioIsGood(stockRatio, minRatio, maxRatio),\r\n          bad: !stockRatioIsGood(stockRatio, minRatio, maxRatio)\r\n        })}\r\n      >\r\n        {stockRatio.toFixed(2)}%\r\n      </td>\r\n      <td>{stock.sector}</td>\r\n      <td>{stock[PRICE_EARNINGS_RATIO]}</td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nexport default Portfolio;\r\n","import React from \"react\";\r\nimport StockTable from \"../components/StockTable\";\r\nimport { getStocks } from \"../dataRetriever\";\r\n\r\nimport { getAllOwnedStocks } from \"../Portfolio/portfolioUtils\";\r\nimport {\r\n  OPERATING_MARGIN,\r\n  PRICE_EARNINGS_RATIO,\r\n  PRICE_SALES_RATIO,\r\n  DIRECT_YIELD,\r\n  NUMBER_OF_EMPLOYEES,\r\n  REVENUE,\r\n  REVENUE_PER_EMPLOYEE,\r\n  TOTAL_ASSETS,\r\n  EARNINGS_PER_SHARE,\r\n  PRICE_BOOK_VALUE,\r\n  SOLIDITY,\r\n  MARKET_CAP,\r\n  NET_EARNINGS,\r\n  EBIT\r\n} from \"../constants\";\r\n\r\nclass Weapons extends React.Component {\r\n  state = {\r\n    stocks: [],\r\n    ownedStocks: [],\r\n    error: null,\r\n    sortKey: PRICE_EARNINGS_RATIO,\r\n    columnsToShow: [\r\n      PRICE_EARNINGS_RATIO,\r\n      PRICE_SALES_RATIO,\r\n      DIRECT_YIELD,\r\n      NUMBER_OF_EMPLOYEES,\r\n      REVENUE,\r\n      REVENUE_PER_EMPLOYEE,\r\n      OPERATING_MARGIN,\r\n      TOTAL_ASSETS,\r\n      PRICE_BOOK_VALUE,\r\n      SOLIDITY,\r\n      MARKET_CAP\r\n    ]\r\n  };\r\n\r\n  componentDidMount() {\r\n    getStocks(\"weapons\")\r\n      .then(stocks => {\r\n        this.setState({\r\n          stocks: stocks\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n        this.setState({\r\n          error: err.message\r\n        });\r\n      });\r\n\r\n    getAllOwnedStocks().then(ownedStocks => {\r\n      this.setState({\r\n        ownedStocks: ownedStocks\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error != null) {\r\n      return <p>{this.state.error}</p>;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h1>Vapen</h1>\r\n        <StockTable\r\n          stocks={this.state.stocks}\r\n          ownedStocks={this.state.ownedStocks}\r\n          sortKey={this.state.sortKey}\r\n          onSort={sortKey => {\r\n            this.setState({ sortKey: sortKey });\r\n          }}\r\n          columnsToShow={this.state.columnsToShow}\r\n          showSingleStock={this.props.showSingleStock}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Weapons;\r\n","const rp = require(\"request-promise-native\");\n\nexport function saveStockData(id, data) {\n  console.log(data);\n  return new Promise((resolve, reject) => {\n    rp({\n      method: \"PUT\",\n      uri: `https://bissenisse.duckdns.org:443/stock/${id}`,\n      body: data,\n      json: true\n    }).then(returnData => {\n      resolve(returnData);\n    });\n  });\n}\n\nexport function getStockData(id) {\n  return new Promise((resolve, reject) => {\n    rp({\n      uri: `https://bissenisse.duckdns.org:443/stock/${id}`\n    }).then(returnData => {\n      const parsedData = JSON.parse(returnData);\n      console.log(parsedData);\n      resolve(parsedData);\n    });\n  });\n}\n","import React from \"react\";\nimport StockTable from \"../components/StockTable\";\n\nimport {\n  PRICE_EARNINGS_RATIO,\n  ANNUAL_REPORTS_TABLE,\n  INTERIM_REPORTS_TABLE,\n  MILLION,\n  BILLION,\n  THOUSAND\n} from \"../constants\";\nimport { saveStockData, getStockData } from \"./backend\";\n\nclass SingleStock extends React.Component {\n  state = {\n    stocksDetails: null,\n    error: null,\n    sortKey: PRICE_EARNINGS_RATIO\n  };\n\n  componentDidMount() {\n    getStockData(this.props.id).then(data => {\n      this.setState({\n        stockDetails: data\n      });\n    });\n  }\n\n  renderAnnualReports() {\n    const { stockDetails } = this.state;\n\n    if (!stockDetails.annualReports) {\n      return <div></div>;\n    }\n    return (\n      <div>\n        <h2>Årsrapporter</h2>\n        <StockTable\n          type={ANNUAL_REPORTS_TABLE}\n          stocks={stockDetails.annualReports}\n          ownedStocks={[]}\n          columnsToShow={this.props.columnsToShow}\n        />\n      </div>\n    );\n  }\n\n  renderInterimReports() {\n    const { stockDetails } = this.state;\n\n    if (!stockDetails.interimReports) {\n      return <div></div>;\n    }\n    return (\n      <div>\n        <h2>Kvartalsrapporter</h2>\n        <StockTable\n          type={INTERIM_REPORTS_TABLE}\n          stocks={stockDetails.interimReports}\n          ownedStocks={[]}\n          columnsToShow={this.props.columnsToShow}\n        />\n      </div>\n    );\n  }\n\n  renderInputSection() {\n    if (!this.props.id) {\n      return <div />;\n    }\n    return (\n      <div>\n        <InputSection\n          id={this.props.id}\n          stockDetails={this.state.stockDetails}\n        />\n      </div>\n    );\n  }\n\n  render() {\n    if (this.state.error != null) {\n      return <p>{this.state.error}</p>;\n    }\n\n    const { stockDetails } = this.state;\n\n    if (!stockDetails) {\n      return <div />;\n    }\n\n    return (\n      <div>\n        <h1>{stockDetails.name}</h1>\n\n        {this.renderAnnualReports()}\n        {this.renderInterimReports()}\n\n        {this.renderInputSection()}\n      </div>\n    );\n  }\n}\n\nexport default SingleStock;\n\nclass InputSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currency: \"SEK\",\n      multiplier: \"NONE\",\n      period: \"YEAR\",\n      year: 2020,\n      revenue: 0,\n      earningsBeforeInterestAndTax: 0,\n      netEarnings: 0,\n      totalAssets: 0,\n      totalEquity: 0,\n      totalDebt: 0,\n      numberOfShares: 0,\n      numberOfEmployees: 0\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  multiply(value) {\n    if (!this.state.multiplier || this.state.multiplier === \"\") {\n      return value * 1;\n    }\n    switch (this.state.multiplier) {\n      case \"MILLION\":\n        return value * MILLION;\n      case \"BILLION\":\n        return value * BILLION;\n      case \"THOUSAND\":\n        return value * THOUSAND;\n      case \"NONE\":\n        return value * 1;\n      default:\n        return value * 1;\n    }\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    // Multiply by 1 to ensure its a number, not a string\n    let report = {\n      currency: this.state.currency,\n      year: this.state.year * 1,\n      revenue: this.multiply(this.state.revenue),\n      earningsBeforeInterestAndTax: this.multiply(\n        this.state.earningsBeforeInterestAndTax\n      ),\n      netEarnings: this.multiply(this.state.netEarnings),\n      numberOfShares: this.state.numberOfShares * 1,\n      numberOfEmployees: this.state.numberOfEmployees * 1\n    };\n\n    if (this.state.period !== \"YEAR\") {\n      report.period = this.state.period;\n    }\n\n    if (this.state.totalAssets !== 0) {\n      report.totalAssets = this.multiply(this.state.totalAssets);\n    }\n    if (this.state.totalEquity !== 0) {\n      report.totalEquity = this.multiply(this.state.totalEquity);\n    }\n    if (this.state.totalDebt !== 0) {\n      report.totalDebt = this.multiply(this.state.totalDebt);\n    }\n\n    let reqBody = this.props.stockDetails;\n\n    if (!reqBody.annualReports || !Array.isArray(reqBody.annualReports)) {\n      reqBody.annualReports = [];\n    }\n    if (!reqBody.interimReports || !Array.isArray(reqBody.interimReports)) {\n      reqBody.interimReports = [];\n    }\n\n    if (this.state.period === \"YEAR\") {\n      reqBody.annualReports = reqBody.annualReports\n        // Replace report if it already exists\n        .filter(r => r.year !== report.year);\n      reqBody.annualReports.push(report);\n    } else {\n      reqBody.interimReports = reqBody.interimReports\n        // Replace report if it already exists\n        .filter(r => r.year !== report.year || r.period !== report.period);\n      reqBody.interimReports.push(report);\n    }\n    saveStockData(this.props.id, reqBody);\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Lägg till rapport</h2>\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            År:\n            <input\n              name=\"year\"\n              type=\"number\"\n              checked={this.state.year}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <br />\n          <label>\n            Kvartal:\n            <select\n              name=\"period\"\n              value={this.state.period}\n              onChange={this.handleInputChange}\n            >\n              <option value=\"YEAR\">Helår</option>\n              <option value=\"Q1\">Q1</option>\n              <option value=\"Q2\">Q2</option>\n              <option value=\"Q3\">Q3</option>\n              <option value=\"Q4\">Q4</option>\n            </select>\n          </label>\n          <br />\n          <h3>Räkenskaper</h3>\n          <label>\n            Valuta:\n            <select\n              name=\"multiplier\"\n              value={this.state.multiplier}\n              onChange={this.handleInputChange}\n            >\n              <option value=\"NONE\"></option>\n              <option value=\"THOUSAND\">Tusen</option>\n              <option value=\"MILLION\">Miljoner</option>\n              <option value=\"BILLION\">Miljarder</option>\n            </select>\n            <select\n              name=\"currency\"\n              value={this.state.currency}\n              onChange={this.handleInputChange}\n            >\n              <option value=\"SEK\">SEK</option>\n              <option value=\"EUR\">EUR</option>\n              <option value=\"USD\">USD</option>\n              <option value=\"DKK\">DKK</option>\n            </select>\n          </label>\n          <br />\n          <label>\n            Omsättning (revenue):\n            <input\n              name=\"revenue\"\n              type=\"number\"\n              value={this.state.revenue}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <br />\n\n          <label>\n            EBIT:\n            <input\n              name=\"earningsBeforeInterestAndTax\"\n              type=\"number\"\n              value={this.state.earningsBeforeInterestAndTax}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <br />\n\n          <label>\n            Vinst (Net earnings):\n            <input\n              name=\"netEarnings\"\n              type=\"number\"\n              value={this.state.netEarnings}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <br />\n\n          <label>\n            Tillgångar (Total assets):\n            <input\n              name=\"totalAssets\"\n              type=\"number\"\n              value={this.state.totalAssets}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <br />\n\n          <label>\n            Eget kapital (Total equity):\n            <input\n              name=\"totalEquity\"\n              type=\"number\"\n              value={this.state.totalEquity}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <br />\n\n          <label>\n            Skuld (Total debt):\n            <input\n              name=\"totalDebt\"\n              type=\"number\"\n              value={this.state.totalDebt}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <br />\n\n          <h3>Annan info</h3>\n          <label>\n            Antal anställda:\n            <input\n              name=\"numberOfEmployees\"\n              type=\"number\"\n              value={this.state.numberOfEmployees}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <label>\n            Antal aktier:\n            <input\n              name=\"numberOfShares\"\n              type=\"number\"\n              value={this.state.numberOfShares}\n              onChange={this.handleInputChange}\n            />\n          </label>\n\n          <br />\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\r\nimport StockTable from \"../components/StockTable\";\r\nimport { getStocks } from \"../dataRetriever\";\r\n\r\nimport { getAllOwnedStocks } from \"../Portfolio/portfolioUtils\";\r\nimport {\r\n  OPERATING_MARGIN,\r\n  PRICE_EARNINGS_RATIO,\r\n  PRICE_SALES_RATIO,\r\n  DIRECT_YIELD,\r\n  NUMBER_OF_EMPLOYEES,\r\n  REVENUE,\r\n  REVENUE_PER_EMPLOYEE,\r\n  TOTAL_ASSETS,\r\n  EARNINGS_PER_SHARE,\r\n  PRICE_BOOK_VALUE,\r\n  SOLIDITY,\r\n  MARKET_CAP,\r\n  NET_EARNINGS,\r\n  EBIT\r\n} from \"../constants\";\r\n\r\nclass Industry extends React.Component {\r\n  state = {\r\n    stocks: [],\r\n    ownedStocks: [],\r\n    error: null,\r\n    sortKey: PRICE_EARNINGS_RATIO,\r\n    columnsToShow: [\r\n      PRICE_EARNINGS_RATIO,\r\n      PRICE_SALES_RATIO,\r\n      DIRECT_YIELD,\r\n      NUMBER_OF_EMPLOYEES,\r\n      REVENUE,\r\n      REVENUE_PER_EMPLOYEE,\r\n      OPERATING_MARGIN,\r\n      TOTAL_ASSETS,\r\n      PRICE_BOOK_VALUE,\r\n      SOLIDITY,\r\n      MARKET_CAP\r\n    ]\r\n  };\r\n\r\n  componentDidMount() {\r\n    getStocks(\"industry\")\r\n      .then(stocks => {\r\n        this.setState({\r\n          stocks: stocks\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n        this.setState({\r\n          error: err.message\r\n        });\r\n      });\r\n\r\n    getAllOwnedStocks().then(ownedStocks => {\r\n      this.setState({\r\n        ownedStocks: ownedStocks\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error != null) {\r\n      return <p>{this.state.error}</p>;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h1>Verkstad</h1>\r\n        <StockTable\r\n          stocks={this.state.stocks}\r\n          ownedStocks={this.state.ownedStocks}\r\n          sortKey={this.state.sortKey}\r\n          onSort={sortKey => {\r\n            this.setState({ sortKey: sortKey });\r\n          }}\r\n          // columnsToShow={this.state.columnsToShow}\r\n          showSingleStock={this.props.showSingleStock}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Industry;\r\n","import React from \"react\";\r\nimport StockTable from \"../components/StockTable\";\r\nimport { getStocks } from \"../dataRetriever\";\r\n\r\nimport { getAllOwnedStocks } from \"../Portfolio/portfolioUtils\";\r\nimport { PRICE_EARNINGS_RATIO, DIRECT_YIELD, VOLATILITY } from \"../constants\";\r\n\r\nclass Forest extends React.Component {\r\n  state = {\r\n    stocks: [],\r\n    ownedStocks: [],\r\n    error: null,\r\n    sortKey: PRICE_EARNINGS_RATIO,\r\n    columnsToShow: [PRICE_EARNINGS_RATIO, DIRECT_YIELD, VOLATILITY]\r\n  };\r\n\r\n  componentDidMount() {\r\n    getStocks(\"forest\")\r\n      .then(stocks => {\r\n        this.setState({\r\n          stocks: stocks\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n        this.setState({\r\n          error: err.message\r\n        });\r\n      });\r\n\r\n    getAllOwnedStocks().then(ownedStocks => {\r\n      this.setState({\r\n        ownedStocks: ownedStocks\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error != null) {\r\n      return <p>{this.state.error}</p>;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h1>Skog</h1>\r\n        <StockTable\r\n          stocks={this.state.stocks}\r\n          ownedStocks={this.state.ownedStocks}\r\n          sortKey={this.state.sortKey}\r\n          onSort={sortKey => {\r\n            this.setState({ sortKey: sortKey });\r\n          }}\r\n          columnsToShow={this.state.columnsToShow}\r\n          showSingleStock={this.props.showSingleStock}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Forest;\r\n","import React from \"react\";\r\nimport StockTable from \"../components/StockTable\";\r\nimport { getStocks } from \"../dataRetriever\";\r\n\r\nimport { getAllOwnedStocks } from \"../Portfolio/portfolioUtils\";\r\nimport {\r\n  PRICE_EARNINGS_RATIO,\r\n  DIRECT_YIELD,\r\n  TOTAL_ASSETS,\r\n  EARNINGS_PER_SHARE,\r\n  PRICE_BOOK_VALUE,\r\n  SOLIDITY,\r\n  MARKET_CAP,\r\n  NET_EARNINGS,\r\n  EBIT\r\n} from \"../constants\";\r\n\r\nclass BlueChip extends React.Component {\r\n  state = {\r\n    stocks: [],\r\n    ownedStocks: [],\r\n    error: null,\r\n    sortKey: \"priceEarningsRatio\",\r\n    columnsToShow: [\r\n      PRICE_EARNINGS_RATIO,\r\n      DIRECT_YIELD,\r\n      NET_EARNINGS,\r\n      EBIT,\r\n      EARNINGS_PER_SHARE,\r\n      TOTAL_ASSETS,\r\n      PRICE_BOOK_VALUE,\r\n      SOLIDITY,\r\n      MARKET_CAP\r\n    ]\r\n  };\r\n\r\n  componentDidMount() {\r\n    getStocks(\"invest\")\r\n      .then(stocks => {\r\n        this.setState({\r\n          stocks: stocks\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n        this.setState({\r\n          error: err.message\r\n        });\r\n      });\r\n\r\n    getAllOwnedStocks().then(ownedStocks => {\r\n      this.setState({\r\n        ownedStocks: ownedStocks\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error != null) {\r\n      return <p>{this.state.error}</p>;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h1>Investment</h1>\r\n        <StockTable\r\n          stocks={this.state.stocks}\r\n          ownedStocks={this.state.ownedStocks}\r\n          sortKey={this.state.sortKey}\r\n          onSort={sortKey => {\r\n            this.setState({ sortKey: sortKey });\r\n          }}\r\n          columnsToShow={this.state.columnsToShow}\r\n          showSingleStock={this.props.showSingleStock}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BlueChip;\r\n","import React from \"react\";\r\nimport StockTable from \"../components/StockTable\";\r\nimport { getStocks } from \"../dataRetriever\";\r\n\r\nimport { getAllOwnedStocks } from \"../Portfolio/portfolioUtils\";\r\n\r\nclass BlueChip extends React.Component {\r\n  state = {\r\n    stocks: [],\r\n    ownedStocks: [],\r\n    error: null,\r\n    sortKey: \"priceEarningsRatio\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    getStocks(\"realEstate\")\r\n      .then(stocks => {\r\n        this.setState({\r\n          stocks: stocks\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n        this.setState({\r\n          error: err.message\r\n        });\r\n      });\r\n\r\n    getAllOwnedStocks().then(ownedStocks => {\r\n      this.setState({\r\n        ownedStocks: ownedStocks\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error != null) {\r\n      return <p>{this.state.error}</p>;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h1>Fastighetsbolag</h1>\r\n        <StockTable\r\n          stocks={this.state.stocks}\r\n          ownedStocks={this.state.ownedStocks}\r\n          sortKey={this.state.sortKey}\r\n          onSort={sortKey => {\r\n            this.setState({ sortKey: sortKey });\r\n          }}\r\n          showSingleStock={this.props.showSingleStock}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BlueChip;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport BestYield from \"../BestYield/BestYield\";\nimport BlueChip from \"../BlueChip/BlueChip\";\nimport Portfolio from \"../Portfolio/Portfolio\";\nimport Weapons from \"../Weapons/Weapons\";\nimport SingleStock from \"../SingleStock/SingleStock\";\nimport Industry from \"../Industry/Industry\";\nimport Forest from \"../Forest/Forest\";\nimport Invest from \"../Invest/Invest\";\nimport RealEstate from \"../RealEstate/RealEstate\";\n\nconst portfolioPage = \"PORTFOLIO_PAGE\";\nconst bestYieldPage = \"BEST_YIELD_PAGE\";\nconst blueChipPage = \"BLUE_CHIP_PAGE\";\nconst weaponsPage = \"WEAPONS_PAGE\";\nconst industryPage = \"INDUSTRY_PAGE\";\nconst forestPage = \"FOREST_PAGE\";\nconst investPage = \"INVEST_PAGE\";\nconst realEstatePage = \"REAL_ESTATE_PAGE\";\n\nconst classNames = require(\"classnames\");\n\nclass App extends React.Component {\n  state = {\n    activePage: bestYieldPage,\n    activeStock: null,\n    columnsToShow: []\n  };\n\n  componentDidMount() {\n    require(\"dotenv\").config();\n  }\n\n  renderActivePage() {\n    if (this.state.activeStock) {\n      return (\n        <SingleStock\n          id={this.state.activeStock}\n          columnsToShow={this.state.columnsToShow}\n        />\n      );\n    }\n\n    switch (this.state.activePage) {\n      case portfolioPage:\n        return <Portfolio showSingleStock={this.showSingleStock.bind(this)} />;\n      case bestYieldPage:\n        return <BestYield showSingleStock={this.showSingleStock.bind(this)} />;\n      case blueChipPage:\n        return <BlueChip showSingleStock={this.showSingleStock.bind(this)} />;\n      case weaponsPage:\n        return <Weapons showSingleStock={this.showSingleStock.bind(this)} />;\n      case industryPage:\n        return <Industry showSingleStock={this.showSingleStock.bind(this)} />;\n      case forestPage:\n        return <Forest showSingleStock={this.showSingleStock.bind(this)} />;\n      case investPage:\n        return <Invest showSingleStock={this.showSingleStock.bind(this)} />;\n      case realEstatePage:\n        return <RealEstate showSingleStock={this.showSingleStock.bind(this)} />;\n      default:\n        return <div></div>;\n    }\n  }\n\n  renderButton(title, page) {\n    return (\n      <button\n        onClick={() => {\n          this.setState({ activePage: page, activeStock: null });\n        }}\n        className={classNames({\n          active: this.state.activePage === page\n        })}\n      >\n        {title}\n      </button>\n    );\n  }\n\n  showSingleStock(id, columnsToShow) {\n    this.setState({ activeStock: id, columnsToShow: columnsToShow });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>BisseNisse</h1>\n        {this.renderButton(\"Portfolio\", portfolioPage)}\n        {this.renderButton(\"Utdelningsaktier\", bestYieldPage)}\n        {this.renderButton(\"Basaktier\", blueChipPage)}\n        {this.renderButton(\"Verkstad\", industryPage)}\n        {this.renderButton(\"Skog\", forestPage)}\n        {this.renderButton(\"Investment\", investPage)}\n        {this.renderButton(\"Fastigheter\", realEstatePage)}\n        {this.renderButton(\"Vapen\", weaponsPage)}\n        {this.renderActivePage()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}