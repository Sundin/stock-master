{"version":3,"sources":["constants.js","api/formatAllFields.js","components/stockIndicators.js","translate.js","components/StockTable.js","stockUtils.js","dataRetriever.js","avanza.js","Portfolio/portfolioData.js","Portfolio/dataRetriever.js","Portfolio/portfolioUtils.js","BestYield/BestYield.js","BlueChip/BlueChip.js","Portfolio/Portfolio.js","Weapons/Weapons.js","SingleStock/backend.js","SingleStock/SingleStock.js","Industry/Industry.js","Forest/Forest.js","Invest/Invest.js","RealEstate/RealEstate.js","Bank/Bank.js","App/App.js","serviceWorker.js","index.js"],"names":["exchangeRates","DKK","USD","BASE_URL","BILLION","MILLION","THOUSAND","OPERATING_MARGIN","PRICE_EARNINGS_RATIO","PRICE_SALES_RATIO","PRICE_BOOK_VALUE","DIRECT_YIELD","VOLATILITY","NUMBER_OF_EMPLOYEES","REVENUE","REVENUE_PER_EMPLOYEE","REVENUE_PER_SHARE","TOTAL_ASSETS","EARNINGS_PER_SHARE","NET_EARNINGS","NUMBER_OF_SHARES","TOTAL_EQUITY","TOTAL_DEBT","SOLIDITY","MARKET_CAP","YEAR","ID","LAST_PRICE","CURRENCY","EBIT","CHANGE_VALUES","ANNUAL_REPORTS_TABLE","INTERIM_REPORTS_TABLE","MULTIPLE_STOCKS_TABLE","require","formatAllFields","inputData","stockDetails","Object","keys","forEach","key","keyShouldBeFormatted","number","isNaN","returnValue","negative","toPrecision","x","parts","toString","split","replace","join","numberWithSpaces","toFixed","formatNumber","yieldIsGood","stockData","directYield","getYieldTarget","yieldIsVeryGood","peIsGood","priceEarningsRatio","peIsVeryGood","peIsVeryBad","tenYearsBondInterest","volatilityIsGood","volatility","volatilityIsVeryGood","averageOMXS30volatility","volatilityIsBad","volatilityIsVeryBad","translate","classNames","StockTable","props","stocks","ownedStocks","sortKey","columnsToShow","type","sort","a","b","width","tableType","getMainColumn","map","column","owned","stockId","found","stock","id","stockIsOwned","showSingleStock","Stock","this","year","period","className","href","onClick","e","handleClick","name","currency","changeValues","sign","renderMainColumn","getClassNames","renderStockData","React","Component","good","veryGood","veryBad","bad","defaultProps","rp","getStocks","category","Promise","resolve","reject","then","parsedData","JSON","parse","interimReports","report","annualReports","cachedStocks","getStock","lastPrice","console","error","convertToSEK","keyRatios","transformJson","basePortfolioStrategy","minShare","maxShare","minNumberOfStocks","maxNumberOfStocks","minRatioOfEachShareInPortfolio","maxRatioOfEachShareInPortfolio","portfolios","strategy","getPortfolios","promises","portfolio","push","returnData","getStockWithAmount","all","getStockValue","getStocksInPortfolio","getPortfolioValue","portfolioData","reduce","sum","portfolioRatioIsGood","totalPortfolioValue","portfolioRatio","numberOfStocksIsGood","length","amount","getAllOwnedStocks","concat","BestYield","state","setState","catch","err","message","BlueChip","onSort","PortfolioRow","PortfolioDetails","widrth","StockRow","portfolioValue","minRatio","maxRatio","stockRatioIsGood","stockRatio","sector","Portfolio","sectors","getSectors","sortedSectors","value","getTotalPortfolioValue","Weapons","SingleStock","stocksDetails","uri","data","renderAnnualReports","renderInterimReports","renderInputSection","InputSection","multiplier","revenue","earningsBeforeInterestAndTax","netEarnings","totalAssets","totalEquity","totalDebt","numberOfShares","numberOfEmployees","handleInputChange","bind","handleSubmit","event","target","checked","preventDefault","multiply","method","body","json","onSubmit","onChange","Industry","Forest","Bank","App","activePage","activeStock","Invest","RealEstate","title","page","active","renderButton","renderActivePage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2568f8cc.chunk.js","sourcesContent":["export const exchangeRates = {\n  DKK: 1.41,\n  USD: 9.42\n};\n\nexport const BASE_URL = \"https://bissenisse.duckdns.org:443\";\n\nexport const BILLION = 1000000000;\nexport const MILLION = 1000000;\nexport const THOUSAND = 1000;\n\nexport const OPERATING_MARGIN = \"operatingMargin\";\nexport const PRICE_EARNINGS_RATIO = \"priceEarningsRatio\";\nexport const PRICE_SALES_RATIO = \"priceSalesRatio\";\nexport const PRICE_BOOK_VALUE = \"priceBookValue\";\nexport const DIRECT_YIELD = \"directYield\";\nexport const VOLATILITY = \"volatility\";\nexport const NUMBER_OF_EMPLOYEES = \"numberOfEmployees\";\nexport const REVENUE = \"revenue\"; // = sales\nexport const REVENUE_PER_EMPLOYEE = \"revenuePerEmployee\";\nexport const REVENUE_PER_SHARE = \"revenuePerShare\";\nexport const TOTAL_ASSETS = \"totalAssets\";\nexport const EARNINGS_PER_SHARE = \"earningsPerShare\";\nexport const NET_EARNINGS = \"netEarnings\";\nexport const NUMBER_OF_SHARES = \"numberOfShares\";\nexport const TOTAL_EQUITY = \"totalEquity\"; // = eget kapital\nexport const TOTAL_DEBT = \"totalDebt\";\nexport const SOLIDITY = \"solidity\";\nexport const MARKET_CAP = \"marketCap\";\nexport const YEAR = \"year\";\nexport const ID = \"id\";\nexport const LAST_PRICE = \"lastPrice\";\nexport const CURRENCY = \"currency\";\nexport const EBIT = \"earningsBeforeInterestAndTax\";\nexport const CHANGE_VALUES = \"changeValues\";\n\nexport const ANNUAL_REPORTS_TABLE = \"annualReportsTable\";\nexport const INTERIM_REPORTS_TABLE = \"interimReportsTable\";\nexport const MULTIPLE_STOCKS_TABLE = \"multipleStocksTable\";\n","const { YEAR, BILLION, MILLION, THOUSAND } = require(\"../constants\");\n\nexport function formatAllFields(inputData) {\n  let stockDetails = { ...inputData };\n\n  Object.keys(stockDetails).forEach(key => {\n    if (keyShouldBeFormatted(key)) {\n      stockDetails[key] = formatNumber(stockDetails[key]);\n    }\n  });\n\n  return stockDetails;\n}\n\nfunction keyShouldBeFormatted(key) {\n  switch (key) {\n    case YEAR:\n      return false;\n    case \"_id\":\n      return false;\n    default:\n      return true;\n  }\n}\n\nfunction formatNumber(number) {\n  if (isNaN(number) || typeof number !== \"number\") {\n    return number;\n  }\n\n  let returnValue = \"\";\n  const negative = number < 0;\n  if (negative) {\n    number = number * -1;\n  }\n\n  if (number >= BILLION) {\n    returnValue = number.toPrecision(3) / BILLION + \" miljarder\";\n  } else if (number >= MILLION) {\n    returnValue = number.toPrecision(3) / MILLION + \" miljoner\";\n  } else if (number >= THOUSAND) {\n    returnValue = numberWithSpaces(number.toFixed(0));\n  } else {\n    returnValue = number.toPrecision(3).replace(\".00e+3\", \" 000\");\n  }\n\n  if (negative) {\n    returnValue = \"-\" + returnValue;\n  }\n\n  return returnValue;\n}\n\nfunction numberWithSpaces(x) {\n  var parts = x.toString().split(\".\");\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\n  return parts.join(\".\");\n}\n","export function yieldIsGood(stockData) {\r\n  const { directYield } = stockData;\r\n\r\n  return directYield > getYieldTarget();\r\n}\r\n\r\nexport function yieldIsVeryGood(stockData) {\r\n  const { directYield } = stockData;\r\n  return directYield > getYieldTarget() * 1.25;\r\n}\r\n\r\nexport function peIsGood(stockData) {\r\n  const { priceEarningsRatio, directYield } = stockData;\r\n\r\n  if (priceEarningsRatio <= 0) {\r\n    return false;\r\n  }\r\n\r\n  return 1 / (directYield / 100) >= priceEarningsRatio;\r\n}\r\n\r\nexport function peIsVeryGood(stockData) {\r\n  const { priceEarningsRatio, directYield } = stockData;\r\n  return (\r\n    peIsGood(stockData) && 1 / (directYield / 100) >= priceEarningsRatio * 2\r\n  );\r\n}\r\n\r\nexport function peIsVeryBad(stockData) {\r\n  const { priceEarningsRatio } = stockData;\r\n  return priceEarningsRatio <= 0;\r\n}\r\n\r\nfunction getYieldTarget() {\r\n  // TODO: get tenYearsBondInterest from some API?\r\n  const tenYearsBondInterest = -0.2;\r\n  const riskPremium = 5;\r\n  return tenYearsBondInterest + riskPremium;\r\n}\r\n\r\nconst averageOMXS30volatility = 21.6;\r\n\r\nexport function volatilityIsGood(stockData) {\r\n  const { volatility } = stockData;\r\n  return volatility <= averageOMXS30volatility * 0.75;\r\n}\r\n\r\nexport function volatilityIsVeryGood(stockData) {\r\n  const { volatility } = stockData;\r\n  return volatility <= averageOMXS30volatility * 0.5;\r\n}\r\n\r\nexport function volatilityIsBad(stockData) {\r\n  const { volatility } = stockData;\r\n  return volatility > averageOMXS30volatility * 1.25;\r\n}\r\n\r\nexport function volatilityIsVeryBad(stockData) {\r\n  const { volatility } = stockData;\r\n  return volatility > averageOMXS30volatility * 1.9;\r\n}\r\n","import {\n  OPERATING_MARGIN,\n  REVENUE_PER_SHARE,\n  REVENUE_PER_EMPLOYEE,\n  REVENUE,\n  NUMBER_OF_EMPLOYEES,\n  VOLATILITY,\n  DIRECT_YIELD,\n  PRICE_SALES_RATIO,\n  PRICE_EARNINGS_RATIO,\n  TOTAL_ASSETS,\n  EARNINGS_PER_SHARE,\n  PRICE_BOOK_VALUE,\n  SOLIDITY,\n  MARKET_CAP,\n  YEAR,\n  ID,\n  EBIT,\n  NET_EARNINGS\n} from \"./constants\";\n\nexport function translate(key) {\n  switch (key) {\n    case PRICE_EARNINGS_RATIO:\n      return \"P/E\";\n    case PRICE_SALES_RATIO:\n      return \"P/S\";\n    case DIRECT_YIELD:\n      return \"Direktavkastning (%)\";\n    case VOLATILITY:\n      return \"Volatilitet\";\n    case NUMBER_OF_EMPLOYEES:\n      return \"Anställda\";\n    case REVENUE:\n      return \"Omsättning\";\n    case REVENUE_PER_EMPLOYEE:\n      return \"Omsättning / anställd\";\n    case REVENUE_PER_SHARE:\n      return \"Omsättning / aktie\";\n    case OPERATING_MARGIN:\n      return \"Rörelsemarginal (%)\";\n    case TOTAL_ASSETS:\n      return \"Tillgångar\";\n    case EARNINGS_PER_SHARE:\n      return \"EPS\";\n    case PRICE_BOOK_VALUE:\n      return \"P/B\";\n    case SOLIDITY:\n      return \"Soliditet (%)\";\n    case MARKET_CAP:\n      return \"Börsvärde\";\n    case YEAR:\n      return \"År\";\n    case ID:\n      return \"ID\";\n    case EBIT:\n      return \"EBIT\";\n    case NET_EARNINGS:\n      return \"Vinst\";\n    default:\n      return \"\";\n  }\n}\n","import React from \"react\";\nimport {\n  yieldIsGood,\n  yieldIsVeryGood,\n  peIsGood,\n  peIsVeryGood,\n  volatilityIsGood,\n  volatilityIsBad,\n  volatilityIsVeryGood,\n  volatilityIsVeryBad,\n  peIsVeryBad\n} from \"./stockIndicators\";\nimport { stockIsOwned } from \"../stockUtils\";\nimport { translate } from \"../translate\";\nimport {\n  PRICE_EARNINGS_RATIO,\n  DIRECT_YIELD,\n  VOLATILITY,\n  ID,\n  ANNUAL_REPORTS_TABLE,\n  YEAR,\n  MULTIPLE_STOCKS_TABLE,\n  INTERIM_REPORTS_TABLE\n} from \"../constants\";\n\nconst classNames = require(\"classnames\");\n\nfunction StockTable(props) {\n  const { stocks, ownedStocks, sortKey, columnsToShow, type } = props;\n\n  if (sortKey) {\n    stocks.sort((a, b) => {\n      return b[sortKey] - a[sortKey];\n    });\n  }\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th width=\"40%\">{getMainColumn(type)}</th>\n          {columnsToShow.map(column => {\n            return (\n              <th width=\"15%\" key={column}>\n                {translate(column)}\n              </th>\n            );\n          })}\n        </tr>\n      </thead>\n      <tbody>\n        {stocks.map(stockData => {\n          const owned = stockIsOwned(stockData.id, ownedStocks);\n          return (\n            <Stock\n              stockData={stockData}\n              key={stockData.id}\n              owned={owned}\n              columnsToShow={columnsToShow}\n              showSingleStock={props.showSingleStock}\n              type={type}\n            />\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nfunction getMainColumn(tableType) {\n  switch (tableType) {\n    case ANNUAL_REPORTS_TABLE:\n      return translate(YEAR);\n    case INTERIM_REPORTS_TABLE:\n      return \"Period\";\n    default:\n      return \"Aktie\";\n  }\n}\n\nclass Stock extends React.Component {\n  handleClick() {\n    this.props.showSingleStock(\n      this.props.stockData.id,\n      this.props.columnsToShow\n    );\n  }\n\n  renderMainColumn() {\n    const { type, stockData, owned } = this.props;\n    switch (type) {\n      case ANNUAL_REPORTS_TABLE:\n        return <td>{stockData.year}</td>;\n      case INTERIM_REPORTS_TABLE:\n        return (\n          <td>\n            {stockData.year} {stockData.period}\n          </td>\n        );\n      default:\n        return (\n          <td\n            className={classNames({\n              owned: owned\n            })}\n          >\n            <a href=\"#\" onClick={e => this.handleClick(e)}>\n              {stockData.name}\n            </a>\n            {stockData.currency === \"SEK\"\n              ? \"\"\n              : \" (\" + stockData.currency + \")\"}\n          </td>\n        );\n    }\n  }\n\n  renderStockData(column) {\n    const { stockData, type } = this.props;\n    switch (type) {\n      case ANNUAL_REPORTS_TABLE:\n      case INTERIM_REPORTS_TABLE:\n        if (stockData.changeValues && stockData.changeValues[column]) {\n          const sign = stockData.changeValues[column] > 0 ? \"+\" : \"\";\n          return (\n            stockData[column] +\n            \" (\" +\n            sign +\n            stockData.changeValues[column] +\n            \"%)\"\n          );\n        }\n        return stockData[column];\n      default:\n        return stockData[column];\n    }\n  }\n\n  render() {\n    const { stockData, columnsToShow } = this.props;\n\n    return (\n      <tr key={stockData.id}>\n        {this.renderMainColumn()}\n        {columnsToShow.map(column => {\n          return (\n            <td\n              width=\"15%\"\n              key={column}\n              className={getClassNames(column, stockData)}\n            >\n              {this.renderStockData(column)}\n            </td>\n          );\n        })}\n      </tr>\n    );\n  }\n}\n\nfunction getClassNames(key, stockData) {\n  switch (key) {\n    case \"priceEarningsRatio\":\n      return classNames({\n        good: peIsGood(stockData),\n        veryGood: peIsVeryGood(stockData),\n        veryBad: peIsVeryBad(stockData)\n      });\n    case \"directYield\":\n      return classNames({\n        good: yieldIsGood(stockData),\n        veryGood: yieldIsVeryGood(stockData)\n      });\n    case \"volatility\":\n      return classNames({\n        good: volatilityIsGood(stockData),\n        veryGood: volatilityIsVeryGood(stockData),\n        bad: volatilityIsBad(stockData),\n        veryBad: volatilityIsVeryBad(stockData)\n      });\n    default:\n      return classNames({});\n  }\n}\n\nStockTable.defaultProps = {\n  type: MULTIPLE_STOCKS_TABLE,\n  columnsToShow: [ID, PRICE_EARNINGS_RATIO, DIRECT_YIELD, VOLATILITY]\n};\n\nexport default StockTable;\n","export function stockIsOwned(stockId, ownedStocks) {\n  let found = false;\n  ownedStocks.forEach(stock => {\n    if (stock.id === stockId) {\n      found = true;\n      return;\n    }\n  });\n  return found;\n}\n","import { BASE_URL } from \"./constants\";\n\nconst rp = require(\"request-promise-native\");\nconst { formatAllFields } = require(\"./api/formatAllFields\");\n\nexport function getStocks(category) {\n  return new Promise((resolve, reject) => {\n    rp(`${BASE_URL}/category/${category}`).then(stockData => {\n      let parsedData = JSON.parse(stockData);\n      parsedData.stocks = parsedData.stocks.map(stock => {\n        if (stock.interimReports) {\n          stock.interimReports = stock.interimReports.map(report =>\n            formatAllFields(report)\n          );\n        }\n\n        if (stock.annualReports) {\n          stock.annualReports = stock.annualReports.map(report =>\n            formatAllFields(report)\n          );\n        }\n\n        return formatAllFields(stock);\n      });\n\n      resolve(parsedData.stocks);\n    });\n  });\n}\n","import { exchangeRates } from \"./constants\";\n\nvar rp = require(\"request-promise-native\");\n\nlet cachedStocks = {};\n\nexport function getStock(id) {\n  if (cachedStocks[id] != null) {\n    return Promise.resolve(cachedStocks[id]);\n  }\n\n  return new Promise((resolve, reject) => {\n    rp(\"https://avanza.se/_mobile/market/stock/\" + id).then(stockData => {\n      let parsedData = JSON.parse(stockData);\n\n      parsedData = transformJson(parsedData);\n      parsedData = convertToSEK(parsedData);\n\n      cachedStocks[parsedData.id] = parsedData;\n      resolve(parsedData);\n    });\n  });\n}\n\nexport function getStockWithAmount(stock) {\n  return new Promise((resolve, reject) => {\n    getStock(stock.id).then(stockData => {\n      resolve({ ...stock, ...stockData });\n    });\n  });\n}\n\n// Convert stock data json into a format that's easier to use\nfunction transformJson(stockData) {\n  // Add more fields from stockData here if necessary\n  return {\n    name: stockData.name,\n    id: stockData.id,\n    directYield: stockData.keyRatios.directYield,\n    priceEarningsRatio: stockData.keyRatios.priceEarningsRatio,\n    volatility: stockData.keyRatios.volatility,\n    currency: stockData.currency,\n    lastPrice: stockData.lastPrice\n  };\n}\n\n// TODO: Get currency exchange rates from some API\nfunction convertToSEK(stockData) {\n  switch (stockData.currency) {\n    case \"SEK\":\n      return stockData;\n    case \"USD\":\n      return {\n        ...stockData,\n        currency: \"SEK\",\n        lastPrice: stockData.lastPrice * exchangeRates.USD\n      };\n    case \"DKK\":\n      return {\n        ...stockData,\n        currency: \"SEK\",\n        lastPrice: stockData.lastPrice * exchangeRates.DKK\n      };\n    default:\n      console.error(\"Missing currency: \" + stockData.currency);\n      return stockData;\n  }\n}\n","const basePortfolioStrategy = {\n  minShare: 20,\n  maxShare: 30,\n  minNumberOfStocks: 8,\n  maxNumberOfStocks: 12,\n  minRatioOfEachShareInPortfolio: 5,\n  maxRatioOfEachShareInPortfolio: 30\n};\n\nconst portfolios = [\n  {\n    id: \"1\",\n    name: \"Basportföljen\",\n    stocks: [\n      // {\n      //   id: \"5465\",\n      //   name: \"Axfood\",\n      //   amount: 10,\n      //   sector: \"Konsumentvaror\"\n      // }\n    ],\n    strategy: {\n      ...basePortfolioStrategy,\n      minShare: 40,\n      maxShare: 60\n    }\n  },\n  {\n    id: \"2\",\n    name: \"Raketportföljen\",\n    stocks: [\n      // {\n      //   id: \"3323\",\n      //   name: \"Apple Inc\",\n      //   amount: 1,\n      //   sector: \"Teknik\"\n      // }\n    ],\n    strategy: basePortfolioStrategy\n  }\n];\n\nexport default portfolios;\n","import { getStockWithAmount } from \"../avanza\";\n// import portfolios from \"../data/portfolioData\";\nimport portfolios from \"./portfolioData\";\nimport { getStockValue } from \"./portfolioUtils\";\n\nexport function getPortfolios() {\n  return new Promise((resolve, reject) => {\n    let promises = [];\n    portfolios.forEach(portfolio => {\n      promises.push(getStocksInPortfolio(portfolio));\n    });\n    Promise.all(promises).then(returnData => {\n      resolve(returnData);\n    });\n  });\n}\n\nfunction getStocksInPortfolio(portfolio) {\n  let returnData = portfolio;\n  return new Promise((resolve, reject) => {\n    let promises = [];\n    portfolio.stocks.forEach(stock => {\n      promises.push(getStockWithAmount(stock));\n    });\n    Promise.all(promises).then(stocks => {\n      returnData.stocks = stocks.sort((a, b) => {\n        return getStockValue(b) - getStockValue(a);\n      });\n      resolve(returnData);\n    });\n  });\n}\n","import { getPortfolios } from \"./dataRetriever\";\n\nexport function getPortfolioValue(portfolioData) {\n  return portfolioData.stocks.reduce((sum, stock) => {\n    return sum + getStockValue(stock);\n  }, 0);\n}\n\nexport function portfolioRatioIsGood(portfolioData, totalPortfolioValue) {\n  const portfolioRatio =\n    (getPortfolioValue(portfolioData) / totalPortfolioValue) * 100;\n  return (\n    portfolioRatio >= portfolioData.strategy.minShare &&\n    portfolioRatio <= portfolioData.strategy.maxShare\n  );\n}\n\nexport function numberOfStocksIsGood(portfolioData) {\n  return (\n    portfolioData.stocks.length >= portfolioData.strategy.minNumberOfStocks &&\n    portfolioData.stocks.length <= portfolioData.strategy.maxNumberOfStocks\n  );\n}\n\nexport function getStockValue(stock) {\n  return stock.amount * stock.lastPrice;\n}\n\nexport function getAllOwnedStocks() {\n  return new Promise((resolve, reject) => {\n    let stocks = [];\n    getPortfolios().then(portfolios => {\n      portfolios.forEach(portfolio => {\n        stocks = stocks.concat(portfolio.stocks);\n      });\n      resolve(stocks);\n    });\n  });\n}\n","import React from \"react\";\r\nimport StockTable from \"../components/StockTable\";\r\nimport { getStocks } from \"../dataRetriever\";\r\n\r\nimport { getAllOwnedStocks } from \"../Portfolio/portfolioUtils\";\r\n\r\nclass BestYield extends React.Component {\r\n  state = {\r\n    stocks: [],\r\n    ownedStocks: [],\r\n    error: null,\r\n    sortKey: \"directYield\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    getStocks(\"best-yield\")\r\n      .then(stocks => {\r\n        this.setState({\r\n          stocks: stocks\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n        this.setState({\r\n          error: err.message\r\n        });\r\n      });\r\n\r\n    getAllOwnedStocks().then(ownedStocks => {\r\n      this.setState({\r\n        ownedStocks: ownedStocks\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error != null) {\r\n      return <p>{this.state.error}</p>;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h1>Intressanta utdelningsaktier</h1>\r\n        <StockTable\r\n          stocks={this.state.stocks}\r\n          ownedStocks={this.state.ownedStocks}\r\n          sortKey={this.state.sortKey}\r\n          showSingleStock={this.props.showSingleStock}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BestYield;\r\n","import React from \"react\";\r\nimport StockTable from \"../components/StockTable\";\r\nimport { getStocks } from \"../dataRetriever\";\r\n\r\nimport { getAllOwnedStocks } from \"../Portfolio/portfolioUtils\";\r\n\r\nclass BlueChip extends React.Component {\r\n  state = {\r\n    stocks: [],\r\n    ownedStocks: [],\r\n    error: null,\r\n    sortKey: \"priceEarningsRatio\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    getStocks(\"blue-chip\")\r\n      .then(stocks => {\r\n        this.setState({\r\n          stocks: stocks\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n        this.setState({\r\n          error: err.message\r\n        });\r\n      });\r\n\r\n    getAllOwnedStocks().then(ownedStocks => {\r\n      this.setState({\r\n        ownedStocks: ownedStocks\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error != null) {\r\n      return <p>{this.state.error}</p>;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h1>Intressanta basaktier</h1>\r\n        <StockTable\r\n          stocks={this.state.stocks}\r\n          ownedStocks={this.state.ownedStocks}\r\n          sortKey={this.state.sortKey}\r\n          onSort={sortKey => {\r\n            this.setState({ sortKey: sortKey });\r\n          }}\r\n          showSingleStock={this.props.showSingleStock}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BlueChip;\r\n","import React from \"react\";\r\nimport { getPortfolios } from \"./dataRetriever\";\r\nimport {\r\n  getPortfolioValue,\r\n  portfolioRatioIsGood,\r\n  numberOfStocksIsGood,\r\n  getStockValue\r\n} from \"./portfolioUtils\";\r\nimport { PRICE_EARNINGS_RATIO } from \"../constants\";\r\n\r\nvar classNames = require(\"classnames\");\r\n\r\nclass Portfolio extends React.Component {\r\n  state = {\r\n    portfolios: [],\r\n    error: null\r\n  };\r\n\r\n  // componentDidMount() {\r\n  //   getPortfolios()\r\n  //     .then(portfolios => {\r\n  //       this.setState({\r\n  //         portfolios: portfolios\r\n  //       });\r\n  //     })\r\n  //     .catch(err => {\r\n  //       console.error(err);\r\n  //       this.setState({\r\n  //         error: err.message\r\n  //       });\r\n  //     });\r\n  // }\r\n\r\n  getTotalPortfolioValue() {\r\n    return this.state.portfolios.reduce((sum, portfolio) => {\r\n      return sum + getPortfolioValue(portfolio);\r\n    }, 0);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error != null) {\r\n      return <p>{this.state.error}</p>;\r\n    }\r\n\r\n    const sectors = getSectors(this.state.portfolios);\r\n    let sortedSectors = [];\r\n    Object.keys(sectors).forEach(sector => {\r\n      sortedSectors.push({\r\n        name: sector,\r\n        value: (sectors[sector] / this.getTotalPortfolioValue()) * 100\r\n      });\r\n    });\r\n    sortedSectors = sortedSectors.sort(function(a, b) {\r\n      return a.value < b.value ? 1 : b.value < a.value ? -1 : 0;\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <h1>Alla portföljer</h1>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th width=\"40%\">Portfölj</th>\r\n              <th width=\"30%\">Andel</th>\r\n              <th width=\"30%\">Antal innehav</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.state.portfolios.map(portfolioData => (\r\n              <PortfolioRow\r\n                portfolioData={portfolioData}\r\n                totalPortfolioValue={this.getTotalPortfolioValue()}\r\n                key={portfolioData.id}\r\n              />\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n\r\n        <h2>Branschfördelning</h2>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th width=\"40%\">Bransch</th>\r\n              <th width=\"30%\">Andel</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {sortedSectors.map(sector => (\r\n              <tr>\r\n                <td>{sector.name}</td>\r\n                <td>{sector.value.toFixed(2)}%</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n\r\n        {this.state.portfolios.map(portfolioData => (\r\n          <PortfolioDetails\r\n            portfolioData={portfolioData}\r\n            key={portfolioData.id}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction getSectors(portfolios) {\r\n  let sectors = {};\r\n  portfolios.forEach(portfolioData => {\r\n    portfolioData.stocks.forEach(stock => {\r\n      if (!sectors[stock.sector]) {\r\n        sectors[stock.sector] = 0;\r\n      }\r\n      sectors[stock.sector] += stock.amount * stock.lastPrice;\r\n    });\r\n  });\r\n  return sectors;\r\n}\r\n\r\nfunction PortfolioRow(props) {\r\n  const { portfolioData, totalPortfolioValue } = props;\r\n  const portfolioRatio =\r\n    (getPortfolioValue(portfolioData) / totalPortfolioValue) * 100;\r\n  return (\r\n    <tr key={portfolioData.id}>\r\n      <td>{portfolioData.name}</td>\r\n      <td\r\n        className={classNames({\r\n          good: portfolioRatioIsGood(portfolioData, totalPortfolioValue),\r\n          bad: !portfolioRatioIsGood(portfolioData, totalPortfolioValue)\r\n        })}\r\n      >\r\n        {portfolioRatio.toFixed(2)}%\r\n      </td>\r\n      <td\r\n        className={classNames({\r\n          good: numberOfStocksIsGood(portfolioData),\r\n          bad: !numberOfStocksIsGood(portfolioData)\r\n        })}\r\n      >\r\n        {portfolioData.stocks.length}\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nfunction PortfolioDetails(props) {\r\n  const { portfolioData } = props;\r\n  const {\r\n    minRatioOfEachShareInPortfolio,\r\n    maxRatioOfEachShareInPortfolio\r\n  } = portfolioData.strategy;\r\n\r\n  return (\r\n    <div>\r\n      <h2>{portfolioData.name}</h2>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th width=\"10%\">ID</th>\r\n            <th width=\"30%\">Aktie</th>\r\n            <th width=\"20%\">Andel av portfölj</th>\r\n            <th widrth=\"30%\">Bransch</th>\r\n            <th widrth=\"10%\">P/E</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {portfolioData.stocks.map(stock => (\r\n            <StockRow\r\n              stock={stock}\r\n              portfolioValue={getPortfolioValue(portfolioData)}\r\n              minRatio={minRatioOfEachShareInPortfolio}\r\n              maxRatio={maxRatioOfEachShareInPortfolio}\r\n              key={stock.id}\r\n            />\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction stockRatioIsGood(stockRatio, minRatio, maxRatio) {\r\n  return stockRatio >= minRatio && stockRatio <= maxRatio;\r\n}\r\n\r\nfunction StockRow(props) {\r\n  const { stock, portfolioValue, minRatio, maxRatio } = props;\r\n\r\n  const stockRatio = (getStockValue(stock) / portfolioValue) * 100;\r\n  return (\r\n    <tr key={stock.id}>\r\n      <td>{stock.id}</td>\r\n      <td>{stock.name}</td>\r\n      <td\r\n        className={classNames({\r\n          good: stockRatioIsGood(stockRatio, minRatio, maxRatio),\r\n          bad: !stockRatioIsGood(stockRatio, minRatio, maxRatio)\r\n        })}\r\n      >\r\n        {stockRatio.toFixed(2)}%\r\n      </td>\r\n      <td>{stock.sector}</td>\r\n      <td>{stock[PRICE_EARNINGS_RATIO]}</td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nexport default Portfolio;\r\n","import React from \"react\";\r\nimport StockTable from \"../components/StockTable\";\r\nimport { getStocks } from \"../dataRetriever\";\r\n\r\nimport { getAllOwnedStocks } from \"../Portfolio/portfolioUtils\";\r\nimport {\r\n  OPERATING_MARGIN,\r\n  PRICE_EARNINGS_RATIO,\r\n  PRICE_SALES_RATIO,\r\n  DIRECT_YIELD,\r\n  NUMBER_OF_EMPLOYEES,\r\n  REVENUE,\r\n  REVENUE_PER_EMPLOYEE,\r\n  TOTAL_ASSETS,\r\n  EARNINGS_PER_SHARE,\r\n  PRICE_BOOK_VALUE,\r\n  SOLIDITY,\r\n  MARKET_CAP,\r\n  NET_EARNINGS,\r\n  EBIT\r\n} from \"../constants\";\r\n\r\nclass Weapons extends React.Component {\r\n  state = {\r\n    stocks: [],\r\n    ownedStocks: [],\r\n    error: null,\r\n    sortKey: PRICE_EARNINGS_RATIO,\r\n    columnsToShow: [\r\n      PRICE_EARNINGS_RATIO,\r\n      PRICE_SALES_RATIO,\r\n      DIRECT_YIELD,\r\n      NUMBER_OF_EMPLOYEES,\r\n      REVENUE,\r\n      REVENUE_PER_EMPLOYEE,\r\n      OPERATING_MARGIN,\r\n      TOTAL_ASSETS,\r\n      PRICE_BOOK_VALUE,\r\n      SOLIDITY,\r\n      MARKET_CAP\r\n    ]\r\n  };\r\n\r\n  componentDidMount() {\r\n    getStocks(\"weapons\")\r\n      .then(stocks => {\r\n        this.setState({\r\n          stocks: stocks\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n        this.setState({\r\n          error: err.message\r\n        });\r\n      });\r\n\r\n    getAllOwnedStocks().then(ownedStocks => {\r\n      this.setState({\r\n        ownedStocks: ownedStocks\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error != null) {\r\n      return <p>{this.state.error}</p>;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h1>Vapen</h1>\r\n        <StockTable\r\n          stocks={this.state.stocks}\r\n          ownedStocks={this.state.ownedStocks}\r\n          sortKey={this.state.sortKey}\r\n          onSort={sortKey => {\r\n            this.setState({ sortKey: sortKey });\r\n          }}\r\n          columnsToShow={this.state.columnsToShow}\r\n          showSingleStock={this.props.showSingleStock}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Weapons;\r\n","import { BASE_URL } from \"../constants\";\n\nconst rp = require(\"request-promise-native\");\nconst { formatAllFields } = require(\"../api/formatAllFields\");\n\nexport function saveReport(id, data) {\n  return new Promise((resolve, reject) => {\n    rp({\n      method: \"PUT\",\n      uri: `${BASE_URL}/stock/${id}/reports`,\n      body: data,\n      json: true\n    }).then(returnData => {\n      resolve(returnData);\n    });\n  });\n}\n\nexport function getStockData(id) {\n  return new Promise((resolve, reject) => {\n    rp({\n      uri: `${BASE_URL}/stock/${id}`\n    }).then(returnData => {\n      let parsedData = JSON.parse(returnData);\n      parsedData = formatAllFields(parsedData);\n\n      if (parsedData.interimReports) {\n        parsedData.interimReports = parsedData.interimReports.map(report =>\n          formatAllFields(report)\n        );\n      }\n\n      if (parsedData.annualReports) {\n        parsedData.annualReports = parsedData.annualReports.map(report =>\n          formatAllFields(report)\n        );\n      }\n\n      resolve(parsedData);\n    });\n  });\n}\n","import React from \"react\";\nimport StockTable from \"../components/StockTable\";\n\nimport {\n  PRICE_EARNINGS_RATIO,\n  ANNUAL_REPORTS_TABLE,\n  INTERIM_REPORTS_TABLE,\n  MILLION,\n  BILLION,\n  THOUSAND\n} from \"../constants\";\nimport { saveReport, getStockData } from \"./backend\";\n\nclass SingleStock extends React.Component {\n  state = {\n    stocksDetails: null,\n    error: null,\n    sortKey: PRICE_EARNINGS_RATIO\n  };\n\n  componentDidMount() {\n    getStockData(this.props.id).then(data => {\n      this.setState({\n        stockDetails: data\n      });\n    });\n  }\n\n  renderAnnualReports() {\n    const { stockDetails } = this.state;\n\n    if (!stockDetails.annualReports) {\n      return <div></div>;\n    }\n    return (\n      <div>\n        <h2>Årsrapporter</h2>\n        <StockTable\n          type={ANNUAL_REPORTS_TABLE}\n          stocks={stockDetails.annualReports}\n          ownedStocks={[]}\n          columnsToShow={this.props.columnsToShow}\n        />\n      </div>\n    );\n  }\n\n  renderInterimReports() {\n    const { stockDetails } = this.state;\n\n    if (!stockDetails.interimReports) {\n      return <div></div>;\n    }\n    return (\n      <div>\n        <h2>Kvartalsrapporter</h2>\n        <StockTable\n          type={INTERIM_REPORTS_TABLE}\n          stocks={stockDetails.interimReports}\n          ownedStocks={[]}\n          columnsToShow={this.props.columnsToShow}\n        />\n      </div>\n    );\n  }\n\n  renderInputSection() {\n    if (!this.props.id) {\n      return <div />;\n    }\n    return (\n      <div>\n        <InputSection\n          id={this.props.id}\n          stockDetails={this.state.stockDetails}\n        />\n      </div>\n    );\n  }\n\n  render() {\n    if (this.state.error != null) {\n      return <p>{this.state.error}</p>;\n    }\n\n    const { stockDetails } = this.state;\n\n    if (!stockDetails) {\n      return <div />;\n    }\n\n    return (\n      <div>\n        <h1>{stockDetails.name}</h1>\n\n        {this.renderAnnualReports()}\n        {this.renderInterimReports()}\n\n        {this.renderInputSection()}\n      </div>\n    );\n  }\n}\n\nexport default SingleStock;\n\nclass InputSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currency: \"SEK\",\n      multiplier: \"NONE\",\n      period: \"YEAR\",\n      year: 2020,\n      revenue: 0,\n      earningsBeforeInterestAndTax: 0,\n      netEarnings: 0,\n      totalAssets: 0,\n      totalEquity: 0,\n      totalDebt: 0,\n      numberOfShares: 0,\n      numberOfEmployees: 0\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  multiply(value) {\n    if (!this.state.multiplier || this.state.multiplier === \"\") {\n      return value * 1;\n    }\n    switch (this.state.multiplier) {\n      case \"MILLION\":\n        return value * MILLION;\n      case \"BILLION\":\n        return value * BILLION;\n      case \"THOUSAND\":\n        return value * THOUSAND;\n      case \"NONE\":\n        return value * 1;\n      default:\n        return value * 1;\n    }\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    // Multiply by 1 to ensure its a number, not a string\n    let report = {\n      currency: this.state.currency,\n      year: this.state.year * 1,\n      revenue: this.multiply(this.state.revenue),\n      earningsBeforeInterestAndTax: this.multiply(\n        this.state.earningsBeforeInterestAndTax\n      ),\n      netEarnings: this.multiply(this.state.netEarnings),\n      numberOfShares: this.state.numberOfShares * 1,\n      numberOfEmployees: this.state.numberOfEmployees * 1\n    };\n\n    if (this.state.period !== \"YEAR\") {\n      report.period = this.state.period;\n    }\n\n    if (this.state.totalAssets !== 0) {\n      report.totalAssets = this.multiply(this.state.totalAssets);\n    }\n    if (this.state.totalEquity !== 0) {\n      report.totalEquity = this.multiply(this.state.totalEquity);\n    }\n    if (this.state.totalDebt !== 0) {\n      report.totalDebt = this.multiply(this.state.totalDebt);\n    }\n\n    saveReport(this.props.id, report);\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Lägg till rapport</h2>\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            År:\n            <input\n              name=\"year\"\n              type=\"number\"\n              checked={this.state.year}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <br />\n          <label>\n            Kvartal:\n            <select\n              name=\"period\"\n              value={this.state.period}\n              onChange={this.handleInputChange}\n            >\n              <option value=\"YEAR\">Helår</option>\n              <option value=\"Q1\">Q1</option>\n              <option value=\"Q2\">Q2</option>\n              <option value=\"Q3\">Q3</option>\n              <option value=\"Q4\">Q4</option>\n            </select>\n          </label>\n          <br />\n          <h3>Räkenskaper</h3>\n          <label>\n            Valuta:\n            <select\n              name=\"multiplier\"\n              value={this.state.multiplier}\n              onChange={this.handleInputChange}\n            >\n              <option value=\"NONE\"></option>\n              <option value=\"THOUSAND\">Tusen</option>\n              <option value=\"MILLION\">Miljoner</option>\n              <option value=\"BILLION\">Miljarder</option>\n            </select>\n            <select\n              name=\"currency\"\n              value={this.state.currency}\n              onChange={this.handleInputChange}\n            >\n              <option value=\"SEK\">SEK</option>\n              <option value=\"EUR\">EUR</option>\n              <option value=\"USD\">USD</option>\n              <option value=\"DKK\">DKK</option>\n            </select>\n          </label>\n          <br />\n          <label>\n            Omsättning (revenue):\n            <input\n              name=\"revenue\"\n              type=\"number\"\n              value={this.state.revenue}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <br />\n\n          <label>\n            Rörelseresultat (EBIT):\n            <input\n              name=\"earningsBeforeInterestAndTax\"\n              type=\"number\"\n              value={this.state.earningsBeforeInterestAndTax}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <br />\n\n          <label>\n            Vinst (Net earnings):\n            <input\n              name=\"netEarnings\"\n              type=\"number\"\n              value={this.state.netEarnings}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <br />\n\n          <label>\n            Tillgångar (Total assets):\n            <input\n              name=\"totalAssets\"\n              type=\"number\"\n              value={this.state.totalAssets}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <br />\n\n          <label>\n            Eget kapital (Total equity):\n            <input\n              name=\"totalEquity\"\n              type=\"number\"\n              value={this.state.totalEquity}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <br />\n\n          <label>\n            Skuld (Total debt):\n            <input\n              name=\"totalDebt\"\n              type=\"number\"\n              value={this.state.totalDebt}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <br />\n\n          <h3>Annan info</h3>\n          <label>\n            Antal anställda:\n            <input\n              name=\"numberOfEmployees\"\n              type=\"number\"\n              value={this.state.numberOfEmployees}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <label>\n            Antal aktier:\n            <input\n              name=\"numberOfShares\"\n              type=\"number\"\n              value={this.state.numberOfShares}\n              onChange={this.handleInputChange}\n            />\n          </label>\n\n          <br />\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\r\nimport StockTable from \"../components/StockTable\";\r\nimport { getStocks } from \"../dataRetriever\";\r\n\r\nimport { getAllOwnedStocks } from \"../Portfolio/portfolioUtils\";\r\nimport {\r\n  OPERATING_MARGIN,\r\n  PRICE_EARNINGS_RATIO,\r\n  PRICE_SALES_RATIO,\r\n  DIRECT_YIELD,\r\n  NUMBER_OF_EMPLOYEES,\r\n  REVENUE,\r\n  REVENUE_PER_EMPLOYEE,\r\n  TOTAL_ASSETS,\r\n  EARNINGS_PER_SHARE,\r\n  PRICE_BOOK_VALUE,\r\n  SOLIDITY,\r\n  MARKET_CAP,\r\n  NET_EARNINGS,\r\n  EBIT\r\n} from \"../constants\";\r\n\r\nclass Industry extends React.Component {\r\n  state = {\r\n    stocks: [],\r\n    ownedStocks: [],\r\n    error: null,\r\n    sortKey: PRICE_EARNINGS_RATIO,\r\n    columnsToShow: [\r\n      PRICE_EARNINGS_RATIO,\r\n      PRICE_SALES_RATIO,\r\n      DIRECT_YIELD,\r\n      NUMBER_OF_EMPLOYEES,\r\n      REVENUE,\r\n      REVENUE_PER_EMPLOYEE,\r\n      OPERATING_MARGIN,\r\n      TOTAL_ASSETS,\r\n      PRICE_BOOK_VALUE,\r\n      SOLIDITY,\r\n      MARKET_CAP\r\n    ]\r\n  };\r\n\r\n  componentDidMount() {\r\n    getStocks(\"industry\")\r\n      .then(stocks => {\r\n        this.setState({\r\n          stocks: stocks\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n        this.setState({\r\n          error: err.message\r\n        });\r\n      });\r\n\r\n    getAllOwnedStocks().then(ownedStocks => {\r\n      this.setState({\r\n        ownedStocks: ownedStocks\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error != null) {\r\n      return <p>{this.state.error}</p>;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h1>Verkstad</h1>\r\n        <StockTable\r\n          stocks={this.state.stocks}\r\n          ownedStocks={this.state.ownedStocks}\r\n          sortKey={this.state.sortKey}\r\n          onSort={sortKey => {\r\n            this.setState({ sortKey: sortKey });\r\n          }}\r\n          // columnsToShow={this.state.columnsToShow}\r\n          showSingleStock={this.props.showSingleStock}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Industry;\r\n","import React from \"react\";\r\nimport StockTable from \"../components/StockTable\";\r\nimport { getStocks } from \"../dataRetriever\";\r\n\r\nimport { getAllOwnedStocks } from \"../Portfolio/portfolioUtils\";\r\nimport {\r\n  PRICE_EARNINGS_RATIO,\r\n  DIRECT_YIELD,\r\n  VOLATILITY,\r\n  PRICE_BOOK_VALUE,\r\n  EARNINGS_PER_SHARE,\r\n  REVENUE_PER_EMPLOYEE,\r\n  REVENUE_PER_SHARE,\r\n  OPERATING_MARGIN,\r\n  SOLIDITY,\r\n  PRICE_SALES_RATIO,\r\n  MARKET_CAP\r\n} from \"../constants\";\r\n\r\nclass Forest extends React.Component {\r\n  state = {\r\n    stocks: [],\r\n    ownedStocks: [],\r\n    error: null,\r\n    sortKey: PRICE_EARNINGS_RATIO,\r\n    columnsToShow: [\r\n      PRICE_EARNINGS_RATIO,\r\n      DIRECT_YIELD,\r\n      VOLATILITY,\r\n      PRICE_BOOK_VALUE,\r\n      EARNINGS_PER_SHARE,\r\n      REVENUE_PER_EMPLOYEE,\r\n      REVENUE_PER_SHARE,\r\n      OPERATING_MARGIN,\r\n      SOLIDITY,\r\n      PRICE_SALES_RATIO,\r\n      MARKET_CAP\r\n    ]\r\n  };\r\n\r\n  componentDidMount() {\r\n    getStocks(\"forest\")\r\n      .then(stocks => {\r\n        this.setState({\r\n          stocks: stocks\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n        this.setState({\r\n          error: err.message\r\n        });\r\n      });\r\n\r\n    getAllOwnedStocks().then(ownedStocks => {\r\n      this.setState({\r\n        ownedStocks: ownedStocks\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error != null) {\r\n      return <p>{this.state.error}</p>;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h1>Skog</h1>\r\n        <StockTable\r\n          stocks={this.state.stocks}\r\n          ownedStocks={this.state.ownedStocks}\r\n          sortKey={this.state.sortKey}\r\n          onSort={sortKey => {\r\n            this.setState({ sortKey: sortKey });\r\n          }}\r\n          columnsToShow={this.state.columnsToShow}\r\n          showSingleStock={this.props.showSingleStock}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Forest;\r\n","import React from \"react\";\r\nimport StockTable from \"../components/StockTable\";\r\nimport { getStocks } from \"../dataRetriever\";\r\n\r\nimport { getAllOwnedStocks } from \"../Portfolio/portfolioUtils\";\r\nimport {\r\n  PRICE_EARNINGS_RATIO,\r\n  DIRECT_YIELD,\r\n  TOTAL_ASSETS,\r\n  EARNINGS_PER_SHARE,\r\n  PRICE_BOOK_VALUE,\r\n  SOLIDITY,\r\n  MARKET_CAP,\r\n  NET_EARNINGS,\r\n  EBIT\r\n} from \"../constants\";\r\n\r\nclass BlueChip extends React.Component {\r\n  state = {\r\n    stocks: [],\r\n    ownedStocks: [],\r\n    error: null,\r\n    sortKey: \"priceEarningsRatio\",\r\n    columnsToShow: [\r\n      PRICE_EARNINGS_RATIO,\r\n      DIRECT_YIELD,\r\n      NET_EARNINGS,\r\n      EBIT,\r\n      EARNINGS_PER_SHARE,\r\n      TOTAL_ASSETS,\r\n      PRICE_BOOK_VALUE,\r\n      SOLIDITY,\r\n      MARKET_CAP\r\n    ]\r\n  };\r\n\r\n  componentDidMount() {\r\n    getStocks(\"invest\")\r\n      .then(stocks => {\r\n        this.setState({\r\n          stocks: stocks\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n        this.setState({\r\n          error: err.message\r\n        });\r\n      });\r\n\r\n    getAllOwnedStocks().then(ownedStocks => {\r\n      this.setState({\r\n        ownedStocks: ownedStocks\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error != null) {\r\n      return <p>{this.state.error}</p>;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h1>Investment</h1>\r\n        <StockTable\r\n          stocks={this.state.stocks}\r\n          ownedStocks={this.state.ownedStocks}\r\n          sortKey={this.state.sortKey}\r\n          onSort={sortKey => {\r\n            this.setState({ sortKey: sortKey });\r\n          }}\r\n          columnsToShow={this.state.columnsToShow}\r\n          showSingleStock={this.props.showSingleStock}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BlueChip;\r\n","import React from \"react\";\r\nimport StockTable from \"../components/StockTable\";\r\nimport { getStocks } from \"../dataRetriever\";\r\n\r\nimport { getAllOwnedStocks } from \"../Portfolio/portfolioUtils\";\r\n\r\nclass BlueChip extends React.Component {\r\n  state = {\r\n    stocks: [],\r\n    ownedStocks: [],\r\n    error: null,\r\n    sortKey: \"priceEarningsRatio\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    getStocks(\"realEstate\")\r\n      .then(stocks => {\r\n        this.setState({\r\n          stocks: stocks\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n        this.setState({\r\n          error: err.message\r\n        });\r\n      });\r\n\r\n    getAllOwnedStocks().then(ownedStocks => {\r\n      this.setState({\r\n        ownedStocks: ownedStocks\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error != null) {\r\n      return <p>{this.state.error}</p>;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h1>Fastighetsbolag</h1>\r\n        <StockTable\r\n          stocks={this.state.stocks}\r\n          ownedStocks={this.state.ownedStocks}\r\n          sortKey={this.state.sortKey}\r\n          onSort={sortKey => {\r\n            this.setState({ sortKey: sortKey });\r\n          }}\r\n          showSingleStock={this.props.showSingleStock}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BlueChip;\r\n","import React from \"react\";\nimport StockTable from \"../components/StockTable\";\nimport { getStocks } from \"../dataRetriever\";\n\nimport { getAllOwnedStocks } from \"../Portfolio/portfolioUtils\";\nimport {\n  PRICE_EARNINGS_RATIO,\n  DIRECT_YIELD,\n  VOLATILITY,\n  PRICE_BOOK_VALUE,\n  EARNINGS_PER_SHARE,\n  REVENUE_PER_EMPLOYEE,\n  REVENUE_PER_SHARE,\n  OPERATING_MARGIN,\n  SOLIDITY,\n  PRICE_SALES_RATIO,\n  MARKET_CAP\n} from \"../constants\";\n\nclass Bank extends React.Component {\n  state = {\n    stocks: [],\n    ownedStocks: [],\n    error: null,\n    sortKey: PRICE_EARNINGS_RATIO,\n    columnsToShow: [\n      PRICE_EARNINGS_RATIO,\n      DIRECT_YIELD,\n      VOLATILITY,\n      PRICE_BOOK_VALUE,\n      EARNINGS_PER_SHARE,\n      REVENUE_PER_EMPLOYEE,\n      REVENUE_PER_SHARE,\n      OPERATING_MARGIN,\n      SOLIDITY,\n      PRICE_SALES_RATIO,\n      MARKET_CAP\n    ]\n  };\n\n  componentDidMount() {\n    getStocks(\"bank\")\n      .then(stocks => {\n        this.setState({\n          stocks: stocks\n        });\n      })\n      .catch(err => {\n        console.error(err);\n        this.setState({\n          error: err.message\n        });\n      });\n\n    getAllOwnedStocks().then(ownedStocks => {\n      this.setState({\n        ownedStocks: ownedStocks\n      });\n    });\n  }\n\n  render() {\n    if (this.state.error != null) {\n      return <p>{this.state.error}</p>;\n    }\n\n    return (\n      <div>\n        <h1>Bank</h1>\n        <StockTable\n          stocks={this.state.stocks}\n          ownedStocks={this.state.ownedStocks}\n          sortKey={this.state.sortKey}\n          onSort={sortKey => {\n            this.setState({ sortKey: sortKey });\n          }}\n          columnsToShow={this.state.columnsToShow}\n          showSingleStock={this.props.showSingleStock}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Bank;\n","import React from \"react\";\nimport \"./App.css\";\nimport BestYield from \"../BestYield/BestYield\";\nimport BlueChip from \"../BlueChip/BlueChip\";\nimport Portfolio from \"../Portfolio/Portfolio\";\nimport Weapons from \"../Weapons/Weapons\";\nimport SingleStock from \"../SingleStock/SingleStock\";\nimport Industry from \"../Industry/Industry\";\nimport Forest from \"../Forest/Forest\";\nimport Invest from \"../Invest/Invest\";\nimport RealEstate from \"../RealEstate/RealEstate\";\nimport Bank from \"../Bank/Bank\";\n\nconst portfolioPage = \"PORTFOLIO_PAGE\";\nconst bestYieldPage = \"BEST_YIELD_PAGE\";\nconst blueChipPage = \"BLUE_CHIP_PAGE\";\nconst weaponsPage = \"WEAPONS_PAGE\";\nconst industryPage = \"INDUSTRY_PAGE\";\nconst forestPage = \"FOREST_PAGE\";\nconst investPage = \"INVEST_PAGE\";\nconst realEstatePage = \"REAL_ESTATE_PAGE\";\nconst bankPage = \"BANK_PAGE\";\n\nconst classNames = require(\"classnames\");\n\nclass App extends React.Component {\n  state = {\n    activePage: bestYieldPage,\n    activeStock: null,\n    columnsToShow: []\n  };\n\n  renderActivePage() {\n    if (this.state.activeStock) {\n      return (\n        <SingleStock\n          id={this.state.activeStock}\n          columnsToShow={this.state.columnsToShow}\n        />\n      );\n    }\n\n    switch (this.state.activePage) {\n      case portfolioPage:\n        return <Portfolio showSingleStock={this.showSingleStock.bind(this)} />;\n      case bestYieldPage:\n        return <BestYield showSingleStock={this.showSingleStock.bind(this)} />;\n      case blueChipPage:\n        return <BlueChip showSingleStock={this.showSingleStock.bind(this)} />;\n      case weaponsPage:\n        return <Weapons showSingleStock={this.showSingleStock.bind(this)} />;\n      case industryPage:\n        return <Industry showSingleStock={this.showSingleStock.bind(this)} />;\n      case forestPage:\n        return <Forest showSingleStock={this.showSingleStock.bind(this)} />;\n      case investPage:\n        return <Invest showSingleStock={this.showSingleStock.bind(this)} />;\n      case realEstatePage:\n        return <RealEstate showSingleStock={this.showSingleStock.bind(this)} />;\n      case bankPage:\n        return <Bank showSingleStock={this.showSingleStock.bind(this)} />;\n      default:\n        return <div></div>;\n    }\n  }\n\n  renderButton(title, page) {\n    return (\n      <button\n        onClick={() => {\n          this.setState({ activePage: page, activeStock: null });\n        }}\n        className={classNames({\n          active: this.state.activePage === page\n        })}\n      >\n        {title}\n      </button>\n    );\n  }\n\n  showSingleStock(id, columnsToShow) {\n    this.setState({ activeStock: id, columnsToShow: columnsToShow });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>BisseNisse</h1>\n        {this.renderButton(\"Portfolio\", portfolioPage)}\n        {this.renderButton(\"Utdelningsaktier\", bestYieldPage)}\n        {this.renderButton(\"Basaktier\", blueChipPage)}\n        {this.renderButton(\"Verkstad\", industryPage)}\n        {this.renderButton(\"Skog\", forestPage)}\n        {this.renderButton(\"Investment\", investPage)}\n        {this.renderButton(\"Fastigheter\", realEstatePage)}\n        {this.renderButton(\"Vapen\", weaponsPage)}\n        {this.renderButton(\"Bank\", bankPage)}\n        {this.renderActivePage()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}