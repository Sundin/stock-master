{"version":3,"sources":["components/stockIndicators.js","constants.js","translate.js","components/StockTable.js","stockUtils.js","avanza.js","BestYield/dataRetriever.js","Portfolio/portfolioData.js","Portfolio/dataRetriever.js","Portfolio/portfolioUtils.js","BestYield/BestYield.js","BlueChip/dataRetriever.js","BlueChip/BlueChip.js","Portfolio/Portfolio.js","stockDetails/stocks/raytheon.js","stockDetails/stocks/northrupGrumman.js","stockDetails/stocks/generalDynamics.js","stockDetails/stocks/lockheedMartin.js","stockDetails/formatAllFields.js","stockDetails/calculateKPIs.js","stockDetails/calculateChangeValues.js","stockDetails/stockDetails.js","Weapons/dataRetriever.js","Weapons/Weapons.js","SingleStock/SingleStock.js","Industry/dataRetriever.js","Industry/Industry.js","Forest/dataRetriever.js","Forest/Forest.js","App/App.js","serviceWorker.js","index.js"],"names":["yieldIsGood","stockData","directYield","getYieldTarget","yieldIsVeryGood","peIsGood","priceEarningsRatio","peIsVeryGood","peIsVeryBad","tenYearsBondInterest","averageOMXS30volatility","volatilityIsGood","volatility","volatilityIsVeryGood","volatilityIsBad","volatilityIsVeryBad","exchangeRates","DKK","USD","BILLION","MILLION","THOUSAND","OPERATING_MARGIN","PRICE_EARNINGS_RATIO","PRICE_SALES_RATIO","PRICE_BOOK_VALUE","DIRECT_YIELD","VOLATILITY","NUMBER_OF_EMPLOYEES","REVENUE","REVENUE_PER_EMPLOYEE","REVENUE_PER_SHARE","TOTAL_ASSETS","EARNINGS_PER_SHARE","NET_EARNINGS","NUMBER_OF_SHARES","TOTAL_EQUITY","TOTAL_DEBT","SOLIDITY","MARKET_CAP","YEAR","ID","LAST_PRICE","CURRENCY","EBIT","CHANGE_VALUES","ANNUAL_REPORTS_TABLE","INTERIM_REPORTS_TABLE","translate","key","classNames","require","StockTable","props","stocks","ownedStocks","sortKey","columnsToShow","type","sort","a","b","width","tableType","getMainColumn","map","column","owned","stockId","found","forEach","stock","id","stockIsOwned","showSingleStock","Stock","this","year","period","className","href","onClick","e","handleClick","name","changeValues","sign","renderMainColumn","getClassNames","renderStockData","React","Component","good","veryGood","veryBad","bad","defaultProps","rp","cachedStocks","getStock","Promise","resolve","reject","then","parsedData","JSON","parse","currency","lastPrice","console","error","convertToSEK","keyRatios","transformJson","interestingYieldStocks","basePortfolioStrategy","minShare","maxShare","minNumberOfStocks","maxNumberOfStocks","minRatioOfEachShareInPortfolio","maxRatioOfEachShareInPortfolio","portfolios","amount","sector","strategy","getPortfolios","promises","portfolio","push","returnData","getStockWithAmount","all","getStockValue","getStocksInPortfolio","getPortfolioValue","portfolioData","reduce","sum","portfolioRatioIsGood","totalPortfolioValue","portfolioRatio","numberOfStocksIsGood","length","getAllOwnedStocks","concat","BestYield","state","setState","catch","err","message","omsx30stocks","omsx30otherVersions","interestingStocks","BlueChip","stocksToShow","onSort","PortfolioRow","toFixed","PortfolioDetails","widrth","StockRow","portfolioValue","minRatio","maxRatio","stockRatioIsGood","stockRatio","Portfolio","sectors","getSectors","sortedSectors","Object","keys","value","getTotalPortfolioValue","stockDetails","annualReports","revenue","numberOfEmployees","numberOfShares","earningsBeforeInterestAndTax","netEarnings","totalAssets","totalEquity","totalDebt","interimReports","formatAllFields","inputData","keyShouldBeFormatted","number","isNaN","returnValue","negative","toPrecision","x","parts","toString","split","replace","join","numberWithSpaces","formatNumber","calculateKPIs","inputBasicData","basicData","convertFromSEK","calculateKPIsFromBasicData","calculateEquityDebtAndAssets","calculateSolidity","calculateEarningsPerShare","calculateOperatingMargin","calculateRevenuePerEmployee","calculateRevenuePerShare","calculateChange","report","previousReport","changeShouldBeCalculated","getStockDetails","basicStockData","raytheon","northrupGrumman","generalDynamics","lockheedMartin","getAllStocks","index","latestReport","getWeaponStocks","Weapons","SingleStock","stocksDetails","renderAnnualReports","renderInterimReports","getIndustryStocks","Industry","getForestStocks","Forest","bestYieldPage","App","activePage","activeStock","config","bind","title","page","active","renderButton","renderActivePage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2bAAO,SAASA,EAAYC,GAG1B,OAFwBA,EAAhBC,YAEaC,IAGhB,SAASC,EAAgBH,GAE9B,OADwBA,EAAhBC,YACgC,KAAnBC,IAGhB,SAASE,EAASJ,GAAY,IAC3BK,EAAoCL,EAApCK,mBAAoBJ,EAAgBD,EAAhBC,YAE5B,QAAII,GAAsB,IAInB,GAAKJ,EAAc,MAAQI,EAG7B,SAASC,EAAaN,GAAY,IAC/BK,EAAoCL,EAApCK,mBAAoBJ,EAAgBD,EAAhBC,YAC5B,OACEG,EAASJ,IAAc,GAAKC,EAAc,MAA6B,EAArBI,EAI/C,SAASE,EAAYP,GAE1B,OAD+BA,EAAvBK,oBACqB,EAG/B,SAASH,IAIP,OAAOM,IAGT,IAAMC,EAA0B,KAEzB,SAASC,EAAiBV,GAE/B,OADuBA,EAAfW,YACuC,IAA1BF,EAGhB,SAASG,EAAqBZ,GAEnC,OADuBA,EAAfW,YACuC,GAA1BF,EAGhB,SAASI,EAAgBb,GAE9B,OADuBA,EAAfW,WACsC,KAA1BF,EAGf,SAASK,EAAoBd,GAElC,OADuBA,EAAfW,WACsC,IAA1BF,EC3Df,IAAMM,EAAgB,CAC3BC,IAAK,KACLC,IAAK,MAGMC,EAAU,IACVC,EAAU,IACVC,EAAW,IAEXC,EAAmB,kBACnBC,EAAuB,qBACvBC,EAAoB,kBACpBC,EAAmB,iBACnBC,EAAe,cACfC,EAAa,aACbC,EAAsB,oBACtBC,EAAU,UACVC,EAAuB,qBACvBC,EAAoB,kBACpBC,EAAe,cACfC,EAAqB,mBACrBC,EAAe,cACfC,EAAmB,iBACnBC,EAAe,cACfC,EAAa,YACbC,EAAW,WACXC,EAAa,YACbC,EAAO,OACPC,EAAK,KACLC,EAAa,YACbC,EAAW,WACXC,EAAO,+BACPC,EAAgB,eAEhBC,EAAuB,qBACvBC,EAAwB,sBCd9B,SAASC,EAAUC,GACxB,OAAQA,GACN,KAAK1B,EACH,MAAO,MACT,KAAKC,EACH,MAAO,MACT,KAAKE,EACH,MAAO,uBACT,KAAKC,EACH,MAAO,cACT,KAAKC,EACH,MAAO,eACT,KAAKC,EACH,MAAO,gBACT,KAAKC,EACH,MAAO,8BACT,KAAKC,EACH,MAAO,wBACT,KAAKT,EACH,MAAO,yBACT,KAAKU,EACH,MAAO,gBACT,KAAKC,EACH,MAAO,MACT,KAAKR,EACH,MAAO,MACT,KAAKa,EACH,MAAO,gBACT,KAAKC,EACH,MAAO,kBACT,KAAKC,EACH,MAAO,QACT,KAAKC,EACH,MAAO,KACT,KAAKG,EACH,MAAO,OACT,KAAKV,EACH,MAAO,QACT,QACE,MAAO,ICnCb,IAAMgB,GAAaC,EAAQ,IAE3B,SAASC,GAAWC,GAAQ,IAClBC,EAAsDD,EAAtDC,OAAQC,EAA8CF,EAA9CE,YAAaC,EAAiCH,EAAjCG,QAASC,EAAwBJ,EAAxBI,cAAeC,EAASL,EAATK,KAQrD,OANIF,GACFF,EAAOK,MAAK,SAACC,EAAGC,GACd,OAAOA,EAAEL,GAAWI,EAAEJ,MAKxB,+BACE,+BACE,4BACE,wBAAIM,MAAM,OA6BpB,SAAuBC,GACrB,OAAQA,GACN,KAAKjB,EACH,OAAOE,EAAUR,GACnB,KAAKO,EACH,MAAO,SACT,QACE,MAAO,SApCciB,CAAcN,IAC9BD,EAAcQ,KAAI,SAAAC,GACjB,OACE,wBAAIJ,MAAM,MAAMb,IAAKiB,GAClBlB,EAAUkB,SAMrB,+BACGZ,EAAOW,KAAI,SAAAhE,GACV,IAAMkE,ECpDT,SAAsBC,EAASb,GACpC,IAAIc,GAAQ,EAOZ,OANAd,EAAYe,SAAQ,SAAAC,GACdA,EAAMC,KAAOJ,IACfC,GAAQ,MAILA,ED4CeI,CAAaxE,EAAUuE,GAAIjB,GACzC,OACE,kBAAC,GAAD,CACEtD,UAAWA,EACXgD,IAAKhD,EAAUuE,GACfL,MAAOA,EACPV,cAAeA,EACfiB,gBAAiBrB,EAAMqB,gBACvBhB,KAAMA,S,IAoBdiB,G,sLAEFC,KAAKvB,MAAMqB,gBAAgBE,KAAKvB,MAAMpD,UAAUuE,M,yCAG9B,IAAD,SACkBI,KAAKvB,MAAhCK,EADS,EACTA,KAAMzD,EADG,EACHA,UAAWkE,EADR,EACQA,MACzB,OAAQT,GACN,KAAKZ,EACH,OAAO,4BAAK7C,EAAU4E,MACxB,KAAK9B,EACH,OACE,4BACG9C,EAAU4E,KADb,IACoB5E,EAAU6E,QAGlC,QACE,OACE,wBACEC,UAAW7B,GAAW,CACpBiB,MAAOA,KAGT,uBAAGa,KAAK,IAAIC,QAAS,SAAAC,GAAC,OAAI,EAAKC,YAAYD,KACxCjF,EAAUmF,U,sCAOPlB,GAAS,IAAD,EACMU,KAAKvB,MAAzBpD,EADc,EACdA,UACR,OAFsB,EACHyD,MAEjB,KAAKZ,EACL,KAAKC,EACH,GAAI9C,EAAUoF,cAAgBpF,EAAUoF,aAAanB,GAAS,CAC5D,IAAMoB,EAAOrF,EAAUoF,aAAanB,GAAU,EAAI,IAAM,GACxD,OACEjE,EAAUiE,GACV,KACAoB,EACArF,EAAUoF,aAAanB,GACvB,KAGJ,OAAOjE,EAAUiE,GACnB,QACE,OAAOjE,EAAUiE,M,+BAIb,IAAD,SAC8BU,KAAKvB,MAAlCpD,EADD,EACCA,UAAWwD,EADZ,EACYA,cAEnB,OACE,wBAAIR,IAAKhD,EAAUuE,IAChBI,KAAKW,mBACL9B,EAAcQ,KAAI,SAAAC,GACjB,OACE,wBACEJ,MAAM,MACNb,IAAKiB,EACLa,UAAWS,GAActB,EAAQjE,IAEhC,EAAKwF,gBAAgBvB,Y,GAjEhBwB,IAAMC,WA0E1B,SAASH,GAAcvC,EAAKhD,GAC1B,OAAQgD,GACN,IAAK,qBACH,OAAOC,GAAW,CAChB0C,KAAMvF,EAASJ,GACf4F,SAAUtF,EAAaN,GACvB6F,QAAStF,EAAYP,KAEzB,IAAK,cACH,OAAOiD,GAAW,CAChB0C,KAAM5F,EAAYC,GAClB4F,SAAUzF,EAAgBH,KAE9B,IAAK,aACH,OAAOiD,GAAW,CAChB0C,KAAMjF,EAAiBV,GACvB4F,SAAUhF,EAAqBZ,GAC/B8F,IAAKjF,EAAgBb,GACrB6F,QAAS/E,EAAoBd,KAEjC,QACE,OAAOiD,GAAW,KAIxBE,GAAW4C,aAAe,CACxBtC,KFhJmC,sBEiJnCD,cAAe,CAAChB,EAAIlB,EAAsBG,EAAcC,IAG3CyB,U,ukBEtLf,IAAI6C,GAAK9C,EAAQ,KAEb+C,GAAe,GAEZ,SAASC,GAAS3B,GACvB,OAAwB,MAApB0B,GAAa1B,GACR4B,QAAQC,QAAQH,GAAa1B,IAG/B,IAAI4B,SAAQ,SAACC,EAASC,GAC3BL,GAAG,0CAA4CzB,GAAI+B,MAAK,SAAAtG,GACtD,IAAIuG,EAAaC,KAAKC,MAAMzG,GAG5BuG,EA+BN,SAAsBvG,GACpB,OAAQA,EAAU0G,UAChB,IAAK,MACH,OAAO1G,EACT,IAAK,MACH,OAAO,GAAP,GACKA,EADL,CAEE0G,SAAU,MACVC,UAAW3G,EAAU2G,UAAY5F,EAAcE,MAEnD,IAAK,MACH,OAAO,GAAP,GACKjB,EADL,CAEE0G,SAAU,MACVC,UAAW3G,EAAU2G,UAAY5F,EAAcC,MAEnD,QAEE,OADA4F,QAAQC,MAAM,qBAAuB7G,EAAU0G,UACxC1G,GAjDM8G,CADbP,EAkBN,SAAuBvG,GAErB,MAAO,CACLmF,KAAMnF,EAAUmF,KAChBZ,GAAIvE,EAAUuE,GACdtE,YAAaD,EAAU+G,UAAU9G,YACjCI,mBAAoBL,EAAU+G,UAAU1G,mBACxCM,WAAYX,EAAU+G,UAAUpG,WAChC+F,SAAU1G,EAAU0G,SACpBC,UAAW3G,EAAU2G,WA3BNK,CAAcT,IAG3BN,GAAaM,EAAWhC,IAAMgC,EAC9BH,EAAQG,SCjBd,IAAMU,GAAyB,CAC7B,OACA,OACA,OACA,QACA,SACA,SACA,OACA,OACA,OACA,QACA,OACA,OACA,SACA,U,+NChBF,IAAMC,GAAwB,CAC5BC,SAAU,GACVC,SAAU,GACVC,kBAAmB,EACnBC,kBAAmB,GACnBC,+BAAgC,EAChCC,+BAAgC,IAoCnBC,GAjCI,CACjB,CACElD,GAAI,IACJY,KAAM,mBACN9B,OAAQ,CACN,CACEkB,GAAI,OACJY,KAAM,SACNuC,OAAQ,GACRC,OAAQ,mBAGZC,S,4VAAS,IACJV,GADG,CAENC,SAAU,GACVC,SAAU,MAGd,CACE7C,GAAI,IACJY,KAAM,qBACN9B,OAAQ,CACN,CACEkB,GAAI,OACJY,KAAM,YACNuC,OAAQ,EACRC,OAAQ,WAGZC,SAAUV,KCjCP,SAASW,KACd,OAAO,IAAI1B,SAAQ,SAACC,EAASC,GAC3B,IAAIyB,EAAW,GACfL,GAAWpD,SAAQ,SAAA0D,GACjBD,EAASE,KAQf,SAA8BD,GAC5B,IAAIE,EAAaF,EACjB,OAAO,IAAI5B,SAAQ,SAACC,EAASC,GAC3B,IAAIyB,EAAW,GACfC,EAAU1E,OAAOgB,SAAQ,SAAAC,GACvBwD,EAASE,KHER,SAA4B1D,GACjC,OAAO,IAAI6B,SAAQ,SAACC,EAASC,GAC3BH,GAAS5B,EAAMC,IAAI+B,MAAK,SAAAtG,GACtBoG,EAAQ,GAAD,GAAM9B,EAAN,GAAgBtE,UGLTkI,CAAmB5D,OAEnC6B,QAAQgC,IAAIL,GAAUxB,MAAK,SAAAjD,GACzB4E,EAAW5E,OAASA,EAAOK,MAAK,SAACC,EAAGC,GAClC,OAAOwE,GAAcxE,GAAKwE,GAAczE,MAE1CyC,EAAQ6B,SAnBMI,CAAqBN,OAErC5B,QAAQgC,IAAIL,GAAUxB,MAAK,SAAA2B,GACzB7B,EAAQ6B,SCVP,SAASK,GAAkBC,GAChC,OAAOA,EAAclF,OAAOmF,QAAO,SAACC,EAAKnE,GACvC,OAAOmE,EAAML,GAAc9D,KAC1B,GAGE,SAASoE,GAAqBH,EAAeI,GAClD,IAAMC,EACHN,GAAkBC,GAAiBI,EAAuB,IAC7D,OACEC,GAAkBL,EAAcX,SAAST,UACzCyB,GAAkBL,EAAcX,SAASR,SAItC,SAASyB,GAAqBN,GACnC,OACEA,EAAclF,OAAOyF,QAAUP,EAAcX,SAASP,mBACtDkB,EAAclF,OAAOyF,QAAUP,EAAcX,SAASN,kBAInD,SAASc,GAAc9D,GAC5B,OAAOA,EAAMoD,OAASpD,EAAMqC,UAGvB,SAASoC,KACd,OAAO,IAAI5C,SAAQ,SAACC,EAASC,GAC3B,IAAIhD,EAAS,GACbwE,KAAgBvB,MAAK,SAAAmB,GACnBA,EAAWpD,SAAQ,SAAA0D,GACjB1E,EAASA,EAAO2F,OAAOjB,EAAU1E,WAEnC+C,EAAQ/C,S,ICmBC4F,G,2MA/CbC,MAAQ,CACN7F,OAAQ,GACRC,YAAa,GACbuD,MAAO,KACPtD,QAAS,e,mFAGU,IAAD,OJMb,IAAI4C,SAAQ,SAACC,EAASC,GAC3B,IAAIyB,EAAW,GAEfb,GAAuB5C,SAAQ,SAAAE,GAC7BuD,EAASE,KAAK9B,GAAS3B,OAGzB4B,QAAQgC,IAAIL,GAAUxB,MAAK,SAAAjD,GACzB,IAAI4E,EAAa,GACjB5E,EAAOgB,SAAQ,SAAArE,GACbiI,EAAWD,KAAKhI,MAGlBoG,EAAQ6B,SIjBP3B,MAAK,SAAAjD,GACJ,EAAK8F,SAAS,CACZ9F,OAAQA,OAGX+F,OAAM,SAAAC,GACLzC,QAAQC,MAAMwC,GACd,EAAKF,SAAS,CACZtC,MAAOwC,EAAIC,aAIjBP,KAAoBzC,MAAK,SAAAhD,GACvB,EAAK6F,SAAS,CACZ7F,YAAaA,S,+BAMjB,OAAwB,MAApBqB,KAAKuE,MAAMrC,MACN,2BAAIlC,KAAKuE,MAAMrC,OAItB,6BACE,4DACA,kBAAC,GAAD,CACExD,OAAQsB,KAAKuE,MAAM7F,OACnBC,YAAaqB,KAAKuE,MAAM5F,YACxBC,QAASoB,KAAKuE,MAAM3F,QACpBkB,gBAAiBE,KAAKvB,MAAMqB,uB,GAzCdgB,IAAMC,WCJxB6D,GAAe,CACnB,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,SACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QAGIC,GAAsB,CAAC,OAAQ,OAAQ,QAEvCC,GAAoB,CAAC,OAAQ,OAAQ,QAAS,Q,ICoBrCC,G,2MAlDbR,MAAQ,CACN7F,OAAQ,GACRC,YAAa,GACbuD,MAAO,KACPtD,QAAS,sB,mFAGU,IAAD,OD0Bb,IAAI4C,SAAQ,SAACC,EAASC,GAC3B,IAAIyB,EAAW,GAEX6B,EAAeJ,GAAaP,OAAOQ,KACvCG,EAAeA,EAAaX,OAAOS,KAEtBpF,SAAQ,SAAAE,GACnBuD,EAASE,KAAK9B,GAAS3B,OAGzB4B,QAAQgC,IAAIL,GAAUxB,MAAK,SAAAjD,GACzB,IAAI4E,EAAa,GACjB5E,EAAOgB,SAAQ,SAAArE,GACbiI,EAAWD,KAAKhI,MAGlBoG,EAAQ6B,SCxCP3B,MAAK,SAAAjD,GACJ,EAAK8F,SAAS,CACZ9F,OAAQA,OAGX+F,OAAM,SAAAC,GACLzC,QAAQC,MAAMwC,GACd,EAAKF,SAAS,CACZtC,MAAOwC,EAAIC,aAIjBP,KAAoBzC,MAAK,SAAAhD,GACvB,EAAK6F,SAAS,CACZ7F,YAAaA,S,+BAKT,IAAD,OACP,OAAwB,MAApBqB,KAAKuE,MAAMrC,MACN,2BAAIlC,KAAKuE,MAAMrC,OAItB,6BACE,qDACA,kBAAC,GAAD,CACExD,OAAQsB,KAAKuE,MAAM7F,OACnBC,YAAaqB,KAAKuE,MAAM5F,YACxBC,QAASoB,KAAKuE,MAAM3F,QACpBqG,OAAQ,SAAArG,GACN,EAAK4F,SAAS,CAAE5F,QAASA,KAE3BkB,gBAAiBE,KAAKvB,MAAMqB,uB,GA5CfgB,IAAMC,WCIzBzC,GAAaC,EAAQ,IA8GzB,SAAS2G,GAAazG,GAAQ,IACpBmF,EAAuCnF,EAAvCmF,cAAeI,EAAwBvF,EAAxBuF,oBACjBC,EACHN,GAAkBC,GAAiBI,EAAuB,IAC7D,OACE,wBAAI3F,IAAKuF,EAAchE,IACrB,4BAAKgE,EAAcpD,MACnB,wBACEL,UAAW7B,GAAW,CACpB0C,KAAM+C,GAAqBH,EAAeI,GAC1C7C,KAAM4C,GAAqBH,EAAeI,MAG3CC,EAAekB,QAAQ,GAN1B,KAQA,wBACEhF,UAAW7B,GAAW,CACpB0C,KAAMkD,GAAqBN,GAC3BzC,KAAM+C,GAAqBN,MAG5BA,EAAclF,OAAOyF,SAM9B,SAASiB,GAAiB3G,GAAQ,IACxBmF,EAAkBnF,EAAlBmF,cADuB,EAK3BA,EAAcX,SAFhBL,EAH6B,EAG7BA,+BACAC,EAJ6B,EAI7BA,+BAGF,OACE,6BACE,4BAAKe,EAAcpD,MACnB,+BACE,+BACE,4BACE,wBAAItB,MAAM,OAAV,MACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,wBACA,wBAAImG,OAAO,OAAX,WACA,wBAAIA,OAAO,OAAX,SAGJ,+BACGzB,EAAclF,OAAOW,KAAI,SAAAM,GAAK,OAC7B,kBAAC2F,GAAD,CACE3F,MAAOA,EACP4F,eAAgB5B,GAAkBC,GAClC4B,SAAU5C,EACV6C,SAAU5C,EACVxE,IAAKsB,EAAMC,WASzB,SAAS8F,GAAiBC,EAAYH,EAAUC,GAC9C,OAAOE,GAAcH,GAAYG,GAAcF,EAGjD,SAASH,GAAS7G,GAAQ,IAChBkB,EAA8ClB,EAA9CkB,MAAO4F,EAAuC9G,EAAvC8G,eAAgBC,EAAuB/G,EAAvB+G,SAAUC,EAAahH,EAAbgH,SAEnCE,EAAclC,GAAc9D,GAAS4F,EAAkB,IAC7D,OACE,wBAAIlH,IAAKsB,EAAMC,IACb,4BAAKD,EAAMC,IACX,4BAAKD,EAAMa,MACX,wBACEL,UAAW7B,GAAW,CACpB0C,KAAM0E,GAAiBC,EAAYH,EAAUC,GAC7CtE,KAAMuE,GAAiBC,EAAYH,EAAUC,MAG9CE,EAAWR,QAAQ,GANtB,KAQA,4BAAKxF,EAAMqD,QACX,4BAAKrD,EAAMhD,KAKFiJ,O,2MApMbrB,MAAQ,CACNzB,WAAY,GACZZ,MAAO,M,mFAGY,IAAD,OAClBgB,KACGvB,MAAK,SAAAmB,GACJ,EAAK0B,SAAS,CACZ1B,WAAYA,OAGf2B,OAAM,SAAAC,GACLzC,QAAQC,MAAMwC,GACd,EAAKF,SAAS,CACZtC,MAAOwC,EAAIC,e,+CAMjB,OAAO3E,KAAKuE,MAAMzB,WAAWe,QAAO,SAACC,EAAKV,GACxC,OAAOU,EAAMH,GAAkBP,KAC9B,K,+BAGK,IAAD,OACP,GAAwB,MAApBpD,KAAKuE,MAAMrC,MACb,OAAO,2BAAIlC,KAAKuE,MAAMrC,OAGxB,IAAM2D,EA+DV,SAAoB/C,GAClB,IAAI+C,EAAU,GASd,OARA/C,EAAWpD,SAAQ,SAAAkE,GACjBA,EAAclF,OAAOgB,SAAQ,SAAAC,GACtBkG,EAAQlG,EAAMqD,UACjB6C,EAAQlG,EAAMqD,QAAU,GAE1B6C,EAAQlG,EAAMqD,SAAWrD,EAAMoD,OAASpD,EAAMqC,gBAG3C6D,EAzEWC,CAAW9F,KAAKuE,MAAMzB,YAClCiD,EAAgB,GAWpB,OAVAC,OAAOC,KAAKJ,GAASnG,SAAQ,SAAAsD,GAC3B+C,EAAc1C,KAAK,CACjB7C,KAAMwC,EACNkD,MAAQL,EAAQ7C,GAAU,EAAKmD,yBAA4B,SAG/DJ,EAAgBA,EAAchH,MAAK,SAASC,EAAGC,GAC7C,OAAOD,EAAEkH,MAAQjH,EAAEiH,MAAQ,EAAIjH,EAAEiH,MAAQlH,EAAEkH,OAAS,EAAI,KAIxD,6BACE,kDACA,+BACE,+BACE,4BACE,wBAAIhH,MAAM,OAAV,eACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,mBAGJ,+BACGc,KAAKuE,MAAMzB,WAAWzD,KAAI,SAAAuE,GAAa,OACtC,kBAACsB,GAAD,CACEtB,cAAeA,EACfI,oBAAqB,EAAKmC,yBAC1B9H,IAAKuF,EAAchE,UAM3B,oDACA,+BACE,+BACE,4BACE,wBAAIV,MAAM,OAAV,WACA,wBAAIA,MAAM,OAAV,WAGJ,+BACG6G,EAAc1G,KAAI,SAAA2D,GAAM,OACvB,4BACE,4BAAKA,EAAOxC,MACZ,4BAAKwC,EAAOkD,MAAMf,QAAQ,GAA1B,WAMPnF,KAAKuE,MAAMzB,WAAWzD,KAAI,SAAAuE,GAAa,OACtC,kBAACwB,GAAD,CACExB,cAAeA,EACfvF,IAAKuF,EAAchE,a,GAvFPkB,IAAMC,WCMfqF,GAlBM,CACnBxG,GAAI,OACJyG,cAAe,CACb,CACEtE,SAAU,MACV9B,KAAM,KACNqG,QAAS,QACTC,kBAAmB,KACnBC,eAAgB,OAEhBC,6BAA8B,OAC9BC,YAAa,OACbC,YAAa,QACbC,YAAa,WCIJR,GAjBM,CACnBxG,GAAI,OACJyG,cAAe,CACb,CACEtE,SAAU,MACV9B,KAAM,KACNqG,QAAS,QACTC,kBAAmB,KACnBC,eAAgB,UAChBC,6BAA8B,MAC9BC,YAAa,OACbC,YAAa,QACbE,UAAW,WCOFT,GAnBM,CACnBxG,GAAI,OACJyG,cAAe,CACb,CACEtE,SAAU,MACV9B,KAAM,KACNqG,QAAS,QACTC,kBAAmB,OAEnBC,eAAgB,OAChBC,6BAA8B,OAC9BC,YAAa,OACbC,YAAa,QACbC,YAAa,QACbC,UAAW,WC8BFT,GA1CM,CACnBxG,GAAI,OACJyG,cAAe,CACb,CACEtE,SAAU,MACV9B,KAAM,KACNqG,QAAS,QACTC,kBAAmB,IAAM9J,EACzB+J,eAAgB,IAAMhK,EACtBiK,6BAA8B,KAAOjK,EACrCkK,YAAa,OACbC,YAAa,QACbE,UAAW,SAEb,CACE9E,SAAU,MACV9B,KAAM,KACNqG,QAAS,MAAQ9J,EACjB+J,kBAAmB,IAAM9J,EACzB+J,eAAgB,IAAMhK,EACtBiK,6BAA8B,KAAOjK,EACrCkK,YAAa,KAAOlK,EACpBmK,YAAa,MAAQnK,EACrBqK,UAAW,MAAQrK,IAGvBsK,eAAgB,CACd,CACE/E,SAAU,MACV9B,KAAM,KACNC,OAAQ,KACRoG,QAAS,MAAQ9J,EACjB+J,kBAAmB,IAAM9J,EACzB+J,eAAgB,IAAMhK,EACtBiK,6BAA8B,KAAOjK,EACrCkK,YAAa,KAAOlK,EACpBmK,YAAa,MAAQnK,EACrBqK,UAAW,MAAQrK,K,+NCrClB,SAASuK,GAAgBC,GAC9B,IAAIZ,E,4VAAY,IAAQY,GAQxB,OANAhB,OAAOC,KAAKG,GAAc1G,SAAQ,SAAArB,GACb,qBAARA,GAQf,SAA8BA,GAC5B,OAAQA,GACN,KAAKT,EACH,OAAO,EACT,QACE,OAAO,GAbyBqJ,CAAqB5I,KACrD+H,EAAa/H,GAgBnB,SAAsB6I,GACpB,GAAIC,MAAMD,IAA6B,kBAAXA,EAC1B,OAAOA,EAGT,IAAIE,EAAc,GACZC,EAAWH,EAAS,EACtBG,IACFH,IAAmB,GAInBE,EADEF,GAAU3K,EACE2K,EAAOI,YAAY,GAAK/K,EAAU,aACvC2K,GAAU1K,EACL0K,EAAOI,YAAY,GAAK9K,EAAU,YACvC0K,GAAUzK,EAavB,SAA0B8K,GACxB,IAAIC,EAAQD,EAAEE,WAAWC,MAAM,KAE/B,OADAF,EAAM,GAAKA,EAAM,GAAGG,QAAQ,wBAAyB,KAC9CH,EAAMI,KAAK,KAfFC,CAAiBX,EAAO/B,QAAQ,IAEhC+B,EAAOI,YAAY,GAAGK,QAAQ,SAAU,QAGpDN,IACFD,EAAc,IAAMA,GAGtB,OAAOA,EAzCiBU,CAAa1B,EAAa/H,QAI3C+H,E,8jBC0BF,SAAS2B,GAAcf,EAAWgB,GACvC,IAAI5B,EAAY,MAAQY,GACpBiB,EAAS,MAAQD,GAcrB,OAVA5B,EAkCK,SAAoCY,EAAWgB,GACpD,IAAI5B,EAAY,MAAQY,GACpBiB,EAAS,MAAQD,GAErB,IAAKC,EACH,OAAO7B,EAmBT,OAhBA6B,EAAUnK,GA9DZ,SAAwBiF,EAAQhB,GAC9B,OAAQA,GACN,IAAK,MACH,OAAOgB,EACT,IAAK,MACH,OAAOA,EAAS3G,EAAcE,IAChC,IAAK,MACH,OAAOyG,EAAS3G,EAAcC,IAChC,QAEE,OADA4F,QAAQC,MAAM,qBAAuBH,GAC9BgB,GAoDamF,CACtBD,EAAUnK,GACVsI,EAAarI,IAGfqI,EAAaxJ,GACXqL,EAAUnK,IACTsI,EAAanJ,GAAWmJ,EAAa7I,IAExC6I,EAAavJ,GACXoL,EAAUnK,IACTsI,EAAa5I,GAAgB4I,EAAa7I,IAE7C6I,EAAazI,GACXyI,EAAa7I,GAAoB0K,EAAUnK,GAEtCsI,EA1DQ+B,CAFf/B,EA+DK,SAAsCY,GAC3C,IAAIZ,EAAY,MAAQY,GAEnBZ,EAAa3I,GAGN2I,EAAa5I,GAGb4I,EAAahJ,KACvBgJ,EAAahJ,GACXgJ,EAAa5I,GAAgB4I,EAAa3I,IAJ5C2I,EAAa5I,GACX4I,EAAahJ,GAAgBgJ,EAAa3I,GAJ5C2I,EAAa3I,GACX2I,EAAahJ,GAAgBgJ,EAAa5I,GAU5C4I,EAAa3I,IACb2I,EAAa5I,IACb4I,EAAahJ,IAGXgJ,EAAa5I,KACb4I,EAAahJ,GAAgBgJ,EAAa3I,KAE1C2I,EAAa3I,GAAc,MAC3B2I,EAAa5I,GAAgB,MAC7B4I,EAAahJ,GAAgB,OAIjC,OAAOgJ,EA5FQgC,CAA6BhC,GAEY6B,IAE3CvK,GAWR,SAA2B0I,GAChC,OAAQA,EAAa5I,GAAgB4I,EAAahJ,GAAiB,IAZ1CiL,CAAkBjC,GAC3CA,EAAa/I,GAcR,SAAmC+I,GACxC,OAAOA,EAAa9I,GAAgB8I,EAAa7I,GAfd+K,CAA0BlC,GAC7DA,EAAa1J,GAkBR,SAAkC0J,GACvC,OAAQA,EAAapI,GAAQoI,EAAanJ,GAAY,IAnBrBsL,CAAyBnC,GAC1DA,EAAalJ,GAqBR,SAAqCkJ,GAC1C,OAAOA,EAAanJ,GAAWmJ,EAAapJ,GAtBPwL,CACnCpC,GAEFA,EAAajJ,GAsBR,SAAkCiJ,GACvC,OAAOA,EAAanJ,GAAWmJ,EAAa7I,GAvBVkL,CAAyBrC,GAEpDA,ECnDF,SAASsC,GAAgBC,EAAQC,GACtC,IAAInI,EAAe,GAUnB,OATAuF,OAAOC,KAAK0C,GAAQjJ,SAAQ,SAAArB,IAY9B,SAAkCA,EAAK6H,GACrC,GACiB,qBAAR7H,GACU,qBAAV6H,GACU,kBAAVA,EAEP,OAAO,EAET,OAAQ7H,GACN,KAAKT,EACH,OAAO,EACT,QACE,OAAO,IAvBLiL,CAAyBxK,EAAKsK,EAAOtK,MACvCoC,EAAapC,IACVsK,EAAOtK,GAAOuK,EAAevK,GAAQ,IACtC,KACA8G,QAAQ,OAIP1E,E,8jBCMF,SAASqI,GAAgBlJ,EAAImJ,GAClC,IAAI3C,EAAY,MAVlB,WACE,IAAI1H,EAAS,GAKb,OAJAA,EAAOsK,GAASpJ,IAAMoJ,GACtBtK,EAAOuK,GAAgBrJ,IAAMqJ,GAC7BvK,EAAOwK,GAAgBtJ,IAAMsJ,GAC7BxK,EAAOyK,GAAevJ,IAAMuJ,GACrBzK,EAKF0K,GAAexJ,IAEhBqI,EAAS,MAAQc,GAIjB3C,EAAaC,gBACfD,EAAaC,cAAgBD,EAAaC,cAAchH,KAAI,SAAAsJ,GAAM,OAChEZ,GAAcY,EAAQV,MAExB7B,EAAaC,cAAgBD,EAAaC,cAAchH,KACtD,SAACsJ,EAAQU,GACP,GAAIA,GAASjD,EAAaC,cAAclC,OAAS,EAC/C,OAAOwE,EAET,IAAMlI,EAAeiI,GACnBC,EACAvC,EAAaC,cAAcgD,EAAQ,IAGrC,OADAV,EAAO1K,GAAiBwC,EACjBkI,KAGXvC,EAAaC,cAAgBD,EAAaC,cAAchH,KAAI,SAAAsJ,GAAM,OAChE5B,GAAgB4B,OAIhBvC,EAAaU,iBACfV,EAAaU,eAAiBV,EAAaU,eAAezH,KAAI,SAAAsJ,GAAM,OAClEZ,GAAcY,EAAQV,MAExB7B,EAAaU,eAAiBV,EAAaU,eAAezH,KACxD,SAACsJ,EAAQU,GACP,GAAIA,GAASjD,EAAaU,eAAe3C,OAAS,EAChD,OAAOwE,EAET,IAAMlI,EAAeiI,GACnBC,EACAvC,EAAaU,eAAeuC,EAAQ,IAGtC,OADAV,EAAO1K,GAAiBwC,EACjBkI,KAGXvC,EAAaU,eAAiBV,EAAaU,eAAezH,KAAI,SAAAsJ,GAAM,OAClE5B,GAAgB4B,OAIpB,IAAMW,EAAelD,EAAaC,cAC9BD,EAAaC,cAAc,GAC3B,GAOJ,OALAD,EAAY,MACPA,EADO,GAEPkD,G,+NC1EP,IAAMxE,GAAoB,CAAC,OAAQ,OAAQ,OAAQ,QAE5C,SAASyE,KACd,OAAO,IAAI/H,SAAQ,SAACC,EAASC,GAC3B,IAAIyB,EAAW,GAEI2B,GAENpF,SAAQ,SAAAE,GACnBuD,EAASE,KAAK9B,GAAS3B,OAGzB4B,QAAQgC,IAAIL,GAAUxB,MAAK,SAAAjD,GACzB,IAAI4E,EAAa,GACjB5E,EAAOgB,SAAQ,SAAArE,GACb,IAAM+K,EAAe0C,GAAgBzN,EAAUuE,GAAIvE,GACnDiI,EAAWD,K,4VAAX,IAAqBhI,EAArB,GAAmC+K,OAGrC3E,EAAQ6B,S,ICiECkG,G,2MAhEbjF,MAAQ,CACN7F,OAAQ,GACRC,YAAa,GACbuD,MAAO,KACPtD,QAASjC,EACTkC,cAAe,CACblC,EACAC,EACAE,EACAE,EACAC,EACAC,EACAR,EACAU,EACAP,EACAa,EACAC,I,mFAIiB,IAAD,OAClB4L,KACG5H,MAAK,SAAAjD,GACJ,EAAK8F,SAAS,CACZ9F,OAAQA,OAGX+F,OAAM,SAAAC,GACLzC,QAAQC,MAAMwC,GACd,EAAKF,SAAS,CACZtC,MAAOwC,EAAIC,aAIjBP,KAAoBzC,MAAK,SAAAhD,GACvB,EAAK6F,SAAS,CACZ7F,YAAaA,S,+BAKT,IAAD,OACP,OAAwB,MAApBqB,KAAKuE,MAAMrC,MACN,2BAAIlC,KAAKuE,MAAMrC,OAItB,6BACE,qCACA,kBAAC,GAAD,CACExD,OAAQsB,KAAKuE,MAAM7F,OACnBC,YAAaqB,KAAKuE,MAAM5F,YACxBC,QAASoB,KAAKuE,MAAM3F,QACpBqG,OAAQ,SAAArG,GACN,EAAK4F,SAAS,CAAE5F,QAASA,KAE3BC,cAAemB,KAAKuE,MAAM1F,cAC1BiB,gBAAiBE,KAAKvB,MAAMqB,uB,GA1DhBgB,IAAMC,W,kkBC4Fb0I,G,2MA1FblF,MAAQ,CACNmF,cAAe,KACfxH,MAAO,KACPtD,QAASjC,EACTkC,cAAe,CACbjC,EACAI,EACAC,EACAC,EACAc,EACAV,EACAZ,EACAU,EACAC,EACAR,EACAa,I,mFAIiB,IAAD,OAClB6D,GAASvB,KAAKvB,MAAMmB,IAAI+B,MAAK,SAAAsG,GAC3B,EAAKzD,SAAS,CACZ4B,aAAa,MACR6B,EADO,GAEPa,GAAgB,EAAKrK,MAAMmB,GAAIqI,W,4CAMnB,IACb7B,EAAiBpG,KAAKuE,MAAtB6B,aAER,OAAKA,EAAaC,cAIhB,6BACE,+CACA,kBAAC,GAAD,CACEvH,KAAMZ,EACNQ,OAAQ0H,EAAaC,cACrB1H,YAAa,GACbE,cAAemB,KAAKuE,MAAM1F,iBATvB,gC,6CAea,IACduH,EAAiBpG,KAAKuE,MAAtB6B,aAER,OAAKA,EAAaU,eAIhB,6BACE,iDACA,kBAAC,GAAD,CACEhI,KAAMX,EACNO,OAAQ0H,EAAaU,eACrBnI,YAAa,GACbE,cAAemB,KAAKuE,MAAM1F,iBATvB,gC,+BAgBT,GAAwB,MAApBmB,KAAKuE,MAAMrC,MACb,OAAO,2BAAIlC,KAAKuE,MAAMrC,OAFjB,IAKCkE,EAAiBpG,KAAKuE,MAAtB6B,aAER,OAAKA,EAKH,6BACE,4BAAKA,EAAa5F,MAEjBR,KAAK2J,sBACL3J,KAAK4J,wBARD,kC,GA7Ea9I,IAAMC,W,+NCpBhC,IAAM+D,GAAoB,CACxB,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QACA,QACA,SACA,UAGK,SAAS+E,KACd,OAAO,IAAIrI,SAAQ,SAACC,EAASC,GAC3B,IAAIyB,EAAW,GAEI2B,GAENpF,SAAQ,SAAAE,GACnBuD,EAASE,KAAK9B,GAAS3B,OAGzB4B,QAAQgC,IAAIL,GAAUxB,MAAK,SAAAjD,GACzB,IAAI4E,EAAa,GACjB5E,EAAOgB,SAAQ,SAAArE,GACb,IAAM+K,EAAe0C,GAAgBzN,EAAUuE,GAAIvE,GACnDiI,EAAWD,K,4VAAX,IAAqBhI,EAArB,GAAmC+K,OAGrC3E,EAAQ6B,S,ICiDCwG,G,2MAhEbvF,MAAQ,CACN7F,OAAQ,GACRC,YAAa,GACbuD,MAAO,KACPtD,QAASjC,EACTkC,cAAe,CACblC,EACAC,EACAE,EACAE,EACAC,EACAC,EACAR,EACAU,EACAP,EACAa,EACAC,I,mFAIiB,IAAD,OAClBkM,KACGlI,MAAK,SAAAjD,GACJ,EAAK8F,SAAS,CACZ9F,OAAQA,OAGX+F,OAAM,SAAAC,GACLzC,QAAQC,MAAMwC,GACd,EAAKF,SAAS,CACZtC,MAAOwC,EAAIC,aAIjBP,KAAoBzC,MAAK,SAAAhD,GACvB,EAAK6F,SAAS,CACZ7F,YAAaA,S,+BAKT,IAAD,OACP,OAAwB,MAApBqB,KAAKuE,MAAMrC,MACN,2BAAIlC,KAAKuE,MAAMrC,OAItB,6BACE,wCACA,kBAAC,GAAD,CACExD,OAAQsB,KAAKuE,MAAM7F,OACnBC,YAAaqB,KAAKuE,MAAM5F,YACxBC,QAASoB,KAAKuE,MAAM3F,QACpBqG,OAAQ,SAAArG,GACN,EAAK4F,SAAS,CAAE5F,QAASA,KAG3BkB,gBAAiBE,KAAKvB,MAAMqB,uB,GA1DfgB,IAAMC,W,+NCnB7B,IAAM+D,GAAoB,CACxB,OACA,OACA,OACA,OACA,OACA,OACA,OACA,SAGK,SAASiF,KACd,OAAO,IAAIvI,SAAQ,SAACC,EAASC,GAC3B,IAAIyB,EAAW,GAEI2B,GAENpF,SAAQ,SAAAE,GACnBuD,EAASE,KAAK9B,GAAS3B,OAGzB4B,QAAQgC,IAAIL,GAAUxB,MAAK,SAAAjD,GACzB,IAAI4E,EAAa,GACjB5E,EAAOgB,SAAQ,SAAArE,GACb,IAAM+K,EAAe0C,GAAgBzN,EAAUuE,GAAIvE,GACnDiI,EAAWD,K,4VAAX,IAAqBhI,EAArB,GAAmC+K,OAGrC3E,EAAQ6B,S,IC6BC0G,G,2MApDbzF,MAAQ,CACN7F,OAAQ,GACRC,YAAa,GACbuD,MAAO,KACPtD,QAASjC,EACTkC,cAAe,CAAClC,EAAsBG,EAAcC,I,mFAGjC,IAAD,OAClBgN,KACGpI,MAAK,SAAAjD,GACJ,EAAK8F,SAAS,CACZ9F,OAAQA,OAGX+F,OAAM,SAAAC,GACLzC,QAAQC,MAAMwC,GACd,EAAKF,SAAS,CACZtC,MAAOwC,EAAIC,aAIjBP,KAAoBzC,MAAK,SAAAhD,GACvB,EAAK6F,SAAS,CACZ7F,YAAaA,S,+BAKT,IAAD,OACP,OAAwB,MAApBqB,KAAKuE,MAAMrC,MACN,2BAAIlC,KAAKuE,MAAMrC,OAItB,6BACE,oCACA,kBAAC,GAAD,CACExD,OAAQsB,KAAKuE,MAAM7F,OACnBC,YAAaqB,KAAKuE,MAAM5F,YACxBC,QAASoB,KAAKuE,MAAM3F,QACpBqG,OAAQ,SAAArG,GACN,EAAK4F,SAAS,CAAE5F,QAASA,KAE3BC,cAAemB,KAAKuE,MAAM1F,cAC1BiB,gBAAiBE,KAAKvB,MAAMqB,uB,GA9CjBgB,IAAMC,WCIrBkJ,GAAgB,kBAMhB3L,GAAaC,EAAQ,IAsEZ2L,G,2MAnEb3F,MAAQ,CACN4F,WAAYF,GACZG,YAAa,M,mFAIb7L,EAAQ,KAAU8L,W,yCAIlB,GAAIrK,KAAKuE,MAAM6F,YACb,OAAO,kBAAC,GAAD,CAAaxK,GAAII,KAAKuE,MAAM6F,cAGrC,OAAQpK,KAAKuE,MAAM4F,YACjB,IAzBgB,iBA0Bd,OAAO,kBAAC,GAAD,CAAWrK,gBAAiBE,KAAKF,gBAAgBwK,KAAKtK,QAC/D,KAAKiK,GACH,OAAO,kBAAC,GAAD,CAAWnK,gBAAiBE,KAAKF,gBAAgBwK,KAAKtK,QAC/D,IA3Be,iBA4Bb,OAAO,kBAAC,GAAD,CAAUF,gBAAiBE,KAAKF,gBAAgBwK,KAAKtK,QAC9D,IA5Bc,eA6BZ,OAAO,kBAAC,GAAD,CAASF,gBAAiBE,KAAKF,gBAAgBwK,KAAKtK,QAC7D,IA7Be,gBA8Bb,OAAO,kBAAC,GAAD,CAAUF,gBAAiBE,KAAKF,gBAAgBwK,KAAKtK,QAC9D,IA9Ba,cA+BX,OAAO,kBAAC,GAAD,CAAQF,gBAAiBE,KAAKF,gBAAgBwK,KAAKtK,QAC5D,QACE,OAAO,iC,mCAIAuK,EAAOC,GAAO,IAAD,OACxB,OACE,4BACEnK,QAAS,WACP,EAAKmE,SAAS,CAAE2F,WAAYK,EAAMJ,YAAa,QAEjDjK,UAAW7B,GAAW,CACpBmM,OAAQzK,KAAKuE,MAAM4F,aAAeK,KAGnCD,K,sCAKS3K,GACdI,KAAKwE,SAAS,CAAE4F,YAAaxK,M,+BAI7B,OACE,6BACE,4CACCI,KAAK0K,aAAa,YAjEL,kBAkEb1K,KAAK0K,aAAa,mBAAoBT,IACtCjK,KAAK0K,aAAa,YAjEN,kBAkEZ1K,KAAK0K,aAAa,WAhEN,iBAiEZ1K,KAAK0K,aAAa,OAhER,eAiEV1K,KAAK0K,aAAa,QAnEP,gBAoEX1K,KAAK2K,wB,GA9DI7J,IAAMC,WCPJ6J,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5J,MAAK,SAAA6J,GACjCA,EAAaC,kB","file":"static/js/main.ec755086.chunk.js","sourcesContent":["export function yieldIsGood(stockData) {\r\n  const { directYield } = stockData;\r\n\r\n  return directYield > getYieldTarget();\r\n}\r\n\r\nexport function yieldIsVeryGood(stockData) {\r\n  const { directYield } = stockData;\r\n  return directYield > getYieldTarget() * 1.25;\r\n}\r\n\r\nexport function peIsGood(stockData) {\r\n  const { priceEarningsRatio, directYield } = stockData;\r\n\r\n  if (priceEarningsRatio <= 0) {\r\n    return false;\r\n  }\r\n\r\n  return 1 / (directYield / 100) >= priceEarningsRatio;\r\n}\r\n\r\nexport function peIsVeryGood(stockData) {\r\n  const { priceEarningsRatio, directYield } = stockData;\r\n  return (\r\n    peIsGood(stockData) && 1 / (directYield / 100) >= priceEarningsRatio * 2\r\n  );\r\n}\r\n\r\nexport function peIsVeryBad(stockData) {\r\n  const { priceEarningsRatio } = stockData;\r\n  return priceEarningsRatio <= 0;\r\n}\r\n\r\nfunction getYieldTarget() {\r\n  // TODO: get tenYearsBondInterest from some API?\r\n  const tenYearsBondInterest = -0.2;\r\n  const riskPremium = 5;\r\n  return tenYearsBondInterest + riskPremium;\r\n}\r\n\r\nconst averageOMXS30volatility = 21.6;\r\n\r\nexport function volatilityIsGood(stockData) {\r\n  const { volatility } = stockData;\r\n  return volatility <= averageOMXS30volatility * 0.75;\r\n}\r\n\r\nexport function volatilityIsVeryGood(stockData) {\r\n  const { volatility } = stockData;\r\n  return volatility <= averageOMXS30volatility * 0.5;\r\n}\r\n\r\nexport function volatilityIsBad(stockData) {\r\n  const { volatility } = stockData;\r\n  return volatility > averageOMXS30volatility * 1.25;\r\n}\r\n\r\nexport function volatilityIsVeryBad(stockData) {\r\n  const { volatility } = stockData;\r\n  return volatility > averageOMXS30volatility * 1.9;\r\n}\r\n","export const exchangeRates = {\n  DKK: 1.41,\n  USD: 9.42\n};\n\nexport const BILLION = 1000000000;\nexport const MILLION = 1000000;\nexport const THOUSAND = 1000;\n\nexport const OPERATING_MARGIN = \"operatingMargin\";\nexport const PRICE_EARNINGS_RATIO = \"priceEarningsRatio\";\nexport const PRICE_SALES_RATIO = \"priceSalesRatio\";\nexport const PRICE_BOOK_VALUE = \"priceBookValue\";\nexport const DIRECT_YIELD = \"directYield\";\nexport const VOLATILITY = \"volatility\";\nexport const NUMBER_OF_EMPLOYEES = \"numberOfEmployees\";\nexport const REVENUE = \"revenue\"; // = sales\nexport const REVENUE_PER_EMPLOYEE = \"revenuePerEmployee\";\nexport const REVENUE_PER_SHARE = \"revenuePerShare\";\nexport const TOTAL_ASSETS = \"totalAssets\";\nexport const EARNINGS_PER_SHARE = \"earningsPerShare\";\nexport const NET_EARNINGS = \"netEarnings\";\nexport const NUMBER_OF_SHARES = \"numberOfShares\";\nexport const TOTAL_EQUITY = \"totalEquity\"; // = eget kapital\nexport const TOTAL_DEBT = \"totalDebt\";\nexport const SOLIDITY = \"solidity\";\nexport const MARKET_CAP = \"marketCap\";\nexport const YEAR = \"year\";\nexport const ID = \"id\";\nexport const LAST_PRICE = \"lastPrice\";\nexport const CURRENCY = \"currency\";\nexport const EBIT = \"earningsBeforeInterestAndTax\";\nexport const CHANGE_VALUES = \"changeValues\";\n\nexport const ANNUAL_REPORTS_TABLE = \"annualReportsTable\";\nexport const INTERIM_REPORTS_TABLE = \"interimReportsTable\";\nexport const MULTIPLE_STOCKS_TABLE = \"multipleStocksTable\";\n","import {\n  OPERATING_MARGIN,\n  REVENUE_PER_SHARE,\n  REVENUE_PER_EMPLOYEE,\n  REVENUE,\n  NUMBER_OF_EMPLOYEES,\n  VOLATILITY,\n  DIRECT_YIELD,\n  PRICE_SALES_RATIO,\n  PRICE_EARNINGS_RATIO,\n  TOTAL_ASSETS,\n  EARNINGS_PER_SHARE,\n  PRICE_BOOK_VALUE,\n  SOLIDITY,\n  MARKET_CAP,\n  YEAR,\n  ID,\n  EBIT,\n  NET_EARNINGS\n} from \"./constants\";\n\nexport function translate(key) {\n  switch (key) {\n    case PRICE_EARNINGS_RATIO:\n      return \"P/E\";\n    case PRICE_SALES_RATIO:\n      return \"P/S\";\n    case DIRECT_YIELD:\n      return \"Direktavkastning (%)\";\n    case VOLATILITY:\n      return \"Volatilitet\";\n    case NUMBER_OF_EMPLOYEES:\n      return \"Anställda\";\n    case REVENUE:\n      return \"Omsättning\";\n    case REVENUE_PER_EMPLOYEE:\n      return \"Omsättning / anställd\";\n    case REVENUE_PER_SHARE:\n      return \"Omsättning / aktie\";\n    case OPERATING_MARGIN:\n      return \"Rörelsemarginal (%)\";\n    case TOTAL_ASSETS:\n      return \"Tillgångar\";\n    case EARNINGS_PER_SHARE:\n      return \"EPS\";\n    case PRICE_BOOK_VALUE:\n      return \"P/B\";\n    case SOLIDITY:\n      return \"Soliditet (%)\";\n    case MARKET_CAP:\n      return \"Börsvärde\";\n    case YEAR:\n      return \"År\";\n    case ID:\n      return \"ID\";\n    case EBIT:\n      return \"EBIT\";\n    case NET_EARNINGS:\n      return \"Vinst\";\n    default:\n      return \"\";\n  }\n}\n","import React from \"react\";\nimport {\n  yieldIsGood,\n  yieldIsVeryGood,\n  peIsGood,\n  peIsVeryGood,\n  volatilityIsGood,\n  volatilityIsBad,\n  volatilityIsVeryGood,\n  volatilityIsVeryBad,\n  peIsVeryBad\n} from \"./stockIndicators\";\nimport { stockIsOwned } from \"../stockUtils\";\nimport { translate } from \"../translate\";\nimport {\n  PRICE_EARNINGS_RATIO,\n  DIRECT_YIELD,\n  VOLATILITY,\n  ID,\n  ANNUAL_REPORTS_TABLE,\n  YEAR,\n  MULTIPLE_STOCKS_TABLE,\n  INTERIM_REPORTS_TABLE\n} from \"../constants\";\n\nconst classNames = require(\"classnames\");\n\nfunction StockTable(props) {\n  const { stocks, ownedStocks, sortKey, columnsToShow, type } = props;\n\n  if (sortKey) {\n    stocks.sort((a, b) => {\n      return b[sortKey] - a[sortKey];\n    });\n  }\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th width=\"40%\">{getMainColumn(type)}</th>\n          {columnsToShow.map(column => {\n            return (\n              <th width=\"15%\" key={column}>\n                {translate(column)}\n              </th>\n            );\n          })}\n        </tr>\n      </thead>\n      <tbody>\n        {stocks.map(stockData => {\n          const owned = stockIsOwned(stockData.id, ownedStocks);\n          return (\n            <Stock\n              stockData={stockData}\n              key={stockData.id}\n              owned={owned}\n              columnsToShow={columnsToShow}\n              showSingleStock={props.showSingleStock}\n              type={type}\n            />\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nfunction getMainColumn(tableType) {\n  switch (tableType) {\n    case ANNUAL_REPORTS_TABLE:\n      return translate(YEAR);\n    case INTERIM_REPORTS_TABLE:\n      return \"Period\";\n    default:\n      return \"Aktie\";\n  }\n}\n\nclass Stock extends React.Component {\n  handleClick() {\n    this.props.showSingleStock(this.props.stockData.id);\n  }\n\n  renderMainColumn() {\n    const { type, stockData, owned } = this.props;\n    switch (type) {\n      case ANNUAL_REPORTS_TABLE:\n        return <td>{stockData.year}</td>;\n      case INTERIM_REPORTS_TABLE:\n        return (\n          <td>\n            {stockData.year} {stockData.period}\n          </td>\n        );\n      default:\n        return (\n          <td\n            className={classNames({\n              owned: owned\n            })}\n          >\n            <a href=\"#\" onClick={e => this.handleClick(e)}>\n              {stockData.name}\n            </a>\n          </td>\n        );\n    }\n  }\n\n  renderStockData(column) {\n    const { stockData, type } = this.props;\n    switch (type) {\n      case ANNUAL_REPORTS_TABLE:\n      case INTERIM_REPORTS_TABLE:\n        if (stockData.changeValues && stockData.changeValues[column]) {\n          const sign = stockData.changeValues[column] > 0 ? \"+\" : \"\";\n          return (\n            stockData[column] +\n            \" (\" +\n            sign +\n            stockData.changeValues[column] +\n            \"%)\"\n          );\n        }\n        return stockData[column];\n      default:\n        return stockData[column];\n    }\n  }\n\n  render() {\n    const { stockData, columnsToShow } = this.props;\n\n    return (\n      <tr key={stockData.id}>\n        {this.renderMainColumn()}\n        {columnsToShow.map(column => {\n          return (\n            <td\n              width=\"15%\"\n              key={column}\n              className={getClassNames(column, stockData)}\n            >\n              {this.renderStockData(column)}\n            </td>\n          );\n        })}\n      </tr>\n    );\n  }\n}\n\nfunction getClassNames(key, stockData) {\n  switch (key) {\n    case \"priceEarningsRatio\":\n      return classNames({\n        good: peIsGood(stockData),\n        veryGood: peIsVeryGood(stockData),\n        veryBad: peIsVeryBad(stockData)\n      });\n    case \"directYield\":\n      return classNames({\n        good: yieldIsGood(stockData),\n        veryGood: yieldIsVeryGood(stockData)\n      });\n    case \"volatility\":\n      return classNames({\n        good: volatilityIsGood(stockData),\n        veryGood: volatilityIsVeryGood(stockData),\n        bad: volatilityIsBad(stockData),\n        veryBad: volatilityIsVeryBad(stockData)\n      });\n    default:\n      return classNames({});\n  }\n}\n\nStockTable.defaultProps = {\n  type: MULTIPLE_STOCKS_TABLE,\n  columnsToShow: [ID, PRICE_EARNINGS_RATIO, DIRECT_YIELD, VOLATILITY]\n};\n\nexport default StockTable;\n","export function stockIsOwned(stockId, ownedStocks) {\n  let found = false;\n  ownedStocks.forEach(stock => {\n    if (stock.id === stockId) {\n      found = true;\n      return;\n    }\n  });\n  return found;\n}\n","import { exchangeRates } from \"./constants\";\n\nvar rp = require(\"request-promise-native\");\n\nlet cachedStocks = {};\n\nexport function getStock(id) {\n  if (cachedStocks[id] != null) {\n    return Promise.resolve(cachedStocks[id]);\n  }\n\n  return new Promise((resolve, reject) => {\n    rp(\"https://avanza.se/_mobile/market/stock/\" + id).then(stockData => {\n      let parsedData = JSON.parse(stockData);\n\n      parsedData = transformJson(parsedData);\n      parsedData = convertToSEK(parsedData);\n\n      cachedStocks[parsedData.id] = parsedData;\n      resolve(parsedData);\n    });\n  });\n}\n\nexport function getStockWithAmount(stock) {\n  return new Promise((resolve, reject) => {\n    getStock(stock.id).then(stockData => {\n      resolve({ ...stock, ...stockData });\n    });\n  });\n}\n\n// Convert stock data json into a format that's easier to use\nfunction transformJson(stockData) {\n  // Add more fields from stockData here if necessary\n  return {\n    name: stockData.name,\n    id: stockData.id,\n    directYield: stockData.keyRatios.directYield,\n    priceEarningsRatio: stockData.keyRatios.priceEarningsRatio,\n    volatility: stockData.keyRatios.volatility,\n    currency: stockData.currency,\n    lastPrice: stockData.lastPrice\n  };\n}\n\n// TODO: Get currency exchange rates from some API\nfunction convertToSEK(stockData) {\n  switch (stockData.currency) {\n    case \"SEK\":\n      return stockData;\n    case \"USD\":\n      return {\n        ...stockData,\n        currency: \"SEK\",\n        lastPrice: stockData.lastPrice * exchangeRates.USD\n      };\n    case \"DKK\":\n      return {\n        ...stockData,\n        currency: \"SEK\",\n        lastPrice: stockData.lastPrice * exchangeRates.DKK\n      };\n    default:\n      console.error(\"Missing currency: \" + stockData.currency);\n      return stockData;\n  }\n}\n","import { getStock } from \"../avanza\";\n\nconst interestingYieldStocks = [\n  \"5261\",\n  \"5332\",\n  \"5241\",\n  \"52301\",\n  \"632578\",\n  \"569438\",\n  \"5586\",\n  \"5256\",\n  \"5264\",\n  \"96767\",\n  \"5455\",\n  \"5422\",\n  \"703653\",\n  \"572897\"\n];\n\nexport function getInterestingYieldStocks() {\n  return new Promise((resolve, reject) => {\n    let promises = [];\n\n    interestingYieldStocks.forEach(id => {\n      promises.push(getStock(id));\n    });\n\n    Promise.all(promises).then(stocks => {\n      let returnData = [];\n      stocks.forEach(stockData => {\n        returnData.push(stockData);\n      });\n\n      resolve(returnData);\n    });\n  });\n}\n","const basePortfolioStrategy = {\n  minShare: 20,\n  maxShare: 30,\n  minNumberOfStocks: 8,\n  maxNumberOfStocks: 12,\n  minRatioOfEachShareInPortfolio: 5,\n  maxRatioOfEachShareInPortfolio: 30\n};\n\nconst portfolios = [\n  {\n    id: \"1\",\n    name: \"Basportföljen\",\n    stocks: [\n      {\n        id: \"5465\",\n        name: \"Axfood\",\n        amount: 10,\n        sector: \"Konsumentvaror\"\n      }\n    ],\n    strategy: {\n      ...basePortfolioStrategy,\n      minShare: 40,\n      maxShare: 60\n    }\n  },\n  {\n    id: \"2\",\n    name: \"Raketportföljen\",\n    stocks: [\n      {\n        id: \"3323\",\n        name: \"Apple Inc\",\n        amount: 1,\n        sector: \"Teknik\"\n      }\n    ],\n    strategy: basePortfolioStrategy\n  }\n];\n\nexport default portfolios;\n","import { getStockWithAmount } from \"../avanza\";\n// import portfolios from \"../data/portfolioData\";\nimport portfolios from \"./portfolioData\";\nimport { getStockValue } from \"./portfolioUtils\";\n\nexport function getPortfolios() {\n  return new Promise((resolve, reject) => {\n    let promises = [];\n    portfolios.forEach(portfolio => {\n      promises.push(getStocksInPortfolio(portfolio));\n    });\n    Promise.all(promises).then(returnData => {\n      resolve(returnData);\n    });\n  });\n}\n\nfunction getStocksInPortfolio(portfolio) {\n  let returnData = portfolio;\n  return new Promise((resolve, reject) => {\n    let promises = [];\n    portfolio.stocks.forEach(stock => {\n      promises.push(getStockWithAmount(stock));\n    });\n    Promise.all(promises).then(stocks => {\n      returnData.stocks = stocks.sort((a, b) => {\n        return getStockValue(b) - getStockValue(a);\n      });\n      resolve(returnData);\n    });\n  });\n}\n","import { getPortfolios } from \"./dataRetriever\";\n\nexport function getPortfolioValue(portfolioData) {\n  return portfolioData.stocks.reduce((sum, stock) => {\n    return sum + getStockValue(stock);\n  }, 0);\n}\n\nexport function portfolioRatioIsGood(portfolioData, totalPortfolioValue) {\n  const portfolioRatio =\n    (getPortfolioValue(portfolioData) / totalPortfolioValue) * 100;\n  return (\n    portfolioRatio >= portfolioData.strategy.minShare &&\n    portfolioRatio <= portfolioData.strategy.maxShare\n  );\n}\n\nexport function numberOfStocksIsGood(portfolioData) {\n  return (\n    portfolioData.stocks.length >= portfolioData.strategy.minNumberOfStocks &&\n    portfolioData.stocks.length <= portfolioData.strategy.maxNumberOfStocks\n  );\n}\n\nexport function getStockValue(stock) {\n  return stock.amount * stock.lastPrice;\n}\n\nexport function getAllOwnedStocks() {\n  return new Promise((resolve, reject) => {\n    let stocks = [];\n    getPortfolios().then(portfolios => {\n      portfolios.forEach(portfolio => {\n        stocks = stocks.concat(portfolio.stocks);\n      });\n      resolve(stocks);\n    });\n  });\n}\n","import React from \"react\";\r\nimport StockTable from \"../components/StockTable\";\r\nimport { getInterestingYieldStocks } from \"./dataRetriever\";\r\n\r\nimport { getAllOwnedStocks } from \"../Portfolio/portfolioUtils\";\r\n\r\nclass BestYield extends React.Component {\r\n  state = {\r\n    stocks: [],\r\n    ownedStocks: [],\r\n    error: null,\r\n    sortKey: \"directYield\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    getInterestingYieldStocks()\r\n      .then(stocks => {\r\n        this.setState({\r\n          stocks: stocks\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n        this.setState({\r\n          error: err.message\r\n        });\r\n      });\r\n\r\n    getAllOwnedStocks().then(ownedStocks => {\r\n      this.setState({\r\n        ownedStocks: ownedStocks\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error != null) {\r\n      return <p>{this.state.error}</p>;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h1>Intressanta utdelningsaktier</h1>\r\n        <StockTable\r\n          stocks={this.state.stocks}\r\n          ownedStocks={this.state.ownedStocks}\r\n          sortKey={this.state.sortKey}\r\n          showSingleStock={this.props.showSingleStock}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BestYield;\r\n","import { getStock } from \"../avanza\";\n\nconst omsx30stocks = [\n  \"5447\",\n  \"5580\",\n  \"5271\",\n  \"5431\",\n  \"5234\",\n  \"5235\",\n  \"5236\",\n  \"5564\",\n  \"5238\",\n  \"5240\",\n  \"764241\",\n  \"5282\",\n  \"5364\",\n  \"5286\",\n  \"5247\",\n  \"5369\",\n  \"5249\",\n  \"5471\",\n  \"5270\",\n  \"5255\",\n  \"5257\",\n  \"5259\",\n  \"5260\",\n  \"5263\",\n  \"5264\",\n  \"5241\",\n  \"5266\",\n  \"5386\",\n  \"5479\",\n  \"5269\"\n];\n\nconst omsx30otherVersions = [\"5261\", \"5265\", \"5256\"];\n\nconst interestingStocks = [\"5465\", \"5245\", \"31607\", \"5287\"];\n\nexport function getBlueChipStocks() {\n  return new Promise((resolve, reject) => {\n    let promises = [];\n\n    let stocksToShow = omsx30stocks.concat(omsx30otherVersions);\n    stocksToShow = stocksToShow.concat(interestingStocks);\n\n    stocksToShow.forEach(id => {\n      promises.push(getStock(id));\n    });\n\n    Promise.all(promises).then(stocks => {\n      let returnData = [];\n      stocks.forEach(stockData => {\n        returnData.push(stockData);\n      });\n\n      resolve(returnData);\n    });\n  });\n}\n","import React from \"react\";\r\nimport StockTable from \"../components/StockTable\";\r\nimport { getBlueChipStocks } from \"./dataRetriever\";\r\n\r\nimport { getAllOwnedStocks } from \"../Portfolio/portfolioUtils\";\r\n\r\nclass BlueChip extends React.Component {\r\n  state = {\r\n    stocks: [],\r\n    ownedStocks: [],\r\n    error: null,\r\n    sortKey: \"priceEarningsRatio\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    getBlueChipStocks()\r\n      .then(stocks => {\r\n        this.setState({\r\n          stocks: stocks\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n        this.setState({\r\n          error: err.message\r\n        });\r\n      });\r\n\r\n    getAllOwnedStocks().then(ownedStocks => {\r\n      this.setState({\r\n        ownedStocks: ownedStocks\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error != null) {\r\n      return <p>{this.state.error}</p>;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h1>Intressanta basaktier</h1>\r\n        <StockTable\r\n          stocks={this.state.stocks}\r\n          ownedStocks={this.state.ownedStocks}\r\n          sortKey={this.state.sortKey}\r\n          onSort={sortKey => {\r\n            this.setState({ sortKey: sortKey });\r\n          }}\r\n          showSingleStock={this.props.showSingleStock}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BlueChip;\r\n","import React from \"react\";\r\nimport { getPortfolios } from \"./dataRetriever\";\r\nimport {\r\n  getPortfolioValue,\r\n  portfolioRatioIsGood,\r\n  numberOfStocksIsGood,\r\n  getStockValue\r\n} from \"./portfolioUtils\";\r\nimport { PRICE_EARNINGS_RATIO } from \"../constants\";\r\n\r\nvar classNames = require(\"classnames\");\r\n\r\nclass Portfolio extends React.Component {\r\n  state = {\r\n    portfolios: [],\r\n    error: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    getPortfolios()\r\n      .then(portfolios => {\r\n        this.setState({\r\n          portfolios: portfolios\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n        this.setState({\r\n          error: err.message\r\n        });\r\n      });\r\n  }\r\n\r\n  getTotalPortfolioValue() {\r\n    return this.state.portfolios.reduce((sum, portfolio) => {\r\n      return sum + getPortfolioValue(portfolio);\r\n    }, 0);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error != null) {\r\n      return <p>{this.state.error}</p>;\r\n    }\r\n\r\n    const sectors = getSectors(this.state.portfolios);\r\n    let sortedSectors = [];\r\n    Object.keys(sectors).forEach(sector => {\r\n      sortedSectors.push({\r\n        name: sector,\r\n        value: (sectors[sector] / this.getTotalPortfolioValue()) * 100\r\n      });\r\n    });\r\n    sortedSectors = sortedSectors.sort(function(a, b) {\r\n      return a.value < b.value ? 1 : b.value < a.value ? -1 : 0;\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <h1>Alla portföljer</h1>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th width=\"40%\">Portfölj</th>\r\n              <th width=\"30%\">Andel</th>\r\n              <th width=\"30%\">Antal innehav</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.state.portfolios.map(portfolioData => (\r\n              <PortfolioRow\r\n                portfolioData={portfolioData}\r\n                totalPortfolioValue={this.getTotalPortfolioValue()}\r\n                key={portfolioData.id}\r\n              />\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n\r\n        <h2>Branschfördelning</h2>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th width=\"40%\">Bransch</th>\r\n              <th width=\"30%\">Andel</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {sortedSectors.map(sector => (\r\n              <tr>\r\n                <td>{sector.name}</td>\r\n                <td>{sector.value.toFixed(2)}%</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n\r\n        {this.state.portfolios.map(portfolioData => (\r\n          <PortfolioDetails\r\n            portfolioData={portfolioData}\r\n            key={portfolioData.id}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction getSectors(portfolios) {\r\n  let sectors = {};\r\n  portfolios.forEach(portfolioData => {\r\n    portfolioData.stocks.forEach(stock => {\r\n      if (!sectors[stock.sector]) {\r\n        sectors[stock.sector] = 0;\r\n      }\r\n      sectors[stock.sector] += stock.amount * stock.lastPrice;\r\n    });\r\n  });\r\n  return sectors;\r\n}\r\n\r\nfunction PortfolioRow(props) {\r\n  const { portfolioData, totalPortfolioValue } = props;\r\n  const portfolioRatio =\r\n    (getPortfolioValue(portfolioData) / totalPortfolioValue) * 100;\r\n  return (\r\n    <tr key={portfolioData.id}>\r\n      <td>{portfolioData.name}</td>\r\n      <td\r\n        className={classNames({\r\n          good: portfolioRatioIsGood(portfolioData, totalPortfolioValue),\r\n          bad: !portfolioRatioIsGood(portfolioData, totalPortfolioValue)\r\n        })}\r\n      >\r\n        {portfolioRatio.toFixed(2)}%\r\n      </td>\r\n      <td\r\n        className={classNames({\r\n          good: numberOfStocksIsGood(portfolioData),\r\n          bad: !numberOfStocksIsGood(portfolioData)\r\n        })}\r\n      >\r\n        {portfolioData.stocks.length}\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nfunction PortfolioDetails(props) {\r\n  const { portfolioData } = props;\r\n  const {\r\n    minRatioOfEachShareInPortfolio,\r\n    maxRatioOfEachShareInPortfolio\r\n  } = portfolioData.strategy;\r\n\r\n  return (\r\n    <div>\r\n      <h2>{portfolioData.name}</h2>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th width=\"10%\">ID</th>\r\n            <th width=\"30%\">Aktie</th>\r\n            <th width=\"20%\">Andel av portfölj</th>\r\n            <th widrth=\"30%\">Bransch</th>\r\n            <th widrth=\"10%\">P/E</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {portfolioData.stocks.map(stock => (\r\n            <StockRow\r\n              stock={stock}\r\n              portfolioValue={getPortfolioValue(portfolioData)}\r\n              minRatio={minRatioOfEachShareInPortfolio}\r\n              maxRatio={maxRatioOfEachShareInPortfolio}\r\n              key={stock.id}\r\n            />\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction stockRatioIsGood(stockRatio, minRatio, maxRatio) {\r\n  return stockRatio >= minRatio && stockRatio <= maxRatio;\r\n}\r\n\r\nfunction StockRow(props) {\r\n  const { stock, portfolioValue, minRatio, maxRatio } = props;\r\n\r\n  const stockRatio = (getStockValue(stock) / portfolioValue) * 100;\r\n  return (\r\n    <tr key={stock.id}>\r\n      <td>{stock.id}</td>\r\n      <td>{stock.name}</td>\r\n      <td\r\n        className={classNames({\r\n          good: stockRatioIsGood(stockRatio, minRatio, maxRatio),\r\n          bad: !stockRatioIsGood(stockRatio, minRatio, maxRatio)\r\n        })}\r\n      >\r\n        {stockRatio.toFixed(2)}%\r\n      </td>\r\n      <td>{stock.sector}</td>\r\n      <td>{stock[PRICE_EARNINGS_RATIO]}</td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nexport default Portfolio;\r\n","const stockDetails = {\n  id: \"4231\",\n  annualReports: [\n    {\n      currency: \"USD\",\n      year: 2018,\n      revenue: 27058000000,\n      numberOfEmployees: 67000,\n      numberOfShares: 286800000,\n      //numberOfShares: 278486115, //avanza\n      earningsBeforeInterestAndTax: 4538000000,\n      netEarnings: 2909000000,\n      totalAssets: 31864000000,\n      totalEquity: 11472000000\n    }\n  ]\n};\n\nexport default stockDetails;\n","const stockDetails = {\n  id: \"4093\",\n  annualReports: [\n    {\n      currency: \"USD\",\n      year: 2018,\n      revenue: 30095000000,\n      numberOfEmployees: 85000,\n      numberOfShares: 169198172,\n      earningsBeforeInterestAndTax: 3780000000,\n      netEarnings: 3229000000,\n      totalAssets: 37653000000,\n      totalDebt: 21709000000\n    }\n  ]\n};\n\nexport default stockDetails;\n","const stockDetails = {\n  id: \"4262\",\n  annualReports: [\n    {\n      currency: \"USD\",\n      year: 2018,\n      revenue: 36193000000,\n      numberOfEmployees: 105600,\n      //numberOfShares: 288844120, //avanza\n      numberOfShares: 299200000, // diluted (basic 295300000)\n      earningsBeforeInterestAndTax: 4457000000,\n      netEarnings: 3345000000,\n      totalAssets: 45408000000,\n      totalEquity: 11732000000,\n      totalDebt: 12417000000\n    }\n  ]\n};\n\nexport default stockDetails;\n","import { MILLION, THOUSAND } from \"../../constants\";\n\nconst stockDetails = {\n  id: \"3937\",\n  annualReports: [\n    {\n      currency: \"USD\",\n      year: 2018,\n      revenue: 53762000000,\n      numberOfEmployees: 105 * THOUSAND,\n      numberOfShares: 281 * MILLION,\n      earningsBeforeInterestAndTax: 5838 * MILLION,\n      netEarnings: 5046000000,\n      totalAssets: 44876000000,\n      totalDebt: 14104000000\n    },\n    {\n      currency: \"USD\",\n      year: 2017,\n      revenue: 49960 * MILLION,\n      numberOfEmployees: 100 * THOUSAND,\n      numberOfShares: 284 * MILLION,\n      earningsBeforeInterestAndTax: 5246 * MILLION,\n      netEarnings: 1963 * MILLION,\n      totalAssets: 46620 * MILLION,\n      totalDebt: 14263 * MILLION\n    }\n  ],\n  interimReports: [\n    {\n      currency: \"USD\",\n      year: 2019,\n      period: \"Q3\",\n      revenue: 15200 * MILLION,\n      numberOfEmployees: 105 * THOUSAND,\n      numberOfShares: 284 * MILLION, //UNSURE\n      earningsBeforeInterestAndTax: 2105 * MILLION,\n      netEarnings: 1600 * MILLION,\n      totalAssets: 49275 * MILLION,\n      totalDebt: 45338 * MILLION\n    }\n  ]\n};\n\nexport default stockDetails;\n","import { YEAR, BILLION, MILLION, THOUSAND } from \"../constants\";\n\nexport function formatAllFields(inputData) {\n  let stockDetails = { ...inputData };\n\n  Object.keys(stockDetails).forEach(key => {\n    if (typeof key !== \"undefined\" && keyShouldBeFormatted(key)) {\n      stockDetails[key] = formatNumber(stockDetails[key]);\n    }\n  });\n\n  return stockDetails;\n}\n\nfunction keyShouldBeFormatted(key) {\n  switch (key) {\n    case YEAR:\n      return false;\n    default:\n      return true;\n  }\n}\n\nfunction formatNumber(number) {\n  if (isNaN(number) || typeof number === \"string\") {\n    return number;\n  }\n\n  let returnValue = \"\";\n  const negative = number < 0;\n  if (negative) {\n    number = number * -1;\n  }\n\n  if (number >= BILLION) {\n    returnValue = number.toPrecision(3) / BILLION + \" miljarder\";\n  } else if (number >= MILLION) {\n    returnValue = number.toPrecision(3) / MILLION + \" miljoner\";\n  } else if (number >= THOUSAND) {\n    returnValue = numberWithSpaces(number.toFixed(0));\n  } else {\n    returnValue = number.toPrecision(3).replace(\".00e+3\", \" 000\");\n  }\n\n  if (negative) {\n    returnValue = \"-\" + returnValue;\n  }\n\n  return returnValue;\n}\n\nfunction numberWithSpaces(x) {\n  var parts = x.toString().split(\".\");\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\n  return parts.join(\".\");\n}\n","import {\n  exchangeRates,\n  EARNINGS_PER_SHARE,\n  NET_EARNINGS,\n  NUMBER_OF_SHARES,\n  PRICE_BOOK_VALUE,\n  TOTAL_EQUITY,\n  TOTAL_DEBT,\n  TOTAL_ASSETS,\n  SOLIDITY,\n  MARKET_CAP,\n  PRICE_SALES_RATIO,\n  LAST_PRICE,\n  CURRENCY,\n  REVENUE,\n  OPERATING_MARGIN,\n  NUMBER_OF_EMPLOYEES,\n  REVENUE_PER_EMPLOYEE,\n  REVENUE_PER_SHARE,\n  EBIT\n} from \"../constants\";\n\n// TODO: Get currency exchange rates from some API\nfunction convertFromSEK(amount, currency) {\n  switch (currency) {\n    case \"SEK\":\n      return amount;\n    case \"USD\":\n      return amount / exchangeRates.USD;\n    case \"DKK\":\n      return amount / exchangeRates.DKK;\n    default:\n      console.error(\"Missing currency: \" + currency);\n      return amount;\n  }\n}\n\nexport function calculateKPIs(inputData, inputBasicData) {\n  let stockDetails = { ...inputData };\n  let basicData = { ...inputBasicData };\n\n  stockDetails = calculateEquityDebtAndAssets(stockDetails);\n\n  stockDetails = calculateKPIsFromBasicData(stockDetails, basicData);\n\n  stockDetails[SOLIDITY] = calculateSolidity(stockDetails);\n  stockDetails[EARNINGS_PER_SHARE] = calculateEarningsPerShare(stockDetails);\n  stockDetails[OPERATING_MARGIN] = calculateOperatingMargin(stockDetails);\n  stockDetails[REVENUE_PER_EMPLOYEE] = calculateRevenuePerEmployee(\n    stockDetails\n  );\n  stockDetails[REVENUE_PER_SHARE] = calculateRevenuePerShare(stockDetails);\n\n  return stockDetails;\n}\n\nexport function calculateSolidity(stockDetails) {\n  return (stockDetails[TOTAL_EQUITY] / stockDetails[TOTAL_ASSETS]) * 100;\n}\n\nexport function calculateEarningsPerShare(stockDetails) {\n  return stockDetails[NET_EARNINGS] / stockDetails[NUMBER_OF_SHARES];\n}\n\n// Rörelsemarginal:\nexport function calculateOperatingMargin(stockDetails) {\n  return (stockDetails[EBIT] / stockDetails[REVENUE]) * 100;\n}\n\nexport function calculateRevenuePerEmployee(stockDetails) {\n  return stockDetails[REVENUE] / stockDetails[NUMBER_OF_EMPLOYEES];\n}\n\nexport function calculateRevenuePerShare(stockDetails) {\n  return stockDetails[REVENUE] / stockDetails[NUMBER_OF_SHARES];\n}\n\nexport function calculateKPIsFromBasicData(inputData, inputBasicData) {\n  let stockDetails = { ...inputData };\n  let basicData = { ...inputBasicData };\n\n  if (!basicData) {\n    return stockDetails;\n  }\n\n  basicData[LAST_PRICE] = convertFromSEK(\n    basicData[LAST_PRICE],\n    stockDetails[CURRENCY]\n  );\n\n  stockDetails[PRICE_SALES_RATIO] =\n    basicData[LAST_PRICE] /\n    (stockDetails[REVENUE] / stockDetails[NUMBER_OF_SHARES]);\n\n  stockDetails[PRICE_BOOK_VALUE] =\n    basicData[LAST_PRICE] /\n    (stockDetails[TOTAL_EQUITY] / stockDetails[NUMBER_OF_SHARES]);\n\n  stockDetails[MARKET_CAP] =\n    stockDetails[NUMBER_OF_SHARES] * basicData[LAST_PRICE];\n\n  return stockDetails;\n}\n\nexport function calculateEquityDebtAndAssets(inputData) {\n  let stockDetails = { ...inputData };\n\n  if (!stockDetails[TOTAL_DEBT]) {\n    stockDetails[TOTAL_DEBT] =\n      stockDetails[TOTAL_ASSETS] - stockDetails[TOTAL_EQUITY];\n  } else if (!stockDetails[TOTAL_EQUITY]) {\n    stockDetails[TOTAL_EQUITY] =\n      stockDetails[TOTAL_ASSETS] - stockDetails[TOTAL_DEBT];\n  } else if (!stockDetails[TOTAL_ASSETS]) {\n    stockDetails[TOTAL_ASSETS] =\n      stockDetails[TOTAL_EQUITY] + stockDetails[TOTAL_DEBT];\n  }\n\n  if (\n    stockDetails[TOTAL_DEBT] &&\n    stockDetails[TOTAL_EQUITY] &&\n    stockDetails[TOTAL_ASSETS]\n  ) {\n    if (\n      stockDetails[TOTAL_EQUITY] !==\n      stockDetails[TOTAL_ASSETS] - stockDetails[TOTAL_DEBT]\n    ) {\n      stockDetails[TOTAL_DEBT] = \"FEL\";\n      stockDetails[TOTAL_EQUITY] = \"FEL\";\n      stockDetails[TOTAL_ASSETS] = \"FEL\";\n    }\n  }\n\n  return stockDetails;\n}\n","import { YEAR } from \"../constants\";\n\nexport function calculateChange(report, previousReport) {\n  let changeValues = {};\n  Object.keys(report).forEach(key => {\n    if (changeShouldBeCalculated(key, report[key])) {\n      changeValues[key] = (\n        (report[key] / previousReport[key]) * 100 -\n        100\n      ).toFixed(2);\n    }\n  });\n\n  return changeValues;\n}\n\nfunction changeShouldBeCalculated(key, value) {\n  if (\n    typeof key === \"undefined\" ||\n    typeof value === \"undefined\" ||\n    typeof value !== \"number\"\n  ) {\n    return false;\n  }\n  switch (key) {\n    case YEAR:\n      return false;\n    default:\n      return true;\n  }\n}\n","import raytheon from \"./stocks/raytheon\";\nimport northrupGrumman from \"./stocks/northrupGrumman\";\nimport generalDynamics from \"./stocks/generalDynamics\";\nimport lockheedMartin from \"./stocks/lockheedMartin\";\n\nimport { formatAllFields } from \"./formatAllFields\";\nimport { calculateKPIs } from \"./calculateKPIs\";\nimport { YEAR, ID, CHANGE_VALUES } from \"../constants\";\nimport { calculateChange } from \"./calculateChangeValues\";\n\nfunction getAllStocks() {\n  let stocks = {};\n  stocks[raytheon.id] = raytheon;\n  stocks[northrupGrumman.id] = northrupGrumman;\n  stocks[generalDynamics.id] = generalDynamics;\n  stocks[lockheedMartin.id] = lockheedMartin;\n  return stocks;\n}\n\nexport function getStockDetails(id, basicStockData) {\n  let stockDetails = {\n    ...getAllStocks()[id]\n  };\n  let basicData = { ...basicStockData };\n\n  // TODO: sort reports\n\n  if (stockDetails.annualReports) {\n    stockDetails.annualReports = stockDetails.annualReports.map(report =>\n      calculateKPIs(report, basicData)\n    );\n    stockDetails.annualReports = stockDetails.annualReports.map(\n      (report, index) => {\n        if (index >= stockDetails.annualReports.length - 1) {\n          return report;\n        }\n        const changeValues = calculateChange(\n          report,\n          stockDetails.annualReports[index + 1]\n        );\n        report[CHANGE_VALUES] = changeValues;\n        return report;\n      }\n    );\n    stockDetails.annualReports = stockDetails.annualReports.map(report =>\n      formatAllFields(report)\n    );\n  }\n\n  if (stockDetails.interimReports) {\n    stockDetails.interimReports = stockDetails.interimReports.map(report =>\n      calculateKPIs(report, basicData)\n    );\n    stockDetails.interimReports = stockDetails.interimReports.map(\n      (report, index) => {\n        if (index >= stockDetails.interimReports.length - 1) {\n          return report;\n        }\n        const changeValues = calculateChange(\n          report,\n          stockDetails.interimReports[index + 1]\n        );\n        report[CHANGE_VALUES] = changeValues;\n        return report;\n      }\n    );\n    stockDetails.interimReports = stockDetails.interimReports.map(report =>\n      formatAllFields(report)\n    );\n  }\n\n  const latestReport = stockDetails.annualReports\n    ? stockDetails.annualReports[0]\n    : {};\n\n  stockDetails = {\n    ...stockDetails,\n    ...latestReport\n  };\n\n  return stockDetails;\n}\n","import { getStock } from \"../avanza\";\nimport { getStockDetails } from \"../stockDetails/stockDetails\";\n\nconst interestingStocks = [\"4231\", \"4093\", \"4262\", \"3937\"];\n\nexport function getWeaponStocks() {\n  return new Promise((resolve, reject) => {\n    let promises = [];\n\n    let stocksToShow = interestingStocks;\n\n    stocksToShow.forEach(id => {\n      promises.push(getStock(id));\n    });\n\n    Promise.all(promises).then(stocks => {\n      let returnData = [];\n      stocks.forEach(stockData => {\n        const stockDetails = getStockDetails(stockData.id, stockData);\n        returnData.push({ ...stockData, ...stockDetails });\n      });\n\n      resolve(returnData);\n    });\n  });\n}\n","import React from \"react\";\r\nimport StockTable from \"../components/StockTable\";\r\nimport { getWeaponStocks } from \"./dataRetriever\";\r\n\r\nimport { getAllOwnedStocks } from \"../Portfolio/portfolioUtils\";\r\nimport {\r\n  OPERATING_MARGIN,\r\n  PRICE_EARNINGS_RATIO,\r\n  PRICE_SALES_RATIO,\r\n  DIRECT_YIELD,\r\n  NUMBER_OF_EMPLOYEES,\r\n  REVENUE,\r\n  REVENUE_PER_EMPLOYEE,\r\n  TOTAL_ASSETS,\r\n  EARNINGS_PER_SHARE,\r\n  PRICE_BOOK_VALUE,\r\n  SOLIDITY,\r\n  MARKET_CAP,\r\n  NET_EARNINGS,\r\n  EBIT\r\n} from \"../constants\";\r\n\r\nclass Weapons extends React.Component {\r\n  state = {\r\n    stocks: [],\r\n    ownedStocks: [],\r\n    error: null,\r\n    sortKey: PRICE_EARNINGS_RATIO,\r\n    columnsToShow: [\r\n      PRICE_EARNINGS_RATIO,\r\n      PRICE_SALES_RATIO,\r\n      DIRECT_YIELD,\r\n      NUMBER_OF_EMPLOYEES,\r\n      REVENUE,\r\n      REVENUE_PER_EMPLOYEE,\r\n      OPERATING_MARGIN,\r\n      TOTAL_ASSETS,\r\n      PRICE_BOOK_VALUE,\r\n      SOLIDITY,\r\n      MARKET_CAP\r\n    ]\r\n  };\r\n\r\n  componentDidMount() {\r\n    getWeaponStocks()\r\n      .then(stocks => {\r\n        this.setState({\r\n          stocks: stocks\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n        this.setState({\r\n          error: err.message\r\n        });\r\n      });\r\n\r\n    getAllOwnedStocks().then(ownedStocks => {\r\n      this.setState({\r\n        ownedStocks: ownedStocks\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error != null) {\r\n      return <p>{this.state.error}</p>;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h1>Vapen</h1>\r\n        <StockTable\r\n          stocks={this.state.stocks}\r\n          ownedStocks={this.state.ownedStocks}\r\n          sortKey={this.state.sortKey}\r\n          onSort={sortKey => {\r\n            this.setState({ sortKey: sortKey });\r\n          }}\r\n          columnsToShow={this.state.columnsToShow}\r\n          showSingleStock={this.props.showSingleStock}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Weapons;\r\n","import React from \"react\";\nimport StockTable from \"../components/StockTable\";\n\nimport {\n  OPERATING_MARGIN,\n  PRICE_EARNINGS_RATIO,\n  PRICE_SALES_RATIO,\n  DIRECT_YIELD,\n  NUMBER_OF_EMPLOYEES,\n  REVENUE,\n  REVENUE_PER_EMPLOYEE,\n  TOTAL_ASSETS,\n  EARNINGS_PER_SHARE,\n  PRICE_BOOK_VALUE,\n  SOLIDITY,\n  ANNUAL_REPORTS_TABLE,\n  INTERIM_REPORTS_TABLE,\n  NET_EARNINGS,\n  EBIT\n} from \"../constants\";\nimport { getStockDetails } from \"../stockDetails/stockDetails\";\nimport { getStock } from \"../avanza\";\n\nclass SingleStock extends React.Component {\n  state = {\n    stocksDetails: null,\n    error: null,\n    sortKey: PRICE_EARNINGS_RATIO,\n    columnsToShow: [\n      PRICE_SALES_RATIO,\n      NUMBER_OF_EMPLOYEES,\n      REVENUE,\n      REVENUE_PER_EMPLOYEE,\n      EBIT,\n      NET_EARNINGS,\n      OPERATING_MARGIN,\n      TOTAL_ASSETS,\n      EARNINGS_PER_SHARE,\n      PRICE_BOOK_VALUE,\n      SOLIDITY\n    ]\n  };\n\n  componentDidMount() {\n    getStock(this.props.id).then(basicData => {\n      this.setState({\n        stockDetails: {\n          ...basicData,\n          ...getStockDetails(this.props.id, basicData)\n        }\n      });\n    });\n  }\n\n  renderAnnualReports() {\n    const { stockDetails } = this.state;\n\n    if (!stockDetails.annualReports) {\n      return <div></div>;\n    }\n    return (\n      <div>\n        <h2>Årsrapporter</h2>\n        <StockTable\n          type={ANNUAL_REPORTS_TABLE}\n          stocks={stockDetails.annualReports}\n          ownedStocks={[]}\n          columnsToShow={this.state.columnsToShow}\n        />\n      </div>\n    );\n  }\n\n  renderInterimReports() {\n    const { stockDetails } = this.state;\n\n    if (!stockDetails.interimReports) {\n      return <div></div>;\n    }\n    return (\n      <div>\n        <h2>Kvartalsrapporter</h2>\n        <StockTable\n          type={INTERIM_REPORTS_TABLE}\n          stocks={stockDetails.interimReports}\n          ownedStocks={[]}\n          columnsToShow={this.state.columnsToShow}\n        />\n      </div>\n    );\n  }\n\n  render() {\n    if (this.state.error != null) {\n      return <p>{this.state.error}</p>;\n    }\n\n    const { stockDetails } = this.state;\n\n    if (!stockDetails) {\n      return <div />;\n    }\n\n    return (\n      <div>\n        <h1>{stockDetails.name}</h1>\n\n        {this.renderAnnualReports()}\n        {this.renderInterimReports()}\n      </div>\n    );\n  }\n}\n\nexport default SingleStock;\n","import { getStock } from \"../avanza\";\nimport { getStockDetails } from \"../stockDetails/stockDetails\";\n\nconst interestingStocks = [\n  \"5234\",\n  \"5235\",\n  \"5447\",\n  \"5580\",\n  \"5471\",\n  \"5269\",\n  \"5259\",\n  \"5271\",\n  \"5238\",\n  \"5236\",\n  \"5267\",\n  \"45189\",\n  \"45188\",\n  \"861431\",\n  \"861430\"\n];\n\nexport function getIndustryStocks() {\n  return new Promise((resolve, reject) => {\n    let promises = [];\n\n    let stocksToShow = interestingStocks;\n\n    stocksToShow.forEach(id => {\n      promises.push(getStock(id));\n    });\n\n    Promise.all(promises).then(stocks => {\n      let returnData = [];\n      stocks.forEach(stockData => {\n        const stockDetails = getStockDetails(stockData.id, stockData);\n        returnData.push({ ...stockData, ...stockDetails });\n      });\n\n      resolve(returnData);\n    });\n  });\n}\n","import React from \"react\";\r\nimport StockTable from \"../components/StockTable\";\r\nimport { getIndustryStocks } from \"./dataRetriever\";\r\n\r\nimport { getAllOwnedStocks } from \"../Portfolio/portfolioUtils\";\r\nimport {\r\n  OPERATING_MARGIN,\r\n  PRICE_EARNINGS_RATIO,\r\n  PRICE_SALES_RATIO,\r\n  DIRECT_YIELD,\r\n  NUMBER_OF_EMPLOYEES,\r\n  REVENUE,\r\n  REVENUE_PER_EMPLOYEE,\r\n  TOTAL_ASSETS,\r\n  EARNINGS_PER_SHARE,\r\n  PRICE_BOOK_VALUE,\r\n  SOLIDITY,\r\n  MARKET_CAP,\r\n  NET_EARNINGS,\r\n  EBIT\r\n} from \"../constants\";\r\n\r\nclass Industry extends React.Component {\r\n  state = {\r\n    stocks: [],\r\n    ownedStocks: [],\r\n    error: null,\r\n    sortKey: PRICE_EARNINGS_RATIO,\r\n    columnsToShow: [\r\n      PRICE_EARNINGS_RATIO,\r\n      PRICE_SALES_RATIO,\r\n      DIRECT_YIELD,\r\n      NUMBER_OF_EMPLOYEES,\r\n      REVENUE,\r\n      REVENUE_PER_EMPLOYEE,\r\n      OPERATING_MARGIN,\r\n      TOTAL_ASSETS,\r\n      PRICE_BOOK_VALUE,\r\n      SOLIDITY,\r\n      MARKET_CAP\r\n    ]\r\n  };\r\n\r\n  componentDidMount() {\r\n    getIndustryStocks()\r\n      .then(stocks => {\r\n        this.setState({\r\n          stocks: stocks\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n        this.setState({\r\n          error: err.message\r\n        });\r\n      });\r\n\r\n    getAllOwnedStocks().then(ownedStocks => {\r\n      this.setState({\r\n        ownedStocks: ownedStocks\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error != null) {\r\n      return <p>{this.state.error}</p>;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h1>Verkstad</h1>\r\n        <StockTable\r\n          stocks={this.state.stocks}\r\n          ownedStocks={this.state.ownedStocks}\r\n          sortKey={this.state.sortKey}\r\n          onSort={sortKey => {\r\n            this.setState({ sortKey: sortKey });\r\n          }}\r\n          // columnsToShow={this.state.columnsToShow}\r\n          showSingleStock={this.props.showSingleStock}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Industry;\r\n","import { getStock } from \"../avanza\";\nimport { getStockDetails } from \"../stockDetails/stockDetails\";\n\nconst interestingStocks = [\n  \"5263\",\n  \"5332\",\n  \"5422\",\n  \"5556\",\n  \"5262\",\n  \"5251\",\n  \"5250\",\n  \"52842\"\n];\n\nexport function getForestStocks() {\n  return new Promise((resolve, reject) => {\n    let promises = [];\n\n    let stocksToShow = interestingStocks;\n\n    stocksToShow.forEach(id => {\n      promises.push(getStock(id));\n    });\n\n    Promise.all(promises).then(stocks => {\n      let returnData = [];\n      stocks.forEach(stockData => {\n        const stockDetails = getStockDetails(stockData.id, stockData);\n        returnData.push({ ...stockData, ...stockDetails });\n      });\n\n      resolve(returnData);\n    });\n  });\n}\n","import React from \"react\";\r\nimport StockTable from \"../components/StockTable\";\r\nimport { getForestStocks } from \"./dataRetriever\";\r\n\r\nimport { getAllOwnedStocks } from \"../Portfolio/portfolioUtils\";\r\nimport { PRICE_EARNINGS_RATIO, DIRECT_YIELD, VOLATILITY } from \"../constants\";\r\n\r\nclass Forest extends React.Component {\r\n  state = {\r\n    stocks: [],\r\n    ownedStocks: [],\r\n    error: null,\r\n    sortKey: PRICE_EARNINGS_RATIO,\r\n    columnsToShow: [PRICE_EARNINGS_RATIO, DIRECT_YIELD, VOLATILITY]\r\n  };\r\n\r\n  componentDidMount() {\r\n    getForestStocks()\r\n      .then(stocks => {\r\n        this.setState({\r\n          stocks: stocks\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n        this.setState({\r\n          error: err.message\r\n        });\r\n      });\r\n\r\n    getAllOwnedStocks().then(ownedStocks => {\r\n      this.setState({\r\n        ownedStocks: ownedStocks\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error != null) {\r\n      return <p>{this.state.error}</p>;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h1>Skog</h1>\r\n        <StockTable\r\n          stocks={this.state.stocks}\r\n          ownedStocks={this.state.ownedStocks}\r\n          sortKey={this.state.sortKey}\r\n          onSort={sortKey => {\r\n            this.setState({ sortKey: sortKey });\r\n          }}\r\n          columnsToShow={this.state.columnsToShow}\r\n          showSingleStock={this.props.showSingleStock}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Forest;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport BestYield from \"../BestYield/BestYield\";\nimport BlueChip from \"../BlueChip/BlueChip\";\nimport Portfolio from \"../Portfolio/Portfolio\";\nimport Weapons from \"../Weapons/Weapons\";\nimport SingleStock from \"../SingleStock/SingleStock\";\nimport Industry from \"../Industry/Industry\";\nimport Forest from \"../Forest/Forest\";\n\nconst portfolioPage = \"PORTFOLIO_PAGE\";\nconst bestYieldPage = \"BEST_YIELD_PAGE\";\nconst blueChipPage = \"BLUE_CHIP_PAGE\";\nconst weaponsPage = \"WEAPONS_PAGE\";\nconst industryPage = \"INDUSTRY_PAGE\";\nconst forestPage = \"FOREST_PAGE\";\n\nconst classNames = require(\"classnames\");\n\nclass App extends React.Component {\n  state = {\n    activePage: bestYieldPage,\n    activeStock: null\n  };\n\n  componentDidMount() {\n    require(\"dotenv\").config();\n  }\n\n  renderActivePage() {\n    if (this.state.activeStock) {\n      return <SingleStock id={this.state.activeStock} />;\n    }\n\n    switch (this.state.activePage) {\n      case portfolioPage:\n        return <Portfolio showSingleStock={this.showSingleStock.bind(this)} />;\n      case bestYieldPage:\n        return <BestYield showSingleStock={this.showSingleStock.bind(this)} />;\n      case blueChipPage:\n        return <BlueChip showSingleStock={this.showSingleStock.bind(this)} />;\n      case weaponsPage:\n        return <Weapons showSingleStock={this.showSingleStock.bind(this)} />;\n      case industryPage:\n        return <Industry showSingleStock={this.showSingleStock.bind(this)} />;\n      case forestPage:\n        return <Forest showSingleStock={this.showSingleStock.bind(this)} />;\n      default:\n        return <div></div>;\n    }\n  }\n\n  renderButton(title, page) {\n    return (\n      <button\n        onClick={() => {\n          this.setState({ activePage: page, activeStock: null });\n        }}\n        className={classNames({\n          active: this.state.activePage === page\n        })}\n      >\n        {title}\n      </button>\n    );\n  }\n\n  showSingleStock(id) {\n    this.setState({ activeStock: id });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Stock Master</h1>\n        {this.renderButton(\"Portfolio\", portfolioPage)}\n        {this.renderButton(\"Utdelningsaktier\", bestYieldPage)}\n        {this.renderButton(\"Basaktier\", blueChipPage)}\n        {this.renderButton(\"Verkstad\", industryPage)}\n        {this.renderButton(\"Skog\", forestPage)}\n        {this.renderButton(\"Vapen\", weaponsPage)}\n        {this.renderActivePage()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}